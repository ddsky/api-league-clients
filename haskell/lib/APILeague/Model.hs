{-
   API League

   API League is a Hub for World Class APIs.

   OpenAPI Version: 3.0.0
   API League API version: 1.6.4
   Contact: mail@apileague.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : APILeague.Model
-}

{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveFoldable #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE DuplicateRecordFields #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NamedFieldPuns #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE TupleSections #-}
{-# LANGUAGE TypeFamilies #-}
{-# OPTIONS_GHC -fno-warn-unused-matches -fno-warn-unused-binds -fno-warn-unused-imports #-}

module APILeague.Model where

import APILeague.Core
import APILeague.MimeTypes

import Data.Aeson ((.:),(.:!),(.:?),(.=))

import qualified Control.Arrow as P (left)
import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Base64 as B64
import qualified Data.ByteString.Char8 as BC
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.HashMap.Lazy as HM
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Set as Set
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Time as TI
import qualified Lens.Micro as L
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Control.Applicative ((<|>))
import Control.Applicative (Alternative)
import Data.Function ((&))
import Data.Monoid ((<>))
import Data.Text (Text)
import Prelude (($),(/=),(.),(<$>),(<*>),(>>=),(=<<),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)

import qualified Prelude as P



-- * Parameter newtypes


-- ** AddRecipeInformation
newtype AddRecipeInformation = AddRecipeInformation { unAddRecipeInformation :: Bool } deriving (P.Eq, P.Show)

-- ** AddWinePairing
newtype AddWinePairing = AddWinePairing { unAddWinePairing :: Bool } deriving (P.Eq, P.Show)

-- ** Analyze
newtype Analyze = Analyze { unAnalyze :: Bool } deriving (P.Eq, P.Show)

-- ** Authors
newtype Authors = Authors { unAuthors :: Text } deriving (P.Eq, P.Show)

-- ** Budget
newtype Budget = Budget { unBudget :: Double } deriving (P.Eq, P.Show)

-- ** Categories
newtype Categories = Categories { unCategories :: Text } deriving (P.Eq, P.Show)

-- ** Crop
newtype Crop = Crop { unCrop :: Bool } deriving (P.Eq, P.Show)

-- ** Cuisine
newtype Cuisine = Cuisine { unCuisine :: Text } deriving (P.Eq, P.Show)

-- ** Cuisines
newtype Cuisines = Cuisines { unCuisines :: Text } deriving (P.Eq, P.Show)

-- ** Diet
newtype Diet = Diet { unDiet :: Text } deriving (P.Eq, P.Show)

-- ** Difficulty
newtype Difficulty = Difficulty { unDifficulty :: Text } deriving (P.Eq, P.Show)

-- ** Distance
newtype Distance = Distance { unDistance :: Int } deriving (P.Eq, P.Show)

-- ** Domain
newtype Domain = Domain { unDomain :: Text } deriving (P.Eq, P.Show)

-- ** EarliestPublishDate
newtype EarliestPublishDate = EarliestPublishDate { unEarliestPublishDate :: Text } deriving (P.Eq, P.Show)

-- ** EarliestPublishYear
newtype EarliestPublishYear = EarliestPublishYear { unEarliestPublishYear :: Int } deriving (P.Eq, P.Show)

-- ** Email
newtype Email = Email { unEmail :: Text } deriving (P.Eq, P.Show)

-- ** Entities
newtype Entities = Entities { unEntities :: Text } deriving (P.Eq, P.Show)

-- ** Equipment
newtype Equipment = Equipment { unEquipment :: Text } deriving (P.Eq, P.Show)

-- ** ExcludeCuisines
newtype ExcludeCuisines = ExcludeCuisines { unExcludeCuisines :: Text } deriving (P.Eq, P.Show)

-- ** ExcludeIngredients
newtype ExcludeIngredients = ExcludeIngredients { unExcludeIngredients :: Text } deriving (P.Eq, P.Show)

-- ** ExcludeTags
newtype ExcludeTags = ExcludeTags { unExcludeTags :: Text } deriving (P.Eq, P.Show)

-- ** FillIngredients
newtype FillIngredients = FillIngredients { unFillIngredients :: Bool } deriving (P.Eq, P.Show)

-- ** Flavors
newtype Flavors = Flavors { unFlavors :: Text } deriving (P.Eq, P.Show)

-- ** FoodName
newtype FoodName = FoodName { unFoodName :: Text } deriving (P.Eq, P.Show)

-- ** Genres
newtype Genres = Genres { unGenres :: Text } deriving (P.Eq, P.Show)

-- ** GlassTypes
newtype GlassTypes = GlassTypes { unGlassTypes :: Text } deriving (P.Eq, P.Show)

-- ** GroupResults
newtype GroupResults = GroupResults { unGroupResults :: Bool } deriving (P.Eq, P.Show)

-- ** HeadlinesOnly
newtype HeadlinesOnly = HeadlinesOnly { unHeadlinesOnly :: Bool } deriving (P.Eq, P.Show)

-- ** Height
newtype Height = Height { unHeight :: Int } deriving (P.Eq, P.Show)

-- ** Id
newtype Id = Id { unId :: Int } deriving (P.Eq, P.Show)

-- ** IncludeIngredients
newtype IncludeIngredients = IncludeIngredients { unIncludeIngredients :: Text } deriving (P.Eq, P.Show)

-- ** IncludeTags
newtype IncludeTags = IncludeTags { unIncludeTags :: Text } deriving (P.Eq, P.Show)

-- ** Ingredients
newtype Ingredients = Ingredients { unIngredients :: Text } deriving (P.Eq, P.Show)

-- ** Intolerances
newtype Intolerances = Intolerances { unIntolerances :: Text } deriving (P.Eq, P.Show)

-- ** IsOpen
newtype IsOpen = IsOpen { unIsOpen :: Bool } deriving (P.Eq, P.Show)

-- ** Isbn
newtype Isbn = Isbn { unIsbn :: Text } deriving (P.Eq, P.Show)

-- ** Key
newtype Key = Key { unKey :: Text } deriving (P.Eq, P.Show)

-- ** Keywords
newtype Keywords = Keywords { unKeywords :: Text } deriving (P.Eq, P.Show)

-- ** KeywordsInImage
newtype KeywordsInImage = KeywordsInImage { unKeywordsInImage :: Bool } deriving (P.Eq, P.Show)

-- ** Language
newtype Language = Language { unLanguage :: Text } deriving (P.Eq, P.Show)

-- ** Lat
newtype Lat = Lat { unLat :: Double } deriving (P.Eq, P.Show)

-- ** LatestPublishDate
newtype LatestPublishDate = LatestPublishDate { unLatestPublishDate :: Text } deriving (P.Eq, P.Show)

-- ** LatestPublishYear
newtype LatestPublishYear = LatestPublishYear { unLatestPublishYear :: Int } deriving (P.Eq, P.Show)

-- ** LocationFilter
newtype LocationFilter = LocationFilter { unLocationFilter :: Text } deriving (P.Eq, P.Show)

-- ** Lon
newtype Lon = Lon { unLon :: Double } deriving (P.Eq, P.Show)

-- ** MaxAgeDays
newtype MaxAgeDays = MaxAgeDays { unMaxAgeDays :: Int } deriving (P.Eq, P.Show)

-- ** MaxAlcohol
newtype MaxAlcohol = MaxAlcohol { unMaxAlcohol :: Double } deriving (P.Eq, P.Show)

-- ** MaxAlcoholPercent
newtype MaxAlcoholPercent = MaxAlcoholPercent { unMaxAlcoholPercent :: Double } deriving (P.Eq, P.Show)

-- ** MaxCaffeine
newtype MaxCaffeine = MaxCaffeine { unMaxCaffeine :: Double } deriving (P.Eq, P.Show)

-- ** MaxCalcium
newtype MaxCalcium = MaxCalcium { unMaxCalcium :: Double } deriving (P.Eq, P.Show)

-- ** MaxCalories
newtype MaxCalories = MaxCalories { unMaxCalories :: Double } deriving (P.Eq, P.Show)

-- ** MaxCarbs
newtype MaxCarbs = MaxCarbs { unMaxCarbs :: Double } deriving (P.Eq, P.Show)

-- ** MaxCholesterol
newtype MaxCholesterol = MaxCholesterol { unMaxCholesterol :: Double } deriving (P.Eq, P.Show)

-- ** MaxCholine
newtype MaxCholine = MaxCholine { unMaxCholine :: Double } deriving (P.Eq, P.Show)

-- ** MaxCopper
newtype MaxCopper = MaxCopper { unMaxCopper :: Double } deriving (P.Eq, P.Show)

-- ** MaxFat
newtype MaxFat = MaxFat { unMaxFat :: Double } deriving (P.Eq, P.Show)

-- ** MaxFiber
newtype MaxFiber = MaxFiber { unMaxFiber :: Double } deriving (P.Eq, P.Show)

-- ** MaxFluoride
newtype MaxFluoride = MaxFluoride { unMaxFluoride :: Double } deriving (P.Eq, P.Show)

-- ** MaxFolate
newtype MaxFolate = MaxFolate { unMaxFolate :: Double } deriving (P.Eq, P.Show)

-- ** MaxFolicAcid
newtype MaxFolicAcid = MaxFolicAcid { unMaxFolicAcid :: Double } deriving (P.Eq, P.Show)

-- ** MaxIodine
newtype MaxIodine = MaxIodine { unMaxIodine :: Double } deriving (P.Eq, P.Show)

-- ** MaxIron
newtype MaxIron = MaxIron { unMaxIron :: Double } deriving (P.Eq, P.Show)

-- ** MaxLength
newtype MaxLength = MaxLength { unMaxLength :: Double } deriving (P.Eq, P.Show)

-- ** MaxLengthInt
newtype MaxLengthInt = MaxLengthInt { unMaxLengthInt :: Int } deriving (P.Eq, P.Show)

-- ** MaxLines
newtype MaxLines = MaxLines { unMaxLines :: Int } deriving (P.Eq, P.Show)

-- ** MaxMagnesium
newtype MaxMagnesium = MaxMagnesium { unMaxMagnesium :: Double } deriving (P.Eq, P.Show)

-- ** MaxManganese
newtype MaxManganese = MaxManganese { unMaxManganese :: Double } deriving (P.Eq, P.Show)

-- ** MaxPhosphorus
newtype MaxPhosphorus = MaxPhosphorus { unMaxPhosphorus :: Double } deriving (P.Eq, P.Show)

-- ** MaxPotassium
newtype MaxPotassium = MaxPotassium { unMaxPotassium :: Double } deriving (P.Eq, P.Show)

-- ** MaxProtein
newtype MaxProtein = MaxProtein { unMaxProtein :: Double } deriving (P.Eq, P.Show)

-- ** MaxRating
newtype MaxRating = MaxRating { unMaxRating :: Double } deriving (P.Eq, P.Show)

-- ** MaxSaturatedFat
newtype MaxSaturatedFat = MaxSaturatedFat { unMaxSaturatedFat :: Double } deriving (P.Eq, P.Show)

-- ** MaxSelenium
newtype MaxSelenium = MaxSelenium { unMaxSelenium :: Double } deriving (P.Eq, P.Show)

-- ** MaxSentiment
newtype MaxSentiment = MaxSentiment { unMaxSentiment :: Double } deriving (P.Eq, P.Show)

-- ** MaxServings
newtype MaxServings = MaxServings { unMaxServings :: Int } deriving (P.Eq, P.Show)

-- ** MaxSodium
newtype MaxSodium = MaxSodium { unMaxSodium :: Double } deriving (P.Eq, P.Show)

-- ** MaxSugar
newtype MaxSugar = MaxSugar { unMaxSugar :: Double } deriving (P.Eq, P.Show)

-- ** MaxTime
newtype MaxTime = MaxTime { unMaxTime :: Int } deriving (P.Eq, P.Show)

-- ** MaxVitaminA
newtype MaxVitaminA = MaxVitaminA { unMaxVitaminA :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminB1
newtype MaxVitaminB1 = MaxVitaminB1 { unMaxVitaminB1 :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminB12
newtype MaxVitaminB12 = MaxVitaminB12 { unMaxVitaminB12 :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminB2
newtype MaxVitaminB2 = MaxVitaminB2 { unMaxVitaminB2 :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminB3
newtype MaxVitaminB3 = MaxVitaminB3 { unMaxVitaminB3 :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminB5
newtype MaxVitaminB5 = MaxVitaminB5 { unMaxVitaminB5 :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminB6
newtype MaxVitaminB6 = MaxVitaminB6 { unMaxVitaminB6 :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminC
newtype MaxVitaminC = MaxVitaminC { unMaxVitaminC :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminD
newtype MaxVitaminD = MaxVitaminD { unMaxVitaminD :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminE
newtype MaxVitaminE = MaxVitaminE { unMaxVitaminE :: Double } deriving (P.Eq, P.Show)

-- ** MaxVitaminK
newtype MaxVitaminK = MaxVitaminK { unMaxVitaminK :: Double } deriving (P.Eq, P.Show)

-- ** MaxZinc
newtype MaxZinc = MaxZinc { unMaxZinc :: Double } deriving (P.Eq, P.Show)

-- ** MealType
newtype MealType = MealType { unMealType :: Text } deriving (P.Eq, P.Show)

-- ** MediaType
newtype MediaType = MediaType { unMediaType :: Text } deriving (P.Eq, P.Show)

-- ** MinAlcohol
newtype MinAlcohol = MinAlcohol { unMinAlcohol :: Double } deriving (P.Eq, P.Show)

-- ** MinAlcoholPercent
newtype MinAlcoholPercent = MinAlcoholPercent { unMinAlcoholPercent :: Double } deriving (P.Eq, P.Show)

-- ** MinCaffeine
newtype MinCaffeine = MinCaffeine { unMinCaffeine :: Double } deriving (P.Eq, P.Show)

-- ** MinCalcium
newtype MinCalcium = MinCalcium { unMinCalcium :: Double } deriving (P.Eq, P.Show)

-- ** MinCalories
newtype MinCalories = MinCalories { unMinCalories :: Double } deriving (P.Eq, P.Show)

-- ** MinCarbs
newtype MinCarbs = MinCarbs { unMinCarbs :: Double } deriving (P.Eq, P.Show)

-- ** MinCholesterol
newtype MinCholesterol = MinCholesterol { unMinCholesterol :: Double } deriving (P.Eq, P.Show)

-- ** MinCholine
newtype MinCholine = MinCholine { unMinCholine :: Double } deriving (P.Eq, P.Show)

-- ** MinCopper
newtype MinCopper = MinCopper { unMinCopper :: Double } deriving (P.Eq, P.Show)

-- ** MinFat
newtype MinFat = MinFat { unMinFat :: Double } deriving (P.Eq, P.Show)

-- ** MinFiber
newtype MinFiber = MinFiber { unMinFiber :: Double } deriving (P.Eq, P.Show)

-- ** MinFluoride
newtype MinFluoride = MinFluoride { unMinFluoride :: Double } deriving (P.Eq, P.Show)

-- ** MinFolate
newtype MinFolate = MinFolate { unMinFolate :: Double } deriving (P.Eq, P.Show)

-- ** MinFolicAcid
newtype MinFolicAcid = MinFolicAcid { unMinFolicAcid :: Double } deriving (P.Eq, P.Show)

-- ** MinIodine
newtype MinIodine = MinIodine { unMinIodine :: Double } deriving (P.Eq, P.Show)

-- ** MinIron
newtype MinIron = MinIron { unMinIron :: Double } deriving (P.Eq, P.Show)

-- ** MinLength
newtype MinLength = MinLength { unMinLength :: Int } deriving (P.Eq, P.Show)

-- ** MinLines
newtype MinLines = MinLines { unMinLines :: Int } deriving (P.Eq, P.Show)

-- ** MinMagnesium
newtype MinMagnesium = MinMagnesium { unMinMagnesium :: Double } deriving (P.Eq, P.Show)

-- ** MinManganese
newtype MinManganese = MinManganese { unMinManganese :: Double } deriving (P.Eq, P.Show)

-- ** MinPhosphorus
newtype MinPhosphorus = MinPhosphorus { unMinPhosphorus :: Double } deriving (P.Eq, P.Show)

-- ** MinPotassium
newtype MinPotassium = MinPotassium { unMinPotassium :: Double } deriving (P.Eq, P.Show)

-- ** MinProtein
newtype MinProtein = MinProtein { unMinProtein :: Double } deriving (P.Eq, P.Show)

-- ** MinRating
newtype MinRating = MinRating { unMinRating :: Double } deriving (P.Eq, P.Show)

-- ** MinSaturatedFat
newtype MinSaturatedFat = MinSaturatedFat { unMinSaturatedFat :: Double } deriving (P.Eq, P.Show)

-- ** MinSelenium
newtype MinSelenium = MinSelenium { unMinSelenium :: Double } deriving (P.Eq, P.Show)

-- ** MinSentiment
newtype MinSentiment = MinSentiment { unMinSentiment :: Double } deriving (P.Eq, P.Show)

-- ** MinServings
newtype MinServings = MinServings { unMinServings :: Int } deriving (P.Eq, P.Show)

-- ** MinSodium
newtype MinSodium = MinSodium { unMinSodium :: Double } deriving (P.Eq, P.Show)

-- ** MinSugar
newtype MinSugar = MinSugar { unMinSugar :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminA
newtype MinVitaminA = MinVitaminA { unMinVitaminA :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminB1
newtype MinVitaminB1 = MinVitaminB1 { unMinVitaminB1 :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminB12
newtype MinVitaminB12 = MinVitaminB12 { unMinVitaminB12 :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminB2
newtype MinVitaminB2 = MinVitaminB2 { unMinVitaminB2 :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminB3
newtype MinVitaminB3 = MinVitaminB3 { unMinVitaminB3 :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminB5
newtype MinVitaminB5 = MinVitaminB5 { unMinVitaminB5 :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminB6
newtype MinVitaminB6 = MinVitaminB6 { unMinVitaminB6 :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminC
newtype MinVitaminC = MinVitaminC { unMinVitaminC :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminD
newtype MinVitaminD = MinVitaminD { unMinVitaminD :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminE
newtype MinVitaminE = MinVitaminE { unMinVitaminE :: Double } deriving (P.Eq, P.Show)

-- ** MinVitaminK
newtype MinVitaminK = MinVitaminK { unMinVitaminK :: Double } deriving (P.Eq, P.Show)

-- ** MinZinc
newtype MinZinc = MinZinc { unMinZinc :: Double } deriving (P.Eq, P.Show)

-- ** Name
newtype Name = Name { unName :: Text } deriving (P.Eq, P.Show)

-- ** NewsSources
newtype NewsSources = NewsSources { unNewsSources :: Text } deriving (P.Eq, P.Show)

-- ** Number
newtype Number = Number { unNumber :: Int } deriving (P.Eq, P.Show)

-- ** Oclc
newtype Oclc = Oclc { unOclc :: Text } deriving (P.Eq, P.Show)

-- ** Offset
newtype Offset = Offset { unOffset :: Int } deriving (P.Eq, P.Show)

-- ** OnlyPublicDomain
newtype OnlyPublicDomain = OnlyPublicDomain { unOnlyPublicDomain :: Bool } deriving (P.Eq, P.Show)

-- ** Page
newtype Page = Page { unPage :: Int } deriving (P.Eq, P.Show)

-- ** ParamDate
newtype ParamDate = ParamDate { unParamDate :: Text } deriving (P.Eq, P.Show)

-- ** ParamText
newtype ParamText = ParamText { unParamText :: Text } deriving (P.Eq, P.Show)

-- ** Query
newtype Query = Query { unQuery :: Text } deriving (P.Eq, P.Show)

-- ** ReduceOils
newtype ReduceOils = ReduceOils { unReduceOils :: Bool } deriving (P.Eq, P.Show)

-- ** Servings
newtype Servings = Servings { unServings :: Int } deriving (P.Eq, P.Show)

-- ** Sort
newtype Sort = Sort { unSort :: Text } deriving (P.Eq, P.Show)

-- ** SortDirection
newtype SortDirection = SortDirection { unSortDirection :: Text } deriving (P.Eq, P.Show)

-- ** SourceAmount
newtype SourceAmount = SourceAmount { unSourceAmount :: Double } deriving (P.Eq, P.Show)

-- ** SourceCountries
newtype SourceCountries = SourceCountries { unSourceCountries :: Text } deriving (P.Eq, P.Show)

-- ** SourceCountry
newtype SourceCountry = SourceCountry { unSourceCountry :: Text } deriving (P.Eq, P.Show)

-- ** SourceUnit
newtype SourceUnit = SourceUnit { unSourceUnit :: Text } deriving (P.Eq, P.Show)

-- ** TargetUnit
newtype TargetUnit = TargetUnit { unTargetUnit :: Text } deriving (P.Eq, P.Show)

-- ** Title
newtype Title = Title { unTitle :: Text } deriving (P.Eq, P.Show)

-- ** Url
newtype Url = Url { unUrl :: Text } deriving (P.Eq, P.Show)

-- ** Value
newtype Value = Value { unValue :: Text } deriving (P.Eq, P.Show)

-- ** Width
newtype Width = Width { unWidth :: Int } deriving (P.Eq, P.Show)

-- ** Word
newtype Word = Word { unWord :: Text } deriving (P.Eq, P.Show)

-- * Models


-- ** ComputeNutritionAPI200Response
-- | ComputeNutritionAPI200Response
data ComputeNutritionAPI200Response = ComputeNutritionAPI200Response
  { computeNutritionAPI200ResponseNutrients :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner]) -- ^ "nutrients"
  , computeNutritionAPI200ResponseProperties :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner]) -- ^ "properties"
  , computeNutritionAPI200ResponseFlavonoids :: !(Maybe [SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner]) -- ^ "flavonoids"
  , computeNutritionAPI200ResponseIngredientBreakdown :: !(Maybe [ComputeNutritionAPI200ResponseIngredientBreakdownInner]) -- ^ "ingredient_breakdown"
  , computeNutritionAPI200ResponseCaloricBreakdown :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown) -- ^ "caloric_breakdown"
  , computeNutritionAPI200ResponseWeightPerServing :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing) -- ^ "weight_per_serving"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ComputeNutritionAPI200Response
instance A.FromJSON ComputeNutritionAPI200Response where
  parseJSON = A.withObject "ComputeNutritionAPI200Response" $ \o ->
    ComputeNutritionAPI200Response
      <$> (o .:? "nutrients")
      <*> (o .:? "properties")
      <*> (o .:? "flavonoids")
      <*> (o .:? "ingredient_breakdown")
      <*> (o .:? "caloric_breakdown")
      <*> (o .:? "weight_per_serving")

-- | ToJSON ComputeNutritionAPI200Response
instance A.ToJSON ComputeNutritionAPI200Response where
  toJSON ComputeNutritionAPI200Response {..} =
   _omitNulls
      [ "nutrients" .= computeNutritionAPI200ResponseNutrients
      , "properties" .= computeNutritionAPI200ResponseProperties
      , "flavonoids" .= computeNutritionAPI200ResponseFlavonoids
      , "ingredient_breakdown" .= computeNutritionAPI200ResponseIngredientBreakdown
      , "caloric_breakdown" .= computeNutritionAPI200ResponseCaloricBreakdown
      , "weight_per_serving" .= computeNutritionAPI200ResponseWeightPerServing
      ]


-- | Construct a value of type 'ComputeNutritionAPI200Response' (by applying it's required fields, if any)
mkComputeNutritionAPI200Response
  :: ComputeNutritionAPI200Response
mkComputeNutritionAPI200Response =
  ComputeNutritionAPI200Response
  { computeNutritionAPI200ResponseNutrients = Nothing
  , computeNutritionAPI200ResponseProperties = Nothing
  , computeNutritionAPI200ResponseFlavonoids = Nothing
  , computeNutritionAPI200ResponseIngredientBreakdown = Nothing
  , computeNutritionAPI200ResponseCaloricBreakdown = Nothing
  , computeNutritionAPI200ResponseWeightPerServing = Nothing
  }

-- ** ComputeNutritionAPI200ResponseIngredientBreakdownInner
-- | ComputeNutritionAPI200ResponseIngredientBreakdownInner
data ComputeNutritionAPI200ResponseIngredientBreakdownInner = ComputeNutritionAPI200ResponseIngredientBreakdownInner
  { computeNutritionAPI200ResponseIngredientBreakdownInnerName :: !(Maybe Text) -- ^ "name"
  , computeNutritionAPI200ResponseIngredientBreakdownInnerAmount :: !(Maybe Int) -- ^ "amount"
  , computeNutritionAPI200ResponseIngredientBreakdownInnerUnit :: !(Maybe Text) -- ^ "unit"
  , computeNutritionAPI200ResponseIngredientBreakdownInnerId :: !(Maybe Int) -- ^ "id"
  , computeNutritionAPI200ResponseIngredientBreakdownInnerNutrients :: !(Maybe [ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner]) -- ^ "nutrients"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ComputeNutritionAPI200ResponseIngredientBreakdownInner
instance A.FromJSON ComputeNutritionAPI200ResponseIngredientBreakdownInner where
  parseJSON = A.withObject "ComputeNutritionAPI200ResponseIngredientBreakdownInner" $ \o ->
    ComputeNutritionAPI200ResponseIngredientBreakdownInner
      <$> (o .:? "name")
      <*> (o .:? "amount")
      <*> (o .:? "unit")
      <*> (o .:? "id")
      <*> (o .:? "nutrients")

-- | ToJSON ComputeNutritionAPI200ResponseIngredientBreakdownInner
instance A.ToJSON ComputeNutritionAPI200ResponseIngredientBreakdownInner where
  toJSON ComputeNutritionAPI200ResponseIngredientBreakdownInner {..} =
   _omitNulls
      [ "name" .= computeNutritionAPI200ResponseIngredientBreakdownInnerName
      , "amount" .= computeNutritionAPI200ResponseIngredientBreakdownInnerAmount
      , "unit" .= computeNutritionAPI200ResponseIngredientBreakdownInnerUnit
      , "id" .= computeNutritionAPI200ResponseIngredientBreakdownInnerId
      , "nutrients" .= computeNutritionAPI200ResponseIngredientBreakdownInnerNutrients
      ]


-- | Construct a value of type 'ComputeNutritionAPI200ResponseIngredientBreakdownInner' (by applying it's required fields, if any)
mkComputeNutritionAPI200ResponseIngredientBreakdownInner
  :: ComputeNutritionAPI200ResponseIngredientBreakdownInner
mkComputeNutritionAPI200ResponseIngredientBreakdownInner =
  ComputeNutritionAPI200ResponseIngredientBreakdownInner
  { computeNutritionAPI200ResponseIngredientBreakdownInnerName = Nothing
  , computeNutritionAPI200ResponseIngredientBreakdownInnerAmount = Nothing
  , computeNutritionAPI200ResponseIngredientBreakdownInnerUnit = Nothing
  , computeNutritionAPI200ResponseIngredientBreakdownInnerId = Nothing
  , computeNutritionAPI200ResponseIngredientBreakdownInnerNutrients = Nothing
  }

-- ** ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
-- | ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
data ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner = ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
  { computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerName :: !(Maybe Text) -- ^ "name"
  , computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerPercentOfDailyNeeds :: !(Maybe Int) -- ^ "percent_of_daily_needs"
  , computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerAmount :: !(Maybe Int) -- ^ "amount"
  , computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerUnit :: !(Maybe Text) -- ^ "unit"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
instance A.FromJSON ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner where
  parseJSON = A.withObject "ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner" $ \o ->
    ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
      <$> (o .:? "name")
      <*> (o .:? "percent_of_daily_needs")
      <*> (o .:? "amount")
      <*> (o .:? "unit")

-- | ToJSON ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
instance A.ToJSON ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner where
  toJSON ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner {..} =
   _omitNulls
      [ "name" .= computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerName
      , "percent_of_daily_needs" .= computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerPercentOfDailyNeeds
      , "amount" .= computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerAmount
      , "unit" .= computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerUnit
      ]


-- | Construct a value of type 'ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner' (by applying it's required fields, if any)
mkComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
  :: ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
mkComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner =
  ComputeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInner
  { computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerName = Nothing
  , computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerPercentOfDailyNeeds = Nothing
  , computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerAmount = Nothing
  , computeNutritionAPI200ResponseIngredientBreakdownInnerNutrientsInnerUnit = Nothing
  }

-- ** ConvertUnitsAPI200Response
-- | ConvertUnitsAPI200Response
data ConvertUnitsAPI200Response = ConvertUnitsAPI200Response
  { convertUnitsAPI200ResponseTargetAmount :: !(Maybe Double) -- ^ "target_amount"
  , convertUnitsAPI200ResponseTargetUnit :: !(Maybe Text) -- ^ "target_unit"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ConvertUnitsAPI200Response
instance A.FromJSON ConvertUnitsAPI200Response where
  parseJSON = A.withObject "ConvertUnitsAPI200Response" $ \o ->
    ConvertUnitsAPI200Response
      <$> (o .:? "target_amount")
      <*> (o .:? "target_unit")

-- | ToJSON ConvertUnitsAPI200Response
instance A.ToJSON ConvertUnitsAPI200Response where
  toJSON ConvertUnitsAPI200Response {..} =
   _omitNulls
      [ "target_amount" .= convertUnitsAPI200ResponseTargetAmount
      , "target_unit" .= convertUnitsAPI200ResponseTargetUnit
      ]


-- | Construct a value of type 'ConvertUnitsAPI200Response' (by applying it's required fields, if any)
mkConvertUnitsAPI200Response
  :: ConvertUnitsAPI200Response
mkConvertUnitsAPI200Response =
  ConvertUnitsAPI200Response
  { convertUnitsAPI200ResponseTargetAmount = Nothing
  , convertUnitsAPI200ResponseTargetUnit = Nothing
  }

-- ** CorrectSpellingAPI200Response
-- | CorrectSpellingAPI200Response
data CorrectSpellingAPI200Response = CorrectSpellingAPI200Response
  { correctSpellingAPI200ResponseCorrectedText :: !(Maybe Text) -- ^ "corrected_text"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON CorrectSpellingAPI200Response
instance A.FromJSON CorrectSpellingAPI200Response where
  parseJSON = A.withObject "CorrectSpellingAPI200Response" $ \o ->
    CorrectSpellingAPI200Response
      <$> (o .:? "corrected_text")

-- | ToJSON CorrectSpellingAPI200Response
instance A.ToJSON CorrectSpellingAPI200Response where
  toJSON CorrectSpellingAPI200Response {..} =
   _omitNulls
      [ "corrected_text" .= correctSpellingAPI200ResponseCorrectedText
      ]


-- | Construct a value of type 'CorrectSpellingAPI200Response' (by applying it's required fields, if any)
mkCorrectSpellingAPI200Response
  :: CorrectSpellingAPI200Response
mkCorrectSpellingAPI200Response =
  CorrectSpellingAPI200Response
  { correctSpellingAPI200ResponseCorrectedText = Nothing
  }

-- ** DetectGenderByNameAPI200Response
-- | DetectGenderByNameAPI200Response
data DetectGenderByNameAPI200Response = DetectGenderByNameAPI200Response
  { detectGenderByNameAPI200ResponseName :: !(Maybe Text) -- ^ "name"
  , detectGenderByNameAPI200ResponseProbabilityMale :: !(Maybe Double) -- ^ "probability_male"
  , detectGenderByNameAPI200ResponseProbabilityFemale :: !(Maybe Double) -- ^ "probability_female"
  , detectGenderByNameAPI200ResponsePopularity :: !(Maybe Double) -- ^ "popularity"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON DetectGenderByNameAPI200Response
instance A.FromJSON DetectGenderByNameAPI200Response where
  parseJSON = A.withObject "DetectGenderByNameAPI200Response" $ \o ->
    DetectGenderByNameAPI200Response
      <$> (o .:? "name")
      <*> (o .:? "probability_male")
      <*> (o .:? "probability_female")
      <*> (o .:? "popularity")

-- | ToJSON DetectGenderByNameAPI200Response
instance A.ToJSON DetectGenderByNameAPI200Response where
  toJSON DetectGenderByNameAPI200Response {..} =
   _omitNulls
      [ "name" .= detectGenderByNameAPI200ResponseName
      , "probability_male" .= detectGenderByNameAPI200ResponseProbabilityMale
      , "probability_female" .= detectGenderByNameAPI200ResponseProbabilityFemale
      , "popularity" .= detectGenderByNameAPI200ResponsePopularity
      ]


-- | Construct a value of type 'DetectGenderByNameAPI200Response' (by applying it's required fields, if any)
mkDetectGenderByNameAPI200Response
  :: DetectGenderByNameAPI200Response
mkDetectGenderByNameAPI200Response =
  DetectGenderByNameAPI200Response
  { detectGenderByNameAPI200ResponseName = Nothing
  , detectGenderByNameAPI200ResponseProbabilityMale = Nothing
  , detectGenderByNameAPI200ResponseProbabilityFemale = Nothing
  , detectGenderByNameAPI200ResponsePopularity = Nothing
  }

-- ** DetectLanguageAPI200ResponseInner
-- | DetectLanguageAPI200ResponseInner
data DetectLanguageAPI200ResponseInner = DetectLanguageAPI200ResponseInner
  { detectLanguageAPI200ResponseInnerLanguage :: !(Maybe Text) -- ^ "language"
  , detectLanguageAPI200ResponseInnerConfidence :: !(Maybe Double) -- ^ "confidence"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON DetectLanguageAPI200ResponseInner
instance A.FromJSON DetectLanguageAPI200ResponseInner where
  parseJSON = A.withObject "DetectLanguageAPI200ResponseInner" $ \o ->
    DetectLanguageAPI200ResponseInner
      <$> (o .:? "language")
      <*> (o .:? "confidence")

-- | ToJSON DetectLanguageAPI200ResponseInner
instance A.ToJSON DetectLanguageAPI200ResponseInner where
  toJSON DetectLanguageAPI200ResponseInner {..} =
   _omitNulls
      [ "language" .= detectLanguageAPI200ResponseInnerLanguage
      , "confidence" .= detectLanguageAPI200ResponseInnerConfidence
      ]


-- | Construct a value of type 'DetectLanguageAPI200ResponseInner' (by applying it's required fields, if any)
mkDetectLanguageAPI200ResponseInner
  :: DetectLanguageAPI200ResponseInner
mkDetectLanguageAPI200ResponseInner =
  DetectLanguageAPI200ResponseInner
  { detectLanguageAPI200ResponseInnerLanguage = Nothing
  , detectLanguageAPI200ResponseInnerConfidence = Nothing
  }

-- ** DetectMainImageColorAPI200ResponseInner
-- | DetectMainImageColorAPI200ResponseInner
data DetectMainImageColorAPI200ResponseInner = DetectMainImageColorAPI200ResponseInner
  { detectMainImageColorAPI200ResponseInnerSpecificColor :: !(Maybe Text) -- ^ "specific_color"
  , detectMainImageColorAPI200ResponseInnerMainColor :: !(Maybe Text) -- ^ "main_color"
  , detectMainImageColorAPI200ResponseInnerHexCode :: !(Maybe Text) -- ^ "hex_code"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON DetectMainImageColorAPI200ResponseInner
instance A.FromJSON DetectMainImageColorAPI200ResponseInner where
  parseJSON = A.withObject "DetectMainImageColorAPI200ResponseInner" $ \o ->
    DetectMainImageColorAPI200ResponseInner
      <$> (o .:? "specific_color")
      <*> (o .:? "main_color")
      <*> (o .:? "hex_code")

-- | ToJSON DetectMainImageColorAPI200ResponseInner
instance A.ToJSON DetectMainImageColorAPI200ResponseInner where
  toJSON DetectMainImageColorAPI200ResponseInner {..} =
   _omitNulls
      [ "specific_color" .= detectMainImageColorAPI200ResponseInnerSpecificColor
      , "main_color" .= detectMainImageColorAPI200ResponseInnerMainColor
      , "hex_code" .= detectMainImageColorAPI200ResponseInnerHexCode
      ]


-- | Construct a value of type 'DetectMainImageColorAPI200ResponseInner' (by applying it's required fields, if any)
mkDetectMainImageColorAPI200ResponseInner
  :: DetectMainImageColorAPI200ResponseInner
mkDetectMainImageColorAPI200ResponseInner =
  DetectMainImageColorAPI200ResponseInner
  { detectMainImageColorAPI200ResponseInnerSpecificColor = Nothing
  , detectMainImageColorAPI200ResponseInnerMainColor = Nothing
  , detectMainImageColorAPI200ResponseInnerHexCode = Nothing
  }

-- ** DetectSentimentAPI200Response
-- | DetectSentimentAPI200Response
data DetectSentimentAPI200Response = DetectSentimentAPI200Response
  { detectSentimentAPI200ResponseDocument :: !(Maybe DetectSentimentAPI200ResponseDocument) -- ^ "document"
  , detectSentimentAPI200ResponseSentences :: !(Maybe [DetectSentimentAPI200ResponseSentencesInner]) -- ^ "sentences"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON DetectSentimentAPI200Response
instance A.FromJSON DetectSentimentAPI200Response where
  parseJSON = A.withObject "DetectSentimentAPI200Response" $ \o ->
    DetectSentimentAPI200Response
      <$> (o .:? "document")
      <*> (o .:? "sentences")

-- | ToJSON DetectSentimentAPI200Response
instance A.ToJSON DetectSentimentAPI200Response where
  toJSON DetectSentimentAPI200Response {..} =
   _omitNulls
      [ "document" .= detectSentimentAPI200ResponseDocument
      , "sentences" .= detectSentimentAPI200ResponseSentences
      ]


-- | Construct a value of type 'DetectSentimentAPI200Response' (by applying it's required fields, if any)
mkDetectSentimentAPI200Response
  :: DetectSentimentAPI200Response
mkDetectSentimentAPI200Response =
  DetectSentimentAPI200Response
  { detectSentimentAPI200ResponseDocument = Nothing
  , detectSentimentAPI200ResponseSentences = Nothing
  }

-- ** DetectSentimentAPI200ResponseDocument
-- | DetectSentimentAPI200ResponseDocument
data DetectSentimentAPI200ResponseDocument = DetectSentimentAPI200ResponseDocument
  { detectSentimentAPI200ResponseDocumentSentiment :: !(Maybe Text) -- ^ "sentiment"
  , detectSentimentAPI200ResponseDocumentConfidence :: !(Maybe Int) -- ^ "confidence"
  , detectSentimentAPI200ResponseDocumentAverageConfidence :: !(Maybe Int) -- ^ "average_confidence"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON DetectSentimentAPI200ResponseDocument
instance A.FromJSON DetectSentimentAPI200ResponseDocument where
  parseJSON = A.withObject "DetectSentimentAPI200ResponseDocument" $ \o ->
    DetectSentimentAPI200ResponseDocument
      <$> (o .:? "sentiment")
      <*> (o .:? "confidence")
      <*> (o .:? "average_confidence")

-- | ToJSON DetectSentimentAPI200ResponseDocument
instance A.ToJSON DetectSentimentAPI200ResponseDocument where
  toJSON DetectSentimentAPI200ResponseDocument {..} =
   _omitNulls
      [ "sentiment" .= detectSentimentAPI200ResponseDocumentSentiment
      , "confidence" .= detectSentimentAPI200ResponseDocumentConfidence
      , "average_confidence" .= detectSentimentAPI200ResponseDocumentAverageConfidence
      ]


-- | Construct a value of type 'DetectSentimentAPI200ResponseDocument' (by applying it's required fields, if any)
mkDetectSentimentAPI200ResponseDocument
  :: DetectSentimentAPI200ResponseDocument
mkDetectSentimentAPI200ResponseDocument =
  DetectSentimentAPI200ResponseDocument
  { detectSentimentAPI200ResponseDocumentSentiment = Nothing
  , detectSentimentAPI200ResponseDocumentConfidence = Nothing
  , detectSentimentAPI200ResponseDocumentAverageConfidence = Nothing
  }

-- ** DetectSentimentAPI200ResponseSentencesInner
-- | DetectSentimentAPI200ResponseSentencesInner
data DetectSentimentAPI200ResponseSentencesInner = DetectSentimentAPI200ResponseSentencesInner
  { detectSentimentAPI200ResponseSentencesInnerLength :: !(Maybe Int) -- ^ "length"
  , detectSentimentAPI200ResponseSentencesInnerSentiment :: !(Maybe Text) -- ^ "sentiment"
  , detectSentimentAPI200ResponseSentencesInnerOffset :: !(Maybe Int) -- ^ "offset"
  , detectSentimentAPI200ResponseSentencesInnerConfidence :: !(Maybe Int) -- ^ "confidence"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON DetectSentimentAPI200ResponseSentencesInner
instance A.FromJSON DetectSentimentAPI200ResponseSentencesInner where
  parseJSON = A.withObject "DetectSentimentAPI200ResponseSentencesInner" $ \o ->
    DetectSentimentAPI200ResponseSentencesInner
      <$> (o .:? "length")
      <*> (o .:? "sentiment")
      <*> (o .:? "offset")
      <*> (o .:? "confidence")

-- | ToJSON DetectSentimentAPI200ResponseSentencesInner
instance A.ToJSON DetectSentimentAPI200ResponseSentencesInner where
  toJSON DetectSentimentAPI200ResponseSentencesInner {..} =
   _omitNulls
      [ "length" .= detectSentimentAPI200ResponseSentencesInnerLength
      , "sentiment" .= detectSentimentAPI200ResponseSentencesInnerSentiment
      , "offset" .= detectSentimentAPI200ResponseSentencesInnerOffset
      , "confidence" .= detectSentimentAPI200ResponseSentencesInnerConfidence
      ]


-- | Construct a value of type 'DetectSentimentAPI200ResponseSentencesInner' (by applying it's required fields, if any)
mkDetectSentimentAPI200ResponseSentencesInner
  :: DetectSentimentAPI200ResponseSentencesInner
mkDetectSentimentAPI200ResponseSentencesInner =
  DetectSentimentAPI200ResponseSentencesInner
  { detectSentimentAPI200ResponseSentencesInnerLength = Nothing
  , detectSentimentAPI200ResponseSentencesInnerSentiment = Nothing
  , detectSentimentAPI200ResponseSentencesInnerOffset = Nothing
  , detectSentimentAPI200ResponseSentencesInnerConfidence = Nothing
  }

-- ** ExtractAuthorsAPI200Response
-- | ExtractAuthorsAPI200Response
data ExtractAuthorsAPI200Response = ExtractAuthorsAPI200Response
  { extractAuthorsAPI200ResponseAuthors :: !(Maybe [ExtractAuthorsAPI200ResponseAuthorsInner]) -- ^ "authors"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractAuthorsAPI200Response
instance A.FromJSON ExtractAuthorsAPI200Response where
  parseJSON = A.withObject "ExtractAuthorsAPI200Response" $ \o ->
    ExtractAuthorsAPI200Response
      <$> (o .:? "authors")

-- | ToJSON ExtractAuthorsAPI200Response
instance A.ToJSON ExtractAuthorsAPI200Response where
  toJSON ExtractAuthorsAPI200Response {..} =
   _omitNulls
      [ "authors" .= extractAuthorsAPI200ResponseAuthors
      ]


-- | Construct a value of type 'ExtractAuthorsAPI200Response' (by applying it's required fields, if any)
mkExtractAuthorsAPI200Response
  :: ExtractAuthorsAPI200Response
mkExtractAuthorsAPI200Response =
  ExtractAuthorsAPI200Response
  { extractAuthorsAPI200ResponseAuthors = Nothing
  }

-- ** ExtractAuthorsAPI200ResponseAuthorsInner
-- | ExtractAuthorsAPI200ResponseAuthorsInner
data ExtractAuthorsAPI200ResponseAuthorsInner = ExtractAuthorsAPI200ResponseAuthorsInner
  { extractAuthorsAPI200ResponseAuthorsInnerLink :: !(Maybe Text) -- ^ "link"
  , extractAuthorsAPI200ResponseAuthorsInnerName :: !(Maybe Text) -- ^ "name"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractAuthorsAPI200ResponseAuthorsInner
instance A.FromJSON ExtractAuthorsAPI200ResponseAuthorsInner where
  parseJSON = A.withObject "ExtractAuthorsAPI200ResponseAuthorsInner" $ \o ->
    ExtractAuthorsAPI200ResponseAuthorsInner
      <$> (o .:? "link")
      <*> (o .:? "name")

-- | ToJSON ExtractAuthorsAPI200ResponseAuthorsInner
instance A.ToJSON ExtractAuthorsAPI200ResponseAuthorsInner where
  toJSON ExtractAuthorsAPI200ResponseAuthorsInner {..} =
   _omitNulls
      [ "link" .= extractAuthorsAPI200ResponseAuthorsInnerLink
      , "name" .= extractAuthorsAPI200ResponseAuthorsInnerName
      ]


-- | Construct a value of type 'ExtractAuthorsAPI200ResponseAuthorsInner' (by applying it's required fields, if any)
mkExtractAuthorsAPI200ResponseAuthorsInner
  :: ExtractAuthorsAPI200ResponseAuthorsInner
mkExtractAuthorsAPI200ResponseAuthorsInner =
  ExtractAuthorsAPI200ResponseAuthorsInner
  { extractAuthorsAPI200ResponseAuthorsInnerLink = Nothing
  , extractAuthorsAPI200ResponseAuthorsInnerName = Nothing
  }

-- ** ExtractContentFromAWebPageAPI200Response
-- | ExtractContentFromAWebPageAPI200Response
data ExtractContentFromAWebPageAPI200Response = ExtractContentFromAWebPageAPI200Response
  { extractContentFromAWebPageAPI200ResponseTitle :: !(Maybe Text) -- ^ "title"
  , extractContentFromAWebPageAPI200ResponseMainText :: !(Maybe Text) -- ^ "main_text"
  , extractContentFromAWebPageAPI200ResponseMainHtml :: !(Maybe Text) -- ^ "main_html"
  , extractContentFromAWebPageAPI200ResponseImages :: !(Maybe [Text]) -- ^ "images"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractContentFromAWebPageAPI200Response
instance A.FromJSON ExtractContentFromAWebPageAPI200Response where
  parseJSON = A.withObject "ExtractContentFromAWebPageAPI200Response" $ \o ->
    ExtractContentFromAWebPageAPI200Response
      <$> (o .:? "title")
      <*> (o .:? "main_text")
      <*> (o .:? "main_html")
      <*> (o .:? "images")

-- | ToJSON ExtractContentFromAWebPageAPI200Response
instance A.ToJSON ExtractContentFromAWebPageAPI200Response where
  toJSON ExtractContentFromAWebPageAPI200Response {..} =
   _omitNulls
      [ "title" .= extractContentFromAWebPageAPI200ResponseTitle
      , "main_text" .= extractContentFromAWebPageAPI200ResponseMainText
      , "main_html" .= extractContentFromAWebPageAPI200ResponseMainHtml
      , "images" .= extractContentFromAWebPageAPI200ResponseImages
      ]


-- | Construct a value of type 'ExtractContentFromAWebPageAPI200Response' (by applying it's required fields, if any)
mkExtractContentFromAWebPageAPI200Response
  :: ExtractContentFromAWebPageAPI200Response
mkExtractContentFromAWebPageAPI200Response =
  ExtractContentFromAWebPageAPI200Response
  { extractContentFromAWebPageAPI200ResponseTitle = Nothing
  , extractContentFromAWebPageAPI200ResponseMainText = Nothing
  , extractContentFromAWebPageAPI200ResponseMainHtml = Nothing
  , extractContentFromAWebPageAPI200ResponseImages = Nothing
  }

-- ** ExtractDatesAPI200Response
-- | ExtractDatesAPI200Response
data ExtractDatesAPI200Response = ExtractDatesAPI200Response
  { extractDatesAPI200ResponseDates :: !(Maybe [ExtractDatesAPI200ResponseDatesInner]) -- ^ "dates"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractDatesAPI200Response
instance A.FromJSON ExtractDatesAPI200Response where
  parseJSON = A.withObject "ExtractDatesAPI200Response" $ \o ->
    ExtractDatesAPI200Response
      <$> (o .:? "dates")

-- | ToJSON ExtractDatesAPI200Response
instance A.ToJSON ExtractDatesAPI200Response where
  toJSON ExtractDatesAPI200Response {..} =
   _omitNulls
      [ "dates" .= extractDatesAPI200ResponseDates
      ]


-- | Construct a value of type 'ExtractDatesAPI200Response' (by applying it's required fields, if any)
mkExtractDatesAPI200Response
  :: ExtractDatesAPI200Response
mkExtractDatesAPI200Response =
  ExtractDatesAPI200Response
  { extractDatesAPI200ResponseDates = Nothing
  }

-- ** ExtractDatesAPI200ResponseDatesInner
-- | ExtractDatesAPI200ResponseDatesInner
data ExtractDatesAPI200ResponseDatesInner = ExtractDatesAPI200ResponseDatesInner
  { extractDatesAPI200ResponseDatesInnerStartPosition :: !(Maybe Int) -- ^ "start_position"
  , extractDatesAPI200ResponseDatesInnerDate :: !(Maybe Text) -- ^ "date"
  , extractDatesAPI200ResponseDatesInnerNormalizedDate :: !(Maybe Double) -- ^ "normalized_date"
  , extractDatesAPI200ResponseDatesInnerTag :: !(Maybe Text) -- ^ "tag"
  , extractDatesAPI200ResponseDatesInnerEndPosition :: !(Maybe Int) -- ^ "end_position"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractDatesAPI200ResponseDatesInner
instance A.FromJSON ExtractDatesAPI200ResponseDatesInner where
  parseJSON = A.withObject "ExtractDatesAPI200ResponseDatesInner" $ \o ->
    ExtractDatesAPI200ResponseDatesInner
      <$> (o .:? "start_position")
      <*> (o .:? "date")
      <*> (o .:? "normalized_date")
      <*> (o .:? "tag")
      <*> (o .:? "end_position")

-- | ToJSON ExtractDatesAPI200ResponseDatesInner
instance A.ToJSON ExtractDatesAPI200ResponseDatesInner where
  toJSON ExtractDatesAPI200ResponseDatesInner {..} =
   _omitNulls
      [ "start_position" .= extractDatesAPI200ResponseDatesInnerStartPosition
      , "date" .= extractDatesAPI200ResponseDatesInnerDate
      , "normalized_date" .= extractDatesAPI200ResponseDatesInnerNormalizedDate
      , "tag" .= extractDatesAPI200ResponseDatesInnerTag
      , "end_position" .= extractDatesAPI200ResponseDatesInnerEndPosition
      ]


-- | Construct a value of type 'ExtractDatesAPI200ResponseDatesInner' (by applying it's required fields, if any)
mkExtractDatesAPI200ResponseDatesInner
  :: ExtractDatesAPI200ResponseDatesInner
mkExtractDatesAPI200ResponseDatesInner =
  ExtractDatesAPI200ResponseDatesInner
  { extractDatesAPI200ResponseDatesInnerStartPosition = Nothing
  , extractDatesAPI200ResponseDatesInnerDate = Nothing
  , extractDatesAPI200ResponseDatesInnerNormalizedDate = Nothing
  , extractDatesAPI200ResponseDatesInnerTag = Nothing
  , extractDatesAPI200ResponseDatesInnerEndPosition = Nothing
  }

-- ** ExtractEntitiesAPI200Response
-- | ExtractEntitiesAPI200Response
data ExtractEntitiesAPI200Response = ExtractEntitiesAPI200Response
  { extractEntitiesAPI200ResponseEntities :: !(Maybe [ExtractEntitiesAPI200ResponseEntitiesInner]) -- ^ "entities"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractEntitiesAPI200Response
instance A.FromJSON ExtractEntitiesAPI200Response where
  parseJSON = A.withObject "ExtractEntitiesAPI200Response" $ \o ->
    ExtractEntitiesAPI200Response
      <$> (o .:? "entities")

-- | ToJSON ExtractEntitiesAPI200Response
instance A.ToJSON ExtractEntitiesAPI200Response where
  toJSON ExtractEntitiesAPI200Response {..} =
   _omitNulls
      [ "entities" .= extractEntitiesAPI200ResponseEntities
      ]


-- | Construct a value of type 'ExtractEntitiesAPI200Response' (by applying it's required fields, if any)
mkExtractEntitiesAPI200Response
  :: ExtractEntitiesAPI200Response
mkExtractEntitiesAPI200Response =
  ExtractEntitiesAPI200Response
  { extractEntitiesAPI200ResponseEntities = Nothing
  }

-- ** ExtractEntitiesAPI200ResponseEntitiesInner
-- | ExtractEntitiesAPI200ResponseEntitiesInner
data ExtractEntitiesAPI200ResponseEntitiesInner = ExtractEntitiesAPI200ResponseEntitiesInner
  { extractEntitiesAPI200ResponseEntitiesInnerStartPosition :: !(Maybe Int) -- ^ "start_position"
  , extractEntitiesAPI200ResponseEntitiesInnerImage :: !(Maybe Text) -- ^ "image"
  , extractEntitiesAPI200ResponseEntitiesInnerType :: !(Maybe Text) -- ^ "type"
  , extractEntitiesAPI200ResponseEntitiesInnerValue :: !(Maybe Text) -- ^ "value"
  , extractEntitiesAPI200ResponseEntitiesInnerEndPosition :: !(Maybe Int) -- ^ "end_position"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractEntitiesAPI200ResponseEntitiesInner
instance A.FromJSON ExtractEntitiesAPI200ResponseEntitiesInner where
  parseJSON = A.withObject "ExtractEntitiesAPI200ResponseEntitiesInner" $ \o ->
    ExtractEntitiesAPI200ResponseEntitiesInner
      <$> (o .:? "start_position")
      <*> (o .:? "image")
      <*> (o .:? "type")
      <*> (o .:? "value")
      <*> (o .:? "end_position")

-- | ToJSON ExtractEntitiesAPI200ResponseEntitiesInner
instance A.ToJSON ExtractEntitiesAPI200ResponseEntitiesInner where
  toJSON ExtractEntitiesAPI200ResponseEntitiesInner {..} =
   _omitNulls
      [ "start_position" .= extractEntitiesAPI200ResponseEntitiesInnerStartPosition
      , "image" .= extractEntitiesAPI200ResponseEntitiesInnerImage
      , "type" .= extractEntitiesAPI200ResponseEntitiesInnerType
      , "value" .= extractEntitiesAPI200ResponseEntitiesInnerValue
      , "end_position" .= extractEntitiesAPI200ResponseEntitiesInnerEndPosition
      ]


-- | Construct a value of type 'ExtractEntitiesAPI200ResponseEntitiesInner' (by applying it's required fields, if any)
mkExtractEntitiesAPI200ResponseEntitiesInner
  :: ExtractEntitiesAPI200ResponseEntitiesInner
mkExtractEntitiesAPI200ResponseEntitiesInner =
  ExtractEntitiesAPI200ResponseEntitiesInner
  { extractEntitiesAPI200ResponseEntitiesInnerStartPosition = Nothing
  , extractEntitiesAPI200ResponseEntitiesInnerImage = Nothing
  , extractEntitiesAPI200ResponseEntitiesInnerType = Nothing
  , extractEntitiesAPI200ResponseEntitiesInnerValue = Nothing
  , extractEntitiesAPI200ResponseEntitiesInnerEndPosition = Nothing
  }

-- ** ExtractNewsAPI200Response
-- | ExtractNewsAPI200Response
data ExtractNewsAPI200Response = ExtractNewsAPI200Response
  { extractNewsAPI200ResponseTitle :: !(Maybe Text) -- ^ "title"
  , extractNewsAPI200ResponseText :: !(Maybe Text) -- ^ "text"
  , extractNewsAPI200ResponseUrl :: !(Maybe Text) -- ^ "url"
  , extractNewsAPI200ResponseImages :: !(Maybe [ExtractNewsAPI200ResponseImagesInner]) -- ^ "images"
  , extractNewsAPI200ResponseVideos :: !(Maybe [ExtractNewsAPI200ResponseVideosInner]) -- ^ "videos"
  , extractNewsAPI200ResponsePublishDate :: !(Maybe Text) -- ^ "publish_date"
  , extractNewsAPI200ResponseAuthors :: !(Maybe [Text]) -- ^ "authors"
  , extractNewsAPI200ResponseLanguage :: !(Maybe Text) -- ^ "language"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractNewsAPI200Response
instance A.FromJSON ExtractNewsAPI200Response where
  parseJSON = A.withObject "ExtractNewsAPI200Response" $ \o ->
    ExtractNewsAPI200Response
      <$> (o .:? "title")
      <*> (o .:? "text")
      <*> (o .:? "url")
      <*> (o .:? "images")
      <*> (o .:? "videos")
      <*> (o .:? "publish_date")
      <*> (o .:? "authors")
      <*> (o .:? "language")

-- | ToJSON ExtractNewsAPI200Response
instance A.ToJSON ExtractNewsAPI200Response where
  toJSON ExtractNewsAPI200Response {..} =
   _omitNulls
      [ "title" .= extractNewsAPI200ResponseTitle
      , "text" .= extractNewsAPI200ResponseText
      , "url" .= extractNewsAPI200ResponseUrl
      , "images" .= extractNewsAPI200ResponseImages
      , "videos" .= extractNewsAPI200ResponseVideos
      , "publish_date" .= extractNewsAPI200ResponsePublishDate
      , "authors" .= extractNewsAPI200ResponseAuthors
      , "language" .= extractNewsAPI200ResponseLanguage
      ]


-- | Construct a value of type 'ExtractNewsAPI200Response' (by applying it's required fields, if any)
mkExtractNewsAPI200Response
  :: ExtractNewsAPI200Response
mkExtractNewsAPI200Response =
  ExtractNewsAPI200Response
  { extractNewsAPI200ResponseTitle = Nothing
  , extractNewsAPI200ResponseText = Nothing
  , extractNewsAPI200ResponseUrl = Nothing
  , extractNewsAPI200ResponseImages = Nothing
  , extractNewsAPI200ResponseVideos = Nothing
  , extractNewsAPI200ResponsePublishDate = Nothing
  , extractNewsAPI200ResponseAuthors = Nothing
  , extractNewsAPI200ResponseLanguage = Nothing
  }

-- ** ExtractNewsAPI200ResponseImagesInner
-- | ExtractNewsAPI200ResponseImagesInner
data ExtractNewsAPI200ResponseImagesInner = ExtractNewsAPI200ResponseImagesInner
  { extractNewsAPI200ResponseImagesInnerWidth :: !(Maybe Int) -- ^ "width"
  , extractNewsAPI200ResponseImagesInnerTitle :: !(Maybe Text) -- ^ "title"
  , extractNewsAPI200ResponseImagesInnerUrl :: !(Maybe Text) -- ^ "url"
  , extractNewsAPI200ResponseImagesInnerHeight :: !(Maybe Int) -- ^ "height"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractNewsAPI200ResponseImagesInner
instance A.FromJSON ExtractNewsAPI200ResponseImagesInner where
  parseJSON = A.withObject "ExtractNewsAPI200ResponseImagesInner" $ \o ->
    ExtractNewsAPI200ResponseImagesInner
      <$> (o .:? "width")
      <*> (o .:? "title")
      <*> (o .:? "url")
      <*> (o .:? "height")

-- | ToJSON ExtractNewsAPI200ResponseImagesInner
instance A.ToJSON ExtractNewsAPI200ResponseImagesInner where
  toJSON ExtractNewsAPI200ResponseImagesInner {..} =
   _omitNulls
      [ "width" .= extractNewsAPI200ResponseImagesInnerWidth
      , "title" .= extractNewsAPI200ResponseImagesInnerTitle
      , "url" .= extractNewsAPI200ResponseImagesInnerUrl
      , "height" .= extractNewsAPI200ResponseImagesInnerHeight
      ]


-- | Construct a value of type 'ExtractNewsAPI200ResponseImagesInner' (by applying it's required fields, if any)
mkExtractNewsAPI200ResponseImagesInner
  :: ExtractNewsAPI200ResponseImagesInner
mkExtractNewsAPI200ResponseImagesInner =
  ExtractNewsAPI200ResponseImagesInner
  { extractNewsAPI200ResponseImagesInnerWidth = Nothing
  , extractNewsAPI200ResponseImagesInnerTitle = Nothing
  , extractNewsAPI200ResponseImagesInnerUrl = Nothing
  , extractNewsAPI200ResponseImagesInnerHeight = Nothing
  }

-- ** ExtractNewsAPI200ResponseVideosInner
-- | ExtractNewsAPI200ResponseVideosInner
data ExtractNewsAPI200ResponseVideosInner = ExtractNewsAPI200ResponseVideosInner
  { extractNewsAPI200ResponseVideosInnerSummary :: !(Maybe Text) -- ^ "summary"
  , extractNewsAPI200ResponseVideosInnerDuration :: !(Maybe Int) -- ^ "duration"
  , extractNewsAPI200ResponseVideosInnerThumbnail :: !(Maybe Text) -- ^ "thumbnail"
  , extractNewsAPI200ResponseVideosInnerTitle :: !(Maybe Text) -- ^ "title"
  , extractNewsAPI200ResponseVideosInnerUrl :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractNewsAPI200ResponseVideosInner
instance A.FromJSON ExtractNewsAPI200ResponseVideosInner where
  parseJSON = A.withObject "ExtractNewsAPI200ResponseVideosInner" $ \o ->
    ExtractNewsAPI200ResponseVideosInner
      <$> (o .:? "summary")
      <*> (o .:? "duration")
      <*> (o .:? "thumbnail")
      <*> (o .:? "title")
      <*> (o .:? "url")

-- | ToJSON ExtractNewsAPI200ResponseVideosInner
instance A.ToJSON ExtractNewsAPI200ResponseVideosInner where
  toJSON ExtractNewsAPI200ResponseVideosInner {..} =
   _omitNulls
      [ "summary" .= extractNewsAPI200ResponseVideosInnerSummary
      , "duration" .= extractNewsAPI200ResponseVideosInnerDuration
      , "thumbnail" .= extractNewsAPI200ResponseVideosInnerThumbnail
      , "title" .= extractNewsAPI200ResponseVideosInnerTitle
      , "url" .= extractNewsAPI200ResponseVideosInnerUrl
      ]


-- | Construct a value of type 'ExtractNewsAPI200ResponseVideosInner' (by applying it's required fields, if any)
mkExtractNewsAPI200ResponseVideosInner
  :: ExtractNewsAPI200ResponseVideosInner
mkExtractNewsAPI200ResponseVideosInner =
  ExtractNewsAPI200ResponseVideosInner
  { extractNewsAPI200ResponseVideosInnerSummary = Nothing
  , extractNewsAPI200ResponseVideosInnerDuration = Nothing
  , extractNewsAPI200ResponseVideosInnerThumbnail = Nothing
  , extractNewsAPI200ResponseVideosInnerTitle = Nothing
  , extractNewsAPI200ResponseVideosInnerUrl = Nothing
  }

-- ** ExtractPublishDateAPI200Response
-- | ExtractPublishDateAPI200Response
data ExtractPublishDateAPI200Response = ExtractPublishDateAPI200Response
  { extractPublishDateAPI200ResponsePublishDate :: !(Maybe Text) -- ^ "publish_date"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ExtractPublishDateAPI200Response
instance A.FromJSON ExtractPublishDateAPI200Response where
  parseJSON = A.withObject "ExtractPublishDateAPI200Response" $ \o ->
    ExtractPublishDateAPI200Response
      <$> (o .:? "publish_date")

-- | ToJSON ExtractPublishDateAPI200Response
instance A.ToJSON ExtractPublishDateAPI200Response where
  toJSON ExtractPublishDateAPI200Response {..} =
   _omitNulls
      [ "publish_date" .= extractPublishDateAPI200ResponsePublishDate
      ]


-- | Construct a value of type 'ExtractPublishDateAPI200Response' (by applying it's required fields, if any)
mkExtractPublishDateAPI200Response
  :: ExtractPublishDateAPI200Response
mkExtractPublishDateAPI200Response =
  ExtractPublishDateAPI200Response
  { extractPublishDateAPI200ResponsePublishDate = Nothing
  }

-- ** FindSimilarBooksAPI200Response
-- | FindSimilarBooksAPI200Response
data FindSimilarBooksAPI200Response = FindSimilarBooksAPI200Response
  { findSimilarBooksAPI200ResponseSimilarBooks :: !(Maybe [SearchBooksAPI200ResponseBooksInnerInner]) -- ^ "similar_books"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON FindSimilarBooksAPI200Response
instance A.FromJSON FindSimilarBooksAPI200Response where
  parseJSON = A.withObject "FindSimilarBooksAPI200Response" $ \o ->
    FindSimilarBooksAPI200Response
      <$> (o .:? "similar_books")

-- | ToJSON FindSimilarBooksAPI200Response
instance A.ToJSON FindSimilarBooksAPI200Response where
  toJSON FindSimilarBooksAPI200Response {..} =
   _omitNulls
      [ "similar_books" .= findSimilarBooksAPI200ResponseSimilarBooks
      ]


-- | Construct a value of type 'FindSimilarBooksAPI200Response' (by applying it's required fields, if any)
mkFindSimilarBooksAPI200Response
  :: FindSimilarBooksAPI200Response
mkFindSimilarBooksAPI200Response =
  FindSimilarBooksAPI200Response
  { findSimilarBooksAPI200ResponseSimilarBooks = Nothing
  }

-- ** GenerateNonsenseWordAPI200Response
-- | GenerateNonsenseWordAPI200Response
data GenerateNonsenseWordAPI200Response = GenerateNonsenseWordAPI200Response
  { generateNonsenseWordAPI200ResponseWord :: !(Maybe Text) -- ^ "word"
  , generateNonsenseWordAPI200ResponseRating :: !(Maybe Double) -- ^ "rating"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON GenerateNonsenseWordAPI200Response
instance A.FromJSON GenerateNonsenseWordAPI200Response where
  parseJSON = A.withObject "GenerateNonsenseWordAPI200Response" $ \o ->
    GenerateNonsenseWordAPI200Response
      <$> (o .:? "word")
      <*> (o .:? "rating")

-- | ToJSON GenerateNonsenseWordAPI200Response
instance A.ToJSON GenerateNonsenseWordAPI200Response where
  toJSON GenerateNonsenseWordAPI200Response {..} =
   _omitNulls
      [ "word" .= generateNonsenseWordAPI200ResponseWord
      , "rating" .= generateNonsenseWordAPI200ResponseRating
      ]


-- | Construct a value of type 'GenerateNonsenseWordAPI200Response' (by applying it's required fields, if any)
mkGenerateNonsenseWordAPI200Response
  :: GenerateNonsenseWordAPI200Response
mkGenerateNonsenseWordAPI200Response =
  GenerateNonsenseWordAPI200Response
  { generateNonsenseWordAPI200ResponseWord = Nothing
  , generateNonsenseWordAPI200ResponseRating = Nothing
  }

-- ** ListWordSynonymsAPI200Response
-- | ListWordSynonymsAPI200Response
data ListWordSynonymsAPI200Response = ListWordSynonymsAPI200Response
  { listWordSynonymsAPI200ResponseSynonyms :: !(Maybe [Text]) -- ^ "synonyms"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ListWordSynonymsAPI200Response
instance A.FromJSON ListWordSynonymsAPI200Response where
  parseJSON = A.withObject "ListWordSynonymsAPI200Response" $ \o ->
    ListWordSynonymsAPI200Response
      <$> (o .:? "synonyms")

-- | ToJSON ListWordSynonymsAPI200Response
instance A.ToJSON ListWordSynonymsAPI200Response where
  toJSON ListWordSynonymsAPI200Response {..} =
   _omitNulls
      [ "synonyms" .= listWordSynonymsAPI200ResponseSynonyms
      ]


-- | Construct a value of type 'ListWordSynonymsAPI200Response' (by applying it's required fields, if any)
mkListWordSynonymsAPI200Response
  :: ListWordSynonymsAPI200Response
mkListWordSynonymsAPI200Response =
  ListWordSynonymsAPI200Response
  { listWordSynonymsAPI200ResponseSynonyms = Nothing
  }

-- ** PluralizeWordAPI200Response
-- | PluralizeWordAPI200Response
data PluralizeWordAPI200Response = PluralizeWordAPI200Response
  { pluralizeWordAPI200ResponseOriginal :: !(Maybe Text) -- ^ "original"
  , pluralizeWordAPI200ResponsePlural :: !(Maybe Text) -- ^ "plural"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON PluralizeWordAPI200Response
instance A.FromJSON PluralizeWordAPI200Response where
  parseJSON = A.withObject "PluralizeWordAPI200Response" $ \o ->
    PluralizeWordAPI200Response
      <$> (o .:? "original")
      <*> (o .:? "plural")

-- | ToJSON PluralizeWordAPI200Response
instance A.ToJSON PluralizeWordAPI200Response where
  toJSON PluralizeWordAPI200Response {..} =
   _omitNulls
      [ "original" .= pluralizeWordAPI200ResponseOriginal
      , "plural" .= pluralizeWordAPI200ResponsePlural
      ]


-- | Construct a value of type 'PluralizeWordAPI200Response' (by applying it's required fields, if any)
mkPluralizeWordAPI200Response
  :: PluralizeWordAPI200Response
mkPluralizeWordAPI200Response =
  PluralizeWordAPI200Response
  { pluralizeWordAPI200ResponseOriginal = Nothing
  , pluralizeWordAPI200ResponsePlural = Nothing
  }

-- ** RandomMemeAPI200Response
-- | RandomMemeAPI200Response
data RandomMemeAPI200Response = RandomMemeAPI200Response
  { randomMemeAPI200ResponseDescription :: !(Maybe Text) -- ^ "description"
  , randomMemeAPI200ResponseUrl :: !(Maybe Text) -- ^ "url"
  , randomMemeAPI200ResponseType :: !(Maybe Text) -- ^ "type"
  , randomMemeAPI200ResponseWidth :: !(Maybe Int) -- ^ "width"
  , randomMemeAPI200ResponseHeight :: !(Maybe Int) -- ^ "height"
  , randomMemeAPI200ResponseRatio :: !(Maybe Double) -- ^ "ratio"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RandomMemeAPI200Response
instance A.FromJSON RandomMemeAPI200Response where
  parseJSON = A.withObject "RandomMemeAPI200Response" $ \o ->
    RandomMemeAPI200Response
      <$> (o .:? "description")
      <*> (o .:? "url")
      <*> (o .:? "type")
      <*> (o .:? "width")
      <*> (o .:? "height")
      <*> (o .:? "ratio")

-- | ToJSON RandomMemeAPI200Response
instance A.ToJSON RandomMemeAPI200Response where
  toJSON RandomMemeAPI200Response {..} =
   _omitNulls
      [ "description" .= randomMemeAPI200ResponseDescription
      , "url" .= randomMemeAPI200ResponseUrl
      , "type" .= randomMemeAPI200ResponseType
      , "width" .= randomMemeAPI200ResponseWidth
      , "height" .= randomMemeAPI200ResponseHeight
      , "ratio" .= randomMemeAPI200ResponseRatio
      ]


-- | Construct a value of type 'RandomMemeAPI200Response' (by applying it's required fields, if any)
mkRandomMemeAPI200Response
  :: RandomMemeAPI200Response
mkRandomMemeAPI200Response =
  RandomMemeAPI200Response
  { randomMemeAPI200ResponseDescription = Nothing
  , randomMemeAPI200ResponseUrl = Nothing
  , randomMemeAPI200ResponseType = Nothing
  , randomMemeAPI200ResponseWidth = Nothing
  , randomMemeAPI200ResponseHeight = Nothing
  , randomMemeAPI200ResponseRatio = Nothing
  }

-- ** RandomPoemAPI200Response
-- | RandomPoemAPI200Response
data RandomPoemAPI200Response = RandomPoemAPI200Response
  { randomPoemAPI200ResponseTitle :: !(Maybe Text) -- ^ "title"
  , randomPoemAPI200ResponseAuthor :: !(Maybe Text) -- ^ "author"
  , randomPoemAPI200ResponsePoem :: !(Maybe Text) -- ^ "poem"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RandomPoemAPI200Response
instance A.FromJSON RandomPoemAPI200Response where
  parseJSON = A.withObject "RandomPoemAPI200Response" $ \o ->
    RandomPoemAPI200Response
      <$> (o .:? "title")
      <*> (o .:? "author")
      <*> (o .:? "poem")

-- | ToJSON RandomPoemAPI200Response
instance A.ToJSON RandomPoemAPI200Response where
  toJSON RandomPoemAPI200Response {..} =
   _omitNulls
      [ "title" .= randomPoemAPI200ResponseTitle
      , "author" .= randomPoemAPI200ResponseAuthor
      , "poem" .= randomPoemAPI200ResponsePoem
      ]


-- | Construct a value of type 'RandomPoemAPI200Response' (by applying it's required fields, if any)
mkRandomPoemAPI200Response
  :: RandomPoemAPI200Response
mkRandomPoemAPI200Response =
  RandomPoemAPI200Response
  { randomPoemAPI200ResponseTitle = Nothing
  , randomPoemAPI200ResponseAuthor = Nothing
  , randomPoemAPI200ResponsePoem = Nothing
  }

-- ** RandomQuoteAPI200Response
-- | RandomQuoteAPI200Response
data RandomQuoteAPI200Response = RandomQuoteAPI200Response
  { randomQuoteAPI200ResponseAuthor :: !(Maybe Text) -- ^ "author"
  , randomQuoteAPI200ResponseQuote :: !(Maybe Text) -- ^ "quote"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RandomQuoteAPI200Response
instance A.FromJSON RandomQuoteAPI200Response where
  parseJSON = A.withObject "RandomQuoteAPI200Response" $ \o ->
    RandomQuoteAPI200Response
      <$> (o .:? "author")
      <*> (o .:? "quote")

-- | ToJSON RandomQuoteAPI200Response
instance A.ToJSON RandomQuoteAPI200Response where
  toJSON RandomQuoteAPI200Response {..} =
   _omitNulls
      [ "author" .= randomQuoteAPI200ResponseAuthor
      , "quote" .= randomQuoteAPI200ResponseQuote
      ]


-- | Construct a value of type 'RandomQuoteAPI200Response' (by applying it's required fields, if any)
mkRandomQuoteAPI200Response
  :: RandomQuoteAPI200Response
mkRandomQuoteAPI200Response =
  RandomQuoteAPI200Response
  { randomQuoteAPI200ResponseAuthor = Nothing
  , randomQuoteAPI200ResponseQuote = Nothing
  }

-- ** RandomRiddleAPI200Response
-- | RandomRiddleAPI200Response
data RandomRiddleAPI200Response = RandomRiddleAPI200Response
  { randomRiddleAPI200ResponseRiddle :: !(Maybe Text) -- ^ "riddle"
  , randomRiddleAPI200ResponseAnswer :: !(Maybe Text) -- ^ "answer"
  , randomRiddleAPI200ResponseDifficulty :: !(Maybe Text) -- ^ "difficulty"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RandomRiddleAPI200Response
instance A.FromJSON RandomRiddleAPI200Response where
  parseJSON = A.withObject "RandomRiddleAPI200Response" $ \o ->
    RandomRiddleAPI200Response
      <$> (o .:? "riddle")
      <*> (o .:? "answer")
      <*> (o .:? "difficulty")

-- | ToJSON RandomRiddleAPI200Response
instance A.ToJSON RandomRiddleAPI200Response where
  toJSON RandomRiddleAPI200Response {..} =
   _omitNulls
      [ "riddle" .= randomRiddleAPI200ResponseRiddle
      , "answer" .= randomRiddleAPI200ResponseAnswer
      , "difficulty" .= randomRiddleAPI200ResponseDifficulty
      ]


-- | Construct a value of type 'RandomRiddleAPI200Response' (by applying it's required fields, if any)
mkRandomRiddleAPI200Response
  :: RandomRiddleAPI200Response
mkRandomRiddleAPI200Response =
  RandomRiddleAPI200Response
  { randomRiddleAPI200ResponseRiddle = Nothing
  , randomRiddleAPI200ResponseAnswer = Nothing
  , randomRiddleAPI200ResponseDifficulty = Nothing
  }

-- ** RandomTriviaAPI200Response
-- | RandomTriviaAPI200Response
data RandomTriviaAPI200Response = RandomTriviaAPI200Response
  { randomTriviaAPI200ResponseTrivia :: !(Maybe Text) -- ^ "trivia"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RandomTriviaAPI200Response
instance A.FromJSON RandomTriviaAPI200Response where
  parseJSON = A.withObject "RandomTriviaAPI200Response" $ \o ->
    RandomTriviaAPI200Response
      <$> (o .:? "trivia")

-- | ToJSON RandomTriviaAPI200Response
instance A.ToJSON RandomTriviaAPI200Response where
  toJSON RandomTriviaAPI200Response {..} =
   _omitNulls
      [ "trivia" .= randomTriviaAPI200ResponseTrivia
      ]


-- | Construct a value of type 'RandomTriviaAPI200Response' (by applying it's required fields, if any)
mkRandomTriviaAPI200Response
  :: RandomTriviaAPI200Response
mkRandomTriviaAPI200Response =
  RandomTriviaAPI200Response
  { randomTriviaAPI200ResponseTrivia = Nothing
  }

-- ** ReadKeyValueFromStoreAPI200Response
-- | ReadKeyValueFromStoreAPI200Response
data ReadKeyValueFromStoreAPI200Response = ReadKeyValueFromStoreAPI200Response
  { readKeyValueFromStoreAPI200ResponseValue :: !(Maybe Text) -- ^ "value"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ReadKeyValueFromStoreAPI200Response
instance A.FromJSON ReadKeyValueFromStoreAPI200Response where
  parseJSON = A.withObject "ReadKeyValueFromStoreAPI200Response" $ \o ->
    ReadKeyValueFromStoreAPI200Response
      <$> (o .:? "value")

-- | ToJSON ReadKeyValueFromStoreAPI200Response
instance A.ToJSON ReadKeyValueFromStoreAPI200Response where
  toJSON ReadKeyValueFromStoreAPI200Response {..} =
   _omitNulls
      [ "value" .= readKeyValueFromStoreAPI200ResponseValue
      ]


-- | Construct a value of type 'ReadKeyValueFromStoreAPI200Response' (by applying it's required fields, if any)
mkReadKeyValueFromStoreAPI200Response
  :: ReadKeyValueFromStoreAPI200Response
mkReadKeyValueFromStoreAPI200Response =
  ReadKeyValueFromStoreAPI200Response
  { readKeyValueFromStoreAPI200ResponseValue = Nothing
  }

-- ** RetrievePageRankAPI200Response
-- | RetrievePageRankAPI200Response
data RetrievePageRankAPI200Response = RetrievePageRankAPI200Response
  { retrievePageRankAPI200ResponsePageRank :: !(Maybe Double) -- ^ "page_rank"
  , retrievePageRankAPI200ResponsePosition :: !(Maybe Int) -- ^ "position"
  , retrievePageRankAPI200ResponsePercentile :: !(Maybe Double) -- ^ "percentile"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrievePageRankAPI200Response
instance A.FromJSON RetrievePageRankAPI200Response where
  parseJSON = A.withObject "RetrievePageRankAPI200Response" $ \o ->
    RetrievePageRankAPI200Response
      <$> (o .:? "page_rank")
      <*> (o .:? "position")
      <*> (o .:? "percentile")

-- | ToJSON RetrievePageRankAPI200Response
instance A.ToJSON RetrievePageRankAPI200Response where
  toJSON RetrievePageRankAPI200Response {..} =
   _omitNulls
      [ "page_rank" .= retrievePageRankAPI200ResponsePageRank
      , "position" .= retrievePageRankAPI200ResponsePosition
      , "percentile" .= retrievePageRankAPI200ResponsePercentile
      ]


-- | Construct a value of type 'RetrievePageRankAPI200Response' (by applying it's required fields, if any)
mkRetrievePageRankAPI200Response
  :: RetrievePageRankAPI200Response
mkRetrievePageRankAPI200Response =
  RetrievePageRankAPI200Response
  { retrievePageRankAPI200ResponsePageRank = Nothing
  , retrievePageRankAPI200ResponsePosition = Nothing
  , retrievePageRankAPI200ResponsePercentile = Nothing
  }

-- ** RetrieveRecipeInformationAPI200Response
-- | RetrieveRecipeInformationAPI200Response
data RetrieveRecipeInformationAPI200Response = RetrieveRecipeInformationAPI200Response
  { retrieveRecipeInformationAPI200ResponseId :: !(Maybe Int) -- ^ "id"
  , retrieveRecipeInformationAPI200ResponseTitle :: !(Maybe Text) -- ^ "title"
  , retrieveRecipeInformationAPI200ResponseServings :: !(Maybe Int) -- ^ "servings"
  , retrieveRecipeInformationAPI200ResponseImages :: !(Maybe [Text]) -- ^ "images"
  , retrieveRecipeInformationAPI200ResponseDietaryProperties :: !(Maybe RetrieveRecipeInformationAPI200ResponseDietaryProperties) -- ^ "dietary_properties"
  , retrieveRecipeInformationAPI200ResponsePricePerServing :: !(Maybe Double) -- ^ "price_per_serving"
  , retrieveRecipeInformationAPI200ResponseTimes :: !(Maybe RetrieveRecipeInformationAPI200ResponseTimes) -- ^ "times"
  , retrieveRecipeInformationAPI200ResponseNutrition :: !(Maybe RetrieveRecipeInformationAPI200ResponseNutrition) -- ^ "nutrition"
  , retrieveRecipeInformationAPI200ResponseTaste :: !(Maybe RetrieveRecipeInformationAPI200ResponseTaste) -- ^ "taste"
  , retrieveRecipeInformationAPI200ResponseCuisines :: !(Maybe [Text]) -- ^ "cuisines"
  , retrieveRecipeInformationAPI200ResponseMealTypes :: !(Maybe [Text]) -- ^ "meal_types"
  , retrieveRecipeInformationAPI200ResponseOccasions :: !(Maybe [Text]) -- ^ "occasions"
  , retrieveRecipeInformationAPI200ResponseIngredients :: !(Maybe [RetrieveRecipeInformationAPI200ResponseIngredientsInner]) -- ^ "ingredients"
  , retrieveRecipeInformationAPI200ResponseInstructions :: !(Maybe [RetrieveRecipeInformationAPI200ResponseInstructionsInner]) -- ^ "instructions"
  , retrieveRecipeInformationAPI200ResponseCredits :: !(Maybe RetrieveRecipeInformationAPI200ResponseCredits) -- ^ "credits"
  , retrieveRecipeInformationAPI200ResponseScores :: !(Maybe RetrieveRecipeInformationAPI200ResponseScores) -- ^ "scores"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200Response
instance A.FromJSON RetrieveRecipeInformationAPI200Response where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200Response" $ \o ->
    RetrieveRecipeInformationAPI200Response
      <$> (o .:? "id")
      <*> (o .:? "title")
      <*> (o .:? "servings")
      <*> (o .:? "images")
      <*> (o .:? "dietary_properties")
      <*> (o .:? "price_per_serving")
      <*> (o .:? "times")
      <*> (o .:? "nutrition")
      <*> (o .:? "taste")
      <*> (o .:? "cuisines")
      <*> (o .:? "meal_types")
      <*> (o .:? "occasions")
      <*> (o .:? "ingredients")
      <*> (o .:? "instructions")
      <*> (o .:? "credits")
      <*> (o .:? "scores")

-- | ToJSON RetrieveRecipeInformationAPI200Response
instance A.ToJSON RetrieveRecipeInformationAPI200Response where
  toJSON RetrieveRecipeInformationAPI200Response {..} =
   _omitNulls
      [ "id" .= retrieveRecipeInformationAPI200ResponseId
      , "title" .= retrieveRecipeInformationAPI200ResponseTitle
      , "servings" .= retrieveRecipeInformationAPI200ResponseServings
      , "images" .= retrieveRecipeInformationAPI200ResponseImages
      , "dietary_properties" .= retrieveRecipeInformationAPI200ResponseDietaryProperties
      , "price_per_serving" .= retrieveRecipeInformationAPI200ResponsePricePerServing
      , "times" .= retrieveRecipeInformationAPI200ResponseTimes
      , "nutrition" .= retrieveRecipeInformationAPI200ResponseNutrition
      , "taste" .= retrieveRecipeInformationAPI200ResponseTaste
      , "cuisines" .= retrieveRecipeInformationAPI200ResponseCuisines
      , "meal_types" .= retrieveRecipeInformationAPI200ResponseMealTypes
      , "occasions" .= retrieveRecipeInformationAPI200ResponseOccasions
      , "ingredients" .= retrieveRecipeInformationAPI200ResponseIngredients
      , "instructions" .= retrieveRecipeInformationAPI200ResponseInstructions
      , "credits" .= retrieveRecipeInformationAPI200ResponseCredits
      , "scores" .= retrieveRecipeInformationAPI200ResponseScores
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200Response' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200Response
  :: RetrieveRecipeInformationAPI200Response
mkRetrieveRecipeInformationAPI200Response =
  RetrieveRecipeInformationAPI200Response
  { retrieveRecipeInformationAPI200ResponseId = Nothing
  , retrieveRecipeInformationAPI200ResponseTitle = Nothing
  , retrieveRecipeInformationAPI200ResponseServings = Nothing
  , retrieveRecipeInformationAPI200ResponseImages = Nothing
  , retrieveRecipeInformationAPI200ResponseDietaryProperties = Nothing
  , retrieveRecipeInformationAPI200ResponsePricePerServing = Nothing
  , retrieveRecipeInformationAPI200ResponseTimes = Nothing
  , retrieveRecipeInformationAPI200ResponseNutrition = Nothing
  , retrieveRecipeInformationAPI200ResponseTaste = Nothing
  , retrieveRecipeInformationAPI200ResponseCuisines = Nothing
  , retrieveRecipeInformationAPI200ResponseMealTypes = Nothing
  , retrieveRecipeInformationAPI200ResponseOccasions = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredients = Nothing
  , retrieveRecipeInformationAPI200ResponseInstructions = Nothing
  , retrieveRecipeInformationAPI200ResponseCredits = Nothing
  , retrieveRecipeInformationAPI200ResponseScores = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseCredits
-- | RetrieveRecipeInformationAPI200ResponseCredits
data RetrieveRecipeInformationAPI200ResponseCredits = RetrieveRecipeInformationAPI200ResponseCredits
  { retrieveRecipeInformationAPI200ResponseCreditsLicense :: !(Maybe Text) -- ^ "license"
  , retrieveRecipeInformationAPI200ResponseCreditsText :: !(Maybe Text) -- ^ "text"
  , retrieveRecipeInformationAPI200ResponseCreditsSourceName :: !(Maybe Text) -- ^ "source_name"
  , retrieveRecipeInformationAPI200ResponseCreditsSourceUrl :: !(Maybe Text) -- ^ "source_url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseCredits
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseCredits where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseCredits" $ \o ->
    RetrieveRecipeInformationAPI200ResponseCredits
      <$> (o .:? "license")
      <*> (o .:? "text")
      <*> (o .:? "source_name")
      <*> (o .:? "source_url")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseCredits
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseCredits where
  toJSON RetrieveRecipeInformationAPI200ResponseCredits {..} =
   _omitNulls
      [ "license" .= retrieveRecipeInformationAPI200ResponseCreditsLicense
      , "text" .= retrieveRecipeInformationAPI200ResponseCreditsText
      , "source_name" .= retrieveRecipeInformationAPI200ResponseCreditsSourceName
      , "source_url" .= retrieveRecipeInformationAPI200ResponseCreditsSourceUrl
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseCredits' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseCredits
  :: RetrieveRecipeInformationAPI200ResponseCredits
mkRetrieveRecipeInformationAPI200ResponseCredits =
  RetrieveRecipeInformationAPI200ResponseCredits
  { retrieveRecipeInformationAPI200ResponseCreditsLicense = Nothing
  , retrieveRecipeInformationAPI200ResponseCreditsText = Nothing
  , retrieveRecipeInformationAPI200ResponseCreditsSourceName = Nothing
  , retrieveRecipeInformationAPI200ResponseCreditsSourceUrl = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseDietaryProperties
-- | RetrieveRecipeInformationAPI200ResponseDietaryProperties
data RetrieveRecipeInformationAPI200ResponseDietaryProperties = RetrieveRecipeInformationAPI200ResponseDietaryProperties
  { retrieveRecipeInformationAPI200ResponseDietaryPropertiesLowFodmap :: !(Maybe Bool) -- ^ "low_fodmap"
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesVegetarian :: !(Maybe Bool) -- ^ "vegetarian"
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesVegan :: !(Maybe Bool) -- ^ "vegan"
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesGlutenFree :: !(Maybe Bool) -- ^ "gluten_free"
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesDairyFree :: !(Maybe Bool) -- ^ "dairy_free"
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesGaps :: !(Maybe Text) -- ^ "gaps"
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesDiets :: !(Maybe [Text]) -- ^ "diets"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseDietaryProperties
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseDietaryProperties where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseDietaryProperties" $ \o ->
    RetrieveRecipeInformationAPI200ResponseDietaryProperties
      <$> (o .:? "low_fodmap")
      <*> (o .:? "vegetarian")
      <*> (o .:? "vegan")
      <*> (o .:? "gluten_free")
      <*> (o .:? "dairy_free")
      <*> (o .:? "gaps")
      <*> (o .:? "diets")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseDietaryProperties
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseDietaryProperties where
  toJSON RetrieveRecipeInformationAPI200ResponseDietaryProperties {..} =
   _omitNulls
      [ "low_fodmap" .= retrieveRecipeInformationAPI200ResponseDietaryPropertiesLowFodmap
      , "vegetarian" .= retrieveRecipeInformationAPI200ResponseDietaryPropertiesVegetarian
      , "vegan" .= retrieveRecipeInformationAPI200ResponseDietaryPropertiesVegan
      , "gluten_free" .= retrieveRecipeInformationAPI200ResponseDietaryPropertiesGlutenFree
      , "dairy_free" .= retrieveRecipeInformationAPI200ResponseDietaryPropertiesDairyFree
      , "gaps" .= retrieveRecipeInformationAPI200ResponseDietaryPropertiesGaps
      , "diets" .= retrieveRecipeInformationAPI200ResponseDietaryPropertiesDiets
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseDietaryProperties' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseDietaryProperties
  :: RetrieveRecipeInformationAPI200ResponseDietaryProperties
mkRetrieveRecipeInformationAPI200ResponseDietaryProperties =
  RetrieveRecipeInformationAPI200ResponseDietaryProperties
  { retrieveRecipeInformationAPI200ResponseDietaryPropertiesLowFodmap = Nothing
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesVegetarian = Nothing
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesVegan = Nothing
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesGlutenFree = Nothing
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesDairyFree = Nothing
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesGaps = Nothing
  , retrieveRecipeInformationAPI200ResponseDietaryPropertiesDiets = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseIngredientsInner
-- | RetrieveRecipeInformationAPI200ResponseIngredientsInner
data RetrieveRecipeInformationAPI200ResponseIngredientsInner = RetrieveRecipeInformationAPI200ResponseIngredientsInner
  { retrieveRecipeInformationAPI200ResponseIngredientsInnerImage :: !(Maybe Text) -- ^ "image"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerNameClean :: !(Maybe Text) -- ^ "name_clean"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerAmount :: !(Maybe Double) -- ^ "amount"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerUnit :: !(Maybe Text) -- ^ "unit"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures :: !(Maybe RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures) -- ^ "measures"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerOriginal :: !(Maybe Text) -- ^ "original"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerMeta :: !(Maybe [Text]) -- ^ "meta"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerOriginalName :: !(Maybe Text) -- ^ "original_name"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerName :: !(Maybe Text) -- ^ "name"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerId :: !(Maybe Int) -- ^ "id"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerAisle :: !(Maybe Text) -- ^ "aisle"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerConsistency :: !(Maybe Text) -- ^ "consistency"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseIngredientsInner
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseIngredientsInner where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseIngredientsInner" $ \o ->
    RetrieveRecipeInformationAPI200ResponseIngredientsInner
      <$> (o .:? "image")
      <*> (o .:? "name_clean")
      <*> (o .:? "amount")
      <*> (o .:? "unit")
      <*> (o .:? "measures")
      <*> (o .:? "original")
      <*> (o .:? "meta")
      <*> (o .:? "original_name")
      <*> (o .:? "name")
      <*> (o .:? "id")
      <*> (o .:? "aisle")
      <*> (o .:? "consistency")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseIngredientsInner
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseIngredientsInner where
  toJSON RetrieveRecipeInformationAPI200ResponseIngredientsInner {..} =
   _omitNulls
      [ "image" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerImage
      , "name_clean" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerNameClean
      , "amount" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerAmount
      , "unit" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerUnit
      , "measures" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
      , "original" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerOriginal
      , "meta" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerMeta
      , "original_name" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerOriginalName
      , "name" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerName
      , "id" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerId
      , "aisle" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerAisle
      , "consistency" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerConsistency
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseIngredientsInner' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseIngredientsInner
  :: RetrieveRecipeInformationAPI200ResponseIngredientsInner
mkRetrieveRecipeInformationAPI200ResponseIngredientsInner =
  RetrieveRecipeInformationAPI200ResponseIngredientsInner
  { retrieveRecipeInformationAPI200ResponseIngredientsInnerImage = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerNameClean = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerAmount = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerUnit = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerOriginal = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerMeta = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerOriginalName = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerName = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerId = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerAisle = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerConsistency = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
-- | RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
data RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures = RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
  { retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasuresMetric :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric) -- ^ "metric"
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasuresUs :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric) -- ^ "us"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures" $ \o ->
    RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
      <$> (o .:? "metric")
      <*> (o .:? "us")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures where
  toJSON RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures {..} =
   _omitNulls
      [ "metric" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasuresMetric
      , "us" .= retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasuresUs
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
  :: RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
mkRetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures =
  RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures
  { retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasuresMetric = Nothing
  , retrieveRecipeInformationAPI200ResponseIngredientsInnerMeasuresUs = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseInstructionsInner
-- | RetrieveRecipeInformationAPI200ResponseInstructionsInner
data RetrieveRecipeInformationAPI200ResponseInstructionsInner = RetrieveRecipeInformationAPI200ResponseInstructionsInner
  { retrieveRecipeInformationAPI200ResponseInstructionsInnerName :: !(Maybe Text) -- ^ "name"
  , retrieveRecipeInformationAPI200ResponseInstructionsInnerSteps :: !(Maybe [RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner]) -- ^ "steps"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseInstructionsInner
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseInstructionsInner where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseInstructionsInner" $ \o ->
    RetrieveRecipeInformationAPI200ResponseInstructionsInner
      <$> (o .:? "name")
      <*> (o .:? "steps")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseInstructionsInner
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseInstructionsInner where
  toJSON RetrieveRecipeInformationAPI200ResponseInstructionsInner {..} =
   _omitNulls
      [ "name" .= retrieveRecipeInformationAPI200ResponseInstructionsInnerName
      , "steps" .= retrieveRecipeInformationAPI200ResponseInstructionsInnerSteps
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseInstructionsInner' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseInstructionsInner
  :: RetrieveRecipeInformationAPI200ResponseInstructionsInner
mkRetrieveRecipeInformationAPI200ResponseInstructionsInner =
  RetrieveRecipeInformationAPI200ResponseInstructionsInner
  { retrieveRecipeInformationAPI200ResponseInstructionsInnerName = Nothing
  , retrieveRecipeInformationAPI200ResponseInstructionsInnerSteps = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
-- | RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
data RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner = RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
  { retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerNumber :: !(Maybe Int) -- ^ "number"
  , retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerIngredients :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner]) -- ^ "ingredients"
  , retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerEquipment :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner]) -- ^ "equipment"
  , retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerStep :: !(Maybe Text) -- ^ "step"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner" $ \o ->
    RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
      <$> (o .:? "number")
      <*> (o .:? "ingredients")
      <*> (o .:? "equipment")
      <*> (o .:? "step")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner where
  toJSON RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner {..} =
   _omitNulls
      [ "number" .= retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerNumber
      , "ingredients" .= retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerIngredients
      , "equipment" .= retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerEquipment
      , "step" .= retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerStep
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
  :: RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
mkRetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner =
  RetrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInner
  { retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerNumber = Nothing
  , retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerIngredients = Nothing
  , retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerEquipment = Nothing
  , retrieveRecipeInformationAPI200ResponseInstructionsInnerStepsInnerStep = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseNutrition
-- | RetrieveRecipeInformationAPI200ResponseNutrition
data RetrieveRecipeInformationAPI200ResponseNutrition = RetrieveRecipeInformationAPI200ResponseNutrition
  { retrieveRecipeInformationAPI200ResponseNutritionWeightPerServing :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing) -- ^ "weight_per_serving"
  , retrieveRecipeInformationAPI200ResponseNutritionCaloricBreakdown :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown) -- ^ "caloric_breakdown"
  , retrieveRecipeInformationAPI200ResponseNutritionFlavonoids :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner]) -- ^ "flavonoids"
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdown :: !(Maybe [RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner]) -- ^ "ingredient_breakdown"
  , retrieveRecipeInformationAPI200ResponseNutritionProperties :: !(Maybe [SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner]) -- ^ "properties"
  , retrieveRecipeInformationAPI200ResponseNutritionNutrients :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner]) -- ^ "nutrients"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseNutrition
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseNutrition where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseNutrition" $ \o ->
    RetrieveRecipeInformationAPI200ResponseNutrition
      <$> (o .:? "weight_per_serving")
      <*> (o .:? "caloric_breakdown")
      <*> (o .:? "flavonoids")
      <*> (o .:? "ingredient_breakdown")
      <*> (o .:? "properties")
      <*> (o .:? "nutrients")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseNutrition
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseNutrition where
  toJSON RetrieveRecipeInformationAPI200ResponseNutrition {..} =
   _omitNulls
      [ "weight_per_serving" .= retrieveRecipeInformationAPI200ResponseNutritionWeightPerServing
      , "caloric_breakdown" .= retrieveRecipeInformationAPI200ResponseNutritionCaloricBreakdown
      , "flavonoids" .= retrieveRecipeInformationAPI200ResponseNutritionFlavonoids
      , "ingredient_breakdown" .= retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdown
      , "properties" .= retrieveRecipeInformationAPI200ResponseNutritionProperties
      , "nutrients" .= retrieveRecipeInformationAPI200ResponseNutritionNutrients
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseNutrition' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseNutrition
  :: RetrieveRecipeInformationAPI200ResponseNutrition
mkRetrieveRecipeInformationAPI200ResponseNutrition =
  RetrieveRecipeInformationAPI200ResponseNutrition
  { retrieveRecipeInformationAPI200ResponseNutritionWeightPerServing = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionCaloricBreakdown = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionFlavonoids = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdown = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionProperties = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionNutrients = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
-- | RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
data RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner = RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
  { retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerName :: !(Maybe Text) -- ^ "name"
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerAmount :: !(Maybe Double) -- ^ "amount"
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerUnit :: !(Maybe Text) -- ^ "unit"
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerId :: !(Maybe Int) -- ^ "id"
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerNutrients :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner]) -- ^ "nutrients"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner" $ \o ->
    RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
      <$> (o .:? "name")
      <*> (o .:? "amount")
      <*> (o .:? "unit")
      <*> (o .:? "id")
      <*> (o .:? "nutrients")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner where
  toJSON RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner {..} =
   _omitNulls
      [ "name" .= retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerName
      , "amount" .= retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerAmount
      , "unit" .= retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerUnit
      , "id" .= retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerId
      , "nutrients" .= retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerNutrients
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
  :: RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
mkRetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner =
  RetrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInner
  { retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerName = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerAmount = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerUnit = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerId = Nothing
  , retrieveRecipeInformationAPI200ResponseNutritionIngredientBreakdownInnerNutrients = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseScores
-- | RetrieveRecipeInformationAPI200ResponseScores
data RetrieveRecipeInformationAPI200ResponseScores = RetrieveRecipeInformationAPI200ResponseScores
  { retrieveRecipeInformationAPI200ResponseScoresMetaScore :: !(Maybe Double) -- ^ "meta_score"
  , retrieveRecipeInformationAPI200ResponseScoresWeightWatcherSmartPoints :: !(Maybe Int) -- ^ "weight_watcher_smart_points"
  , retrieveRecipeInformationAPI200ResponseScoresHealthScore :: !(Maybe Int) -- ^ "health_score"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseScores
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseScores where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseScores" $ \o ->
    RetrieveRecipeInformationAPI200ResponseScores
      <$> (o .:? "meta_score")
      <*> (o .:? "weight_watcher_smart_points")
      <*> (o .:? "health_score")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseScores
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseScores where
  toJSON RetrieveRecipeInformationAPI200ResponseScores {..} =
   _omitNulls
      [ "meta_score" .= retrieveRecipeInformationAPI200ResponseScoresMetaScore
      , "weight_watcher_smart_points" .= retrieveRecipeInformationAPI200ResponseScoresWeightWatcherSmartPoints
      , "health_score" .= retrieveRecipeInformationAPI200ResponseScoresHealthScore
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseScores' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseScores
  :: RetrieveRecipeInformationAPI200ResponseScores
mkRetrieveRecipeInformationAPI200ResponseScores =
  RetrieveRecipeInformationAPI200ResponseScores
  { retrieveRecipeInformationAPI200ResponseScoresMetaScore = Nothing
  , retrieveRecipeInformationAPI200ResponseScoresWeightWatcherSmartPoints = Nothing
  , retrieveRecipeInformationAPI200ResponseScoresHealthScore = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseTaste
-- | RetrieveRecipeInformationAPI200ResponseTaste
data RetrieveRecipeInformationAPI200ResponseTaste = RetrieveRecipeInformationAPI200ResponseTaste
  { retrieveRecipeInformationAPI200ResponseTasteFattiness :: !(Maybe Double) -- ^ "fattiness"
  , retrieveRecipeInformationAPI200ResponseTasteSpiciness :: !(Maybe Int) -- ^ "spiciness"
  , retrieveRecipeInformationAPI200ResponseTasteSaltiness :: !(Maybe Int) -- ^ "saltiness"
  , retrieveRecipeInformationAPI200ResponseTasteBitterness :: !(Maybe Double) -- ^ "bitterness"
  , retrieveRecipeInformationAPI200ResponseTasteSavoriness :: !(Maybe Double) -- ^ "savoriness"
  , retrieveRecipeInformationAPI200ResponseTasteSweetness :: !(Maybe Double) -- ^ "sweetness"
  , retrieveRecipeInformationAPI200ResponseTasteSourness :: !(Maybe Double) -- ^ "sourness"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseTaste
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseTaste where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseTaste" $ \o ->
    RetrieveRecipeInformationAPI200ResponseTaste
      <$> (o .:? "fattiness")
      <*> (o .:? "spiciness")
      <*> (o .:? "saltiness")
      <*> (o .:? "bitterness")
      <*> (o .:? "savoriness")
      <*> (o .:? "sweetness")
      <*> (o .:? "sourness")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseTaste
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseTaste where
  toJSON RetrieveRecipeInformationAPI200ResponseTaste {..} =
   _omitNulls
      [ "fattiness" .= retrieveRecipeInformationAPI200ResponseTasteFattiness
      , "spiciness" .= retrieveRecipeInformationAPI200ResponseTasteSpiciness
      , "saltiness" .= retrieveRecipeInformationAPI200ResponseTasteSaltiness
      , "bitterness" .= retrieveRecipeInformationAPI200ResponseTasteBitterness
      , "savoriness" .= retrieveRecipeInformationAPI200ResponseTasteSavoriness
      , "sweetness" .= retrieveRecipeInformationAPI200ResponseTasteSweetness
      , "sourness" .= retrieveRecipeInformationAPI200ResponseTasteSourness
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseTaste' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseTaste
  :: RetrieveRecipeInformationAPI200ResponseTaste
mkRetrieveRecipeInformationAPI200ResponseTaste =
  RetrieveRecipeInformationAPI200ResponseTaste
  { retrieveRecipeInformationAPI200ResponseTasteFattiness = Nothing
  , retrieveRecipeInformationAPI200ResponseTasteSpiciness = Nothing
  , retrieveRecipeInformationAPI200ResponseTasteSaltiness = Nothing
  , retrieveRecipeInformationAPI200ResponseTasteBitterness = Nothing
  , retrieveRecipeInformationAPI200ResponseTasteSavoriness = Nothing
  , retrieveRecipeInformationAPI200ResponseTasteSweetness = Nothing
  , retrieveRecipeInformationAPI200ResponseTasteSourness = Nothing
  }

-- ** RetrieveRecipeInformationAPI200ResponseTimes
-- | RetrieveRecipeInformationAPI200ResponseTimes
data RetrieveRecipeInformationAPI200ResponseTimes = RetrieveRecipeInformationAPI200ResponseTimes
  { retrieveRecipeInformationAPI200ResponseTimesTotalMinutes :: !(Maybe Int) -- ^ "total_minutes"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON RetrieveRecipeInformationAPI200ResponseTimes
instance A.FromJSON RetrieveRecipeInformationAPI200ResponseTimes where
  parseJSON = A.withObject "RetrieveRecipeInformationAPI200ResponseTimes" $ \o ->
    RetrieveRecipeInformationAPI200ResponseTimes
      <$> (o .:? "total_minutes")

-- | ToJSON RetrieveRecipeInformationAPI200ResponseTimes
instance A.ToJSON RetrieveRecipeInformationAPI200ResponseTimes where
  toJSON RetrieveRecipeInformationAPI200ResponseTimes {..} =
   _omitNulls
      [ "total_minutes" .= retrieveRecipeInformationAPI200ResponseTimesTotalMinutes
      ]


-- | Construct a value of type 'RetrieveRecipeInformationAPI200ResponseTimes' (by applying it's required fields, if any)
mkRetrieveRecipeInformationAPI200ResponseTimes
  :: RetrieveRecipeInformationAPI200ResponseTimes
mkRetrieveRecipeInformationAPI200ResponseTimes =
  RetrieveRecipeInformationAPI200ResponseTimes
  { retrieveRecipeInformationAPI200ResponseTimesTotalMinutes = Nothing
  }

-- ** ScoreReadabilityAPI200Response
-- | ScoreReadabilityAPI200Response
data ScoreReadabilityAPI200Response = ScoreReadabilityAPI200Response
  { scoreReadabilityAPI200ResponseReadability :: !(Maybe ScoreTextAPI200ResponseReadability) -- ^ "readability"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreReadabilityAPI200Response
instance A.FromJSON ScoreReadabilityAPI200Response where
  parseJSON = A.withObject "ScoreReadabilityAPI200Response" $ \o ->
    ScoreReadabilityAPI200Response
      <$> (o .:? "readability")

-- | ToJSON ScoreReadabilityAPI200Response
instance A.ToJSON ScoreReadabilityAPI200Response where
  toJSON ScoreReadabilityAPI200Response {..} =
   _omitNulls
      [ "readability" .= scoreReadabilityAPI200ResponseReadability
      ]


-- | Construct a value of type 'ScoreReadabilityAPI200Response' (by applying it's required fields, if any)
mkScoreReadabilityAPI200Response
  :: ScoreReadabilityAPI200Response
mkScoreReadabilityAPI200Response =
  ScoreReadabilityAPI200Response
  { scoreReadabilityAPI200ResponseReadability = Nothing
  }

-- ** ScoreTextAPI200Response
-- | ScoreTextAPI200Response
data ScoreTextAPI200Response = ScoreTextAPI200Response
  { scoreTextAPI200ResponseNumberOfWords :: !(Maybe Int) -- ^ "number_of_words"
  , scoreTextAPI200ResponseNumberOfSentences :: !(Maybe Int) -- ^ "number_of_sentences"
  , scoreTextAPI200ResponseReadability :: !(Maybe ScoreTextAPI200ResponseReadability) -- ^ "readability"
  , scoreTextAPI200ResponseSkimmability :: !(Maybe ScoreTextAPI200ResponseSkimmability) -- ^ "skimmability"
  , scoreTextAPI200ResponseInterestingness :: !(Maybe ScoreTextAPI200ResponseInterestingness) -- ^ "interestingness"
  , scoreTextAPI200ResponseStyle :: !(Maybe ScoreTextAPI200ResponseStyle) -- ^ "style"
  , scoreTextAPI200ResponseTotalScore :: !(Maybe Double) -- ^ "total_score"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200Response
instance A.FromJSON ScoreTextAPI200Response where
  parseJSON = A.withObject "ScoreTextAPI200Response" $ \o ->
    ScoreTextAPI200Response
      <$> (o .:? "number_of_words")
      <*> (o .:? "number_of_sentences")
      <*> (o .:? "readability")
      <*> (o .:? "skimmability")
      <*> (o .:? "interestingness")
      <*> (o .:? "style")
      <*> (o .:? "total_score")

-- | ToJSON ScoreTextAPI200Response
instance A.ToJSON ScoreTextAPI200Response where
  toJSON ScoreTextAPI200Response {..} =
   _omitNulls
      [ "number_of_words" .= scoreTextAPI200ResponseNumberOfWords
      , "number_of_sentences" .= scoreTextAPI200ResponseNumberOfSentences
      , "readability" .= scoreTextAPI200ResponseReadability
      , "skimmability" .= scoreTextAPI200ResponseSkimmability
      , "interestingness" .= scoreTextAPI200ResponseInterestingness
      , "style" .= scoreTextAPI200ResponseStyle
      , "total_score" .= scoreTextAPI200ResponseTotalScore
      ]


-- | Construct a value of type 'ScoreTextAPI200Response' (by applying it's required fields, if any)
mkScoreTextAPI200Response
  :: ScoreTextAPI200Response
mkScoreTextAPI200Response =
  ScoreTextAPI200Response
  { scoreTextAPI200ResponseNumberOfWords = Nothing
  , scoreTextAPI200ResponseNumberOfSentences = Nothing
  , scoreTextAPI200ResponseReadability = Nothing
  , scoreTextAPI200ResponseSkimmability = Nothing
  , scoreTextAPI200ResponseInterestingness = Nothing
  , scoreTextAPI200ResponseStyle = Nothing
  , scoreTextAPI200ResponseTotalScore = Nothing
  }

-- ** ScoreTextAPI200ResponseInterestingness
-- | ScoreTextAPI200ResponseInterestingness
data ScoreTextAPI200ResponseInterestingness = ScoreTextAPI200ResponseInterestingness
  { scoreTextAPI200ResponseInterestingnessMainscores :: !(Maybe ScoreTextAPI200ResponseSkimmabilityMainscores) -- ^ "mainscores"
  , scoreTextAPI200ResponseInterestingnessSubscores :: !(Maybe ScoreTextAPI200ResponseInterestingnessSubscores) -- ^ "subscores"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseInterestingness
instance A.FromJSON ScoreTextAPI200ResponseInterestingness where
  parseJSON = A.withObject "ScoreTextAPI200ResponseInterestingness" $ \o ->
    ScoreTextAPI200ResponseInterestingness
      <$> (o .:? "mainscores")
      <*> (o .:? "subscores")

-- | ToJSON ScoreTextAPI200ResponseInterestingness
instance A.ToJSON ScoreTextAPI200ResponseInterestingness where
  toJSON ScoreTextAPI200ResponseInterestingness {..} =
   _omitNulls
      [ "mainscores" .= scoreTextAPI200ResponseInterestingnessMainscores
      , "subscores" .= scoreTextAPI200ResponseInterestingnessSubscores
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseInterestingness' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseInterestingness
  :: ScoreTextAPI200ResponseInterestingness
mkScoreTextAPI200ResponseInterestingness =
  ScoreTextAPI200ResponseInterestingness
  { scoreTextAPI200ResponseInterestingnessMainscores = Nothing
  , scoreTextAPI200ResponseInterestingnessSubscores = Nothing
  }

-- ** ScoreTextAPI200ResponseInterestingnessSubscores
-- | ScoreTextAPI200ResponseInterestingnessSubscores
data ScoreTextAPI200ResponseInterestingnessSubscores = ScoreTextAPI200ResponseInterestingnessSubscores
  { scoreTextAPI200ResponseInterestingnessSubscoresTitleRatingScore :: !(Maybe [Int]) -- ^ "title_rating_score"
  , scoreTextAPI200ResponseInterestingnessSubscoresQuoteScore :: !(Maybe [Int]) -- ^ "quote_score"
  , scoreTextAPI200ResponseInterestingnessSubscoresLengthScore :: !(Maybe [Int]) -- ^ "length_score"
  , scoreTextAPI200ResponseInterestingnessSubscoresLinkScore :: !(Maybe [Int]) -- ^ "link_score"
  , scoreTextAPI200ResponseInterestingnessSubscoresGoogleHitsScore :: !(Maybe [Int]) -- ^ "google_hits_score"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseInterestingnessSubscores
instance A.FromJSON ScoreTextAPI200ResponseInterestingnessSubscores where
  parseJSON = A.withObject "ScoreTextAPI200ResponseInterestingnessSubscores" $ \o ->
    ScoreTextAPI200ResponseInterestingnessSubscores
      <$> (o .:? "title_rating_score")
      <*> (o .:? "quote_score")
      <*> (o .:? "length_score")
      <*> (o .:? "link_score")
      <*> (o .:? "google_hits_score")

-- | ToJSON ScoreTextAPI200ResponseInterestingnessSubscores
instance A.ToJSON ScoreTextAPI200ResponseInterestingnessSubscores where
  toJSON ScoreTextAPI200ResponseInterestingnessSubscores {..} =
   _omitNulls
      [ "title_rating_score" .= scoreTextAPI200ResponseInterestingnessSubscoresTitleRatingScore
      , "quote_score" .= scoreTextAPI200ResponseInterestingnessSubscoresQuoteScore
      , "length_score" .= scoreTextAPI200ResponseInterestingnessSubscoresLengthScore
      , "link_score" .= scoreTextAPI200ResponseInterestingnessSubscoresLinkScore
      , "google_hits_score" .= scoreTextAPI200ResponseInterestingnessSubscoresGoogleHitsScore
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseInterestingnessSubscores' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseInterestingnessSubscores
  :: ScoreTextAPI200ResponseInterestingnessSubscores
mkScoreTextAPI200ResponseInterestingnessSubscores =
  ScoreTextAPI200ResponseInterestingnessSubscores
  { scoreTextAPI200ResponseInterestingnessSubscoresTitleRatingScore = Nothing
  , scoreTextAPI200ResponseInterestingnessSubscoresQuoteScore = Nothing
  , scoreTextAPI200ResponseInterestingnessSubscoresLengthScore = Nothing
  , scoreTextAPI200ResponseInterestingnessSubscoresLinkScore = Nothing
  , scoreTextAPI200ResponseInterestingnessSubscoresGoogleHitsScore = Nothing
  }

-- ** ScoreTextAPI200ResponseReadability
-- | ScoreTextAPI200ResponseReadability
data ScoreTextAPI200ResponseReadability = ScoreTextAPI200ResponseReadability
  { scoreTextAPI200ResponseReadabilityMainscores :: !(Maybe ScoreTextAPI200ResponseReadabilityMainscores) -- ^ "mainscores"
  , scoreTextAPI200ResponseReadabilitySubscores :: !(Maybe ScoreTextAPI200ResponseReadabilitySubscores) -- ^ "subscores"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseReadability
instance A.FromJSON ScoreTextAPI200ResponseReadability where
  parseJSON = A.withObject "ScoreTextAPI200ResponseReadability" $ \o ->
    ScoreTextAPI200ResponseReadability
      <$> (o .:? "mainscores")
      <*> (o .:? "subscores")

-- | ToJSON ScoreTextAPI200ResponseReadability
instance A.ToJSON ScoreTextAPI200ResponseReadability where
  toJSON ScoreTextAPI200ResponseReadability {..} =
   _omitNulls
      [ "mainscores" .= scoreTextAPI200ResponseReadabilityMainscores
      , "subscores" .= scoreTextAPI200ResponseReadabilitySubscores
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseReadability' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseReadability
  :: ScoreTextAPI200ResponseReadability
mkScoreTextAPI200ResponseReadability =
  ScoreTextAPI200ResponseReadability
  { scoreTextAPI200ResponseReadabilityMainscores = Nothing
  , scoreTextAPI200ResponseReadabilitySubscores = Nothing
  }

-- ** ScoreTextAPI200ResponseReadabilityMainscores
-- | ScoreTextAPI200ResponseReadabilityMainscores
data ScoreTextAPI200ResponseReadabilityMainscores = ScoreTextAPI200ResponseReadabilityMainscores
  { scoreTextAPI200ResponseReadabilityMainscoresTotalPossible :: !(Maybe Int) -- ^ "total_possible"
  , scoreTextAPI200ResponseReadabilityMainscoresTotal :: !(Maybe Int) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseReadabilityMainscores
instance A.FromJSON ScoreTextAPI200ResponseReadabilityMainscores where
  parseJSON = A.withObject "ScoreTextAPI200ResponseReadabilityMainscores" $ \o ->
    ScoreTextAPI200ResponseReadabilityMainscores
      <$> (o .:? "total_possible")
      <*> (o .:? "total")

-- | ToJSON ScoreTextAPI200ResponseReadabilityMainscores
instance A.ToJSON ScoreTextAPI200ResponseReadabilityMainscores where
  toJSON ScoreTextAPI200ResponseReadabilityMainscores {..} =
   _omitNulls
      [ "total_possible" .= scoreTextAPI200ResponseReadabilityMainscoresTotalPossible
      , "total" .= scoreTextAPI200ResponseReadabilityMainscoresTotal
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseReadabilityMainscores' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseReadabilityMainscores
  :: ScoreTextAPI200ResponseReadabilityMainscores
mkScoreTextAPI200ResponseReadabilityMainscores =
  ScoreTextAPI200ResponseReadabilityMainscores
  { scoreTextAPI200ResponseReadabilityMainscoresTotalPossible = Nothing
  , scoreTextAPI200ResponseReadabilityMainscoresTotal = Nothing
  }

-- ** ScoreTextAPI200ResponseReadabilitySubscores
-- | ScoreTextAPI200ResponseReadabilitySubscores
data ScoreTextAPI200ResponseReadabilitySubscores = ScoreTextAPI200ResponseReadabilitySubscores
  { scoreTextAPI200ResponseReadabilitySubscoresReadingTimeSeconds :: !(Maybe Int) -- ^ "reading_time_seconds"
  , scoreTextAPI200ResponseReadabilitySubscoresForcast :: !(Maybe Double) -- ^ "forcast"
  , scoreTextAPI200ResponseReadabilitySubscoresFlesch :: !(Maybe Double) -- ^ "flesch"
  , scoreTextAPI200ResponseReadabilitySubscoresSmog :: !(Maybe Double) -- ^ "smog"
  , scoreTextAPI200ResponseReadabilitySubscoresAri :: !(Maybe Double) -- ^ "ari"
  , scoreTextAPI200ResponseReadabilitySubscoresLix :: !(Maybe Double) -- ^ "lix"
  , scoreTextAPI200ResponseReadabilitySubscoresColemanLiau :: !(Maybe Double) -- ^ "coleman_liau"
  , scoreTextAPI200ResponseReadabilitySubscoresKincaid :: !(Maybe Double) -- ^ "kincaid"
  , scoreTextAPI200ResponseReadabilitySubscoresFog :: !(Maybe Double) -- ^ "fog"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseReadabilitySubscores
instance A.FromJSON ScoreTextAPI200ResponseReadabilitySubscores where
  parseJSON = A.withObject "ScoreTextAPI200ResponseReadabilitySubscores" $ \o ->
    ScoreTextAPI200ResponseReadabilitySubscores
      <$> (o .:? "reading_time_seconds")
      <*> (o .:? "forcast")
      <*> (o .:? "flesch")
      <*> (o .:? "smog")
      <*> (o .:? "ari")
      <*> (o .:? "lix")
      <*> (o .:? "coleman_liau")
      <*> (o .:? "kincaid")
      <*> (o .:? "fog")

-- | ToJSON ScoreTextAPI200ResponseReadabilitySubscores
instance A.ToJSON ScoreTextAPI200ResponseReadabilitySubscores where
  toJSON ScoreTextAPI200ResponseReadabilitySubscores {..} =
   _omitNulls
      [ "reading_time_seconds" .= scoreTextAPI200ResponseReadabilitySubscoresReadingTimeSeconds
      , "forcast" .= scoreTextAPI200ResponseReadabilitySubscoresForcast
      , "flesch" .= scoreTextAPI200ResponseReadabilitySubscoresFlesch
      , "smog" .= scoreTextAPI200ResponseReadabilitySubscoresSmog
      , "ari" .= scoreTextAPI200ResponseReadabilitySubscoresAri
      , "lix" .= scoreTextAPI200ResponseReadabilitySubscoresLix
      , "coleman_liau" .= scoreTextAPI200ResponseReadabilitySubscoresColemanLiau
      , "kincaid" .= scoreTextAPI200ResponseReadabilitySubscoresKincaid
      , "fog" .= scoreTextAPI200ResponseReadabilitySubscoresFog
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseReadabilitySubscores' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseReadabilitySubscores
  :: ScoreTextAPI200ResponseReadabilitySubscores
mkScoreTextAPI200ResponseReadabilitySubscores =
  ScoreTextAPI200ResponseReadabilitySubscores
  { scoreTextAPI200ResponseReadabilitySubscoresReadingTimeSeconds = Nothing
  , scoreTextAPI200ResponseReadabilitySubscoresForcast = Nothing
  , scoreTextAPI200ResponseReadabilitySubscoresFlesch = Nothing
  , scoreTextAPI200ResponseReadabilitySubscoresSmog = Nothing
  , scoreTextAPI200ResponseReadabilitySubscoresAri = Nothing
  , scoreTextAPI200ResponseReadabilitySubscoresLix = Nothing
  , scoreTextAPI200ResponseReadabilitySubscoresColemanLiau = Nothing
  , scoreTextAPI200ResponseReadabilitySubscoresKincaid = Nothing
  , scoreTextAPI200ResponseReadabilitySubscoresFog = Nothing
  }

-- ** ScoreTextAPI200ResponseSkimmability
-- | ScoreTextAPI200ResponseSkimmability
data ScoreTextAPI200ResponseSkimmability = ScoreTextAPI200ResponseSkimmability
  { scoreTextAPI200ResponseSkimmabilityMainscores :: !(Maybe ScoreTextAPI200ResponseSkimmabilityMainscores) -- ^ "mainscores"
  , scoreTextAPI200ResponseSkimmabilitySubscores :: !(Maybe ScoreTextAPI200ResponseSkimmabilitySubscores) -- ^ "subscores"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseSkimmability
instance A.FromJSON ScoreTextAPI200ResponseSkimmability where
  parseJSON = A.withObject "ScoreTextAPI200ResponseSkimmability" $ \o ->
    ScoreTextAPI200ResponseSkimmability
      <$> (o .:? "mainscores")
      <*> (o .:? "subscores")

-- | ToJSON ScoreTextAPI200ResponseSkimmability
instance A.ToJSON ScoreTextAPI200ResponseSkimmability where
  toJSON ScoreTextAPI200ResponseSkimmability {..} =
   _omitNulls
      [ "mainscores" .= scoreTextAPI200ResponseSkimmabilityMainscores
      , "subscores" .= scoreTextAPI200ResponseSkimmabilitySubscores
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseSkimmability' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseSkimmability
  :: ScoreTextAPI200ResponseSkimmability
mkScoreTextAPI200ResponseSkimmability =
  ScoreTextAPI200ResponseSkimmability
  { scoreTextAPI200ResponseSkimmabilityMainscores = Nothing
  , scoreTextAPI200ResponseSkimmabilitySubscores = Nothing
  }

-- ** ScoreTextAPI200ResponseSkimmabilityMainscores
-- | ScoreTextAPI200ResponseSkimmabilityMainscores
data ScoreTextAPI200ResponseSkimmabilityMainscores = ScoreTextAPI200ResponseSkimmabilityMainscores
  { scoreTextAPI200ResponseSkimmabilityMainscoresTotalPossible :: !(Maybe Int) -- ^ "total_possible"
  , scoreTextAPI200ResponseSkimmabilityMainscoresTotal :: !(Maybe Double) -- ^ "total"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseSkimmabilityMainscores
instance A.FromJSON ScoreTextAPI200ResponseSkimmabilityMainscores where
  parseJSON = A.withObject "ScoreTextAPI200ResponseSkimmabilityMainscores" $ \o ->
    ScoreTextAPI200ResponseSkimmabilityMainscores
      <$> (o .:? "total_possible")
      <*> (o .:? "total")

-- | ToJSON ScoreTextAPI200ResponseSkimmabilityMainscores
instance A.ToJSON ScoreTextAPI200ResponseSkimmabilityMainscores where
  toJSON ScoreTextAPI200ResponseSkimmabilityMainscores {..} =
   _omitNulls
      [ "total_possible" .= scoreTextAPI200ResponseSkimmabilityMainscoresTotalPossible
      , "total" .= scoreTextAPI200ResponseSkimmabilityMainscoresTotal
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseSkimmabilityMainscores' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseSkimmabilityMainscores
  :: ScoreTextAPI200ResponseSkimmabilityMainscores
mkScoreTextAPI200ResponseSkimmabilityMainscores =
  ScoreTextAPI200ResponseSkimmabilityMainscores
  { scoreTextAPI200ResponseSkimmabilityMainscoresTotalPossible = Nothing
  , scoreTextAPI200ResponseSkimmabilityMainscoresTotal = Nothing
  }

-- ** ScoreTextAPI200ResponseSkimmabilitySubscores
-- | ScoreTextAPI200ResponseSkimmabilitySubscores
data ScoreTextAPI200ResponseSkimmabilitySubscores = ScoreTextAPI200ResponseSkimmabilitySubscores
  { scoreTextAPI200ResponseSkimmabilitySubscoresBulletPointRatioScore :: !(Maybe [Int]) -- ^ "bullet_point_ratio_score"
  , scoreTextAPI200ResponseSkimmabilitySubscoresImageScore :: !(Maybe [Int]) -- ^ "image_score"
  , scoreTextAPI200ResponseSkimmabilitySubscoresHighlightedWordRatioScore :: !(Maybe [Int]) -- ^ "highlighted_word_ratio_score"
  , scoreTextAPI200ResponseSkimmabilitySubscoresVideoScore :: !(Maybe [Int]) -- ^ "video_score"
  , scoreTextAPI200ResponseSkimmabilitySubscoresParagraphScore :: !(Maybe [Int]) -- ^ "paragraph_score"
  , scoreTextAPI200ResponseSkimmabilitySubscoresParagraphHeadlineRatioScore :: !(Maybe [Int]) -- ^ "paragraph_headline_ratio_score"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseSkimmabilitySubscores
instance A.FromJSON ScoreTextAPI200ResponseSkimmabilitySubscores where
  parseJSON = A.withObject "ScoreTextAPI200ResponseSkimmabilitySubscores" $ \o ->
    ScoreTextAPI200ResponseSkimmabilitySubscores
      <$> (o .:? "bullet_point_ratio_score")
      <*> (o .:? "image_score")
      <*> (o .:? "highlighted_word_ratio_score")
      <*> (o .:? "video_score")
      <*> (o .:? "paragraph_score")
      <*> (o .:? "paragraph_headline_ratio_score")

-- | ToJSON ScoreTextAPI200ResponseSkimmabilitySubscores
instance A.ToJSON ScoreTextAPI200ResponseSkimmabilitySubscores where
  toJSON ScoreTextAPI200ResponseSkimmabilitySubscores {..} =
   _omitNulls
      [ "bullet_point_ratio_score" .= scoreTextAPI200ResponseSkimmabilitySubscoresBulletPointRatioScore
      , "image_score" .= scoreTextAPI200ResponseSkimmabilitySubscoresImageScore
      , "highlighted_word_ratio_score" .= scoreTextAPI200ResponseSkimmabilitySubscoresHighlightedWordRatioScore
      , "video_score" .= scoreTextAPI200ResponseSkimmabilitySubscoresVideoScore
      , "paragraph_score" .= scoreTextAPI200ResponseSkimmabilitySubscoresParagraphScore
      , "paragraph_headline_ratio_score" .= scoreTextAPI200ResponseSkimmabilitySubscoresParagraphHeadlineRatioScore
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseSkimmabilitySubscores' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseSkimmabilitySubscores
  :: ScoreTextAPI200ResponseSkimmabilitySubscores
mkScoreTextAPI200ResponseSkimmabilitySubscores =
  ScoreTextAPI200ResponseSkimmabilitySubscores
  { scoreTextAPI200ResponseSkimmabilitySubscoresBulletPointRatioScore = Nothing
  , scoreTextAPI200ResponseSkimmabilitySubscoresImageScore = Nothing
  , scoreTextAPI200ResponseSkimmabilitySubscoresHighlightedWordRatioScore = Nothing
  , scoreTextAPI200ResponseSkimmabilitySubscoresVideoScore = Nothing
  , scoreTextAPI200ResponseSkimmabilitySubscoresParagraphScore = Nothing
  , scoreTextAPI200ResponseSkimmabilitySubscoresParagraphHeadlineRatioScore = Nothing
  }

-- ** ScoreTextAPI200ResponseStyle
-- | ScoreTextAPI200ResponseStyle
data ScoreTextAPI200ResponseStyle = ScoreTextAPI200ResponseStyle
  { scoreTextAPI200ResponseStyleMainscores :: !(Maybe ScoreTextAPI200ResponseReadabilityMainscores) -- ^ "mainscores"
  , scoreTextAPI200ResponseStyleSubscores :: !(Maybe ScoreTextAPI200ResponseStyleSubscores) -- ^ "subscores"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseStyle
instance A.FromJSON ScoreTextAPI200ResponseStyle where
  parseJSON = A.withObject "ScoreTextAPI200ResponseStyle" $ \o ->
    ScoreTextAPI200ResponseStyle
      <$> (o .:? "mainscores")
      <*> (o .:? "subscores")

-- | ToJSON ScoreTextAPI200ResponseStyle
instance A.ToJSON ScoreTextAPI200ResponseStyle where
  toJSON ScoreTextAPI200ResponseStyle {..} =
   _omitNulls
      [ "mainscores" .= scoreTextAPI200ResponseStyleMainscores
      , "subscores" .= scoreTextAPI200ResponseStyleSubscores
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseStyle' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseStyle
  :: ScoreTextAPI200ResponseStyle
mkScoreTextAPI200ResponseStyle =
  ScoreTextAPI200ResponseStyle
  { scoreTextAPI200ResponseStyleMainscores = Nothing
  , scoreTextAPI200ResponseStyleSubscores = Nothing
  }

-- ** ScoreTextAPI200ResponseStyleSubscores
-- | ScoreTextAPI200ResponseStyleSubscores
data ScoreTextAPI200ResponseStyleSubscores = ScoreTextAPI200ResponseStyleSubscores
  { scoreTextAPI200ResponseStyleSubscoresAbbreviationScore :: !(Maybe [Int]) -- ^ "abbreviation_score"
  , scoreTextAPI200ResponseStyleSubscoresStyleScore :: !(Maybe [Int]) -- ^ "style_score"
  , scoreTextAPI200ResponseStyleSubscoresSpellingScore :: !(Maybe [Int]) -- ^ "spelling_score"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON ScoreTextAPI200ResponseStyleSubscores
instance A.FromJSON ScoreTextAPI200ResponseStyleSubscores where
  parseJSON = A.withObject "ScoreTextAPI200ResponseStyleSubscores" $ \o ->
    ScoreTextAPI200ResponseStyleSubscores
      <$> (o .:? "abbreviation_score")
      <*> (o .:? "style_score")
      <*> (o .:? "spelling_score")

-- | ToJSON ScoreTextAPI200ResponseStyleSubscores
instance A.ToJSON ScoreTextAPI200ResponseStyleSubscores where
  toJSON ScoreTextAPI200ResponseStyleSubscores {..} =
   _omitNulls
      [ "abbreviation_score" .= scoreTextAPI200ResponseStyleSubscoresAbbreviationScore
      , "style_score" .= scoreTextAPI200ResponseStyleSubscoresStyleScore
      , "spelling_score" .= scoreTextAPI200ResponseStyleSubscoresSpellingScore
      ]


-- | Construct a value of type 'ScoreTextAPI200ResponseStyleSubscores' (by applying it's required fields, if any)
mkScoreTextAPI200ResponseStyleSubscores
  :: ScoreTextAPI200ResponseStyleSubscores
mkScoreTextAPI200ResponseStyleSubscores =
  ScoreTextAPI200ResponseStyleSubscores
  { scoreTextAPI200ResponseStyleSubscoresAbbreviationScore = Nothing
  , scoreTextAPI200ResponseStyleSubscoresStyleScore = Nothing
  , scoreTextAPI200ResponseStyleSubscoresSpellingScore = Nothing
  }

-- ** SearchBooksAPI200Response
-- | SearchBooksAPI200Response
data SearchBooksAPI200Response = SearchBooksAPI200Response
  { searchBooksAPI200ResponseTotalResults :: !(Maybe Int) -- ^ "total_results"
  , searchBooksAPI200ResponseNumber :: !(Maybe Int) -- ^ "number"
  , searchBooksAPI200ResponseOffset :: !(Maybe Int) -- ^ "offset"
  , searchBooksAPI200ResponseBooks :: !(Maybe [[SearchBooksAPI200ResponseBooksInnerInner]]) -- ^ "books"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchBooksAPI200Response
instance A.FromJSON SearchBooksAPI200Response where
  parseJSON = A.withObject "SearchBooksAPI200Response" $ \o ->
    SearchBooksAPI200Response
      <$> (o .:? "total_results")
      <*> (o .:? "number")
      <*> (o .:? "offset")
      <*> (o .:? "books")

-- | ToJSON SearchBooksAPI200Response
instance A.ToJSON SearchBooksAPI200Response where
  toJSON SearchBooksAPI200Response {..} =
   _omitNulls
      [ "total_results" .= searchBooksAPI200ResponseTotalResults
      , "number" .= searchBooksAPI200ResponseNumber
      , "offset" .= searchBooksAPI200ResponseOffset
      , "books" .= searchBooksAPI200ResponseBooks
      ]


-- | Construct a value of type 'SearchBooksAPI200Response' (by applying it's required fields, if any)
mkSearchBooksAPI200Response
  :: SearchBooksAPI200Response
mkSearchBooksAPI200Response =
  SearchBooksAPI200Response
  { searchBooksAPI200ResponseTotalResults = Nothing
  , searchBooksAPI200ResponseNumber = Nothing
  , searchBooksAPI200ResponseOffset = Nothing
  , searchBooksAPI200ResponseBooks = Nothing
  }

-- ** SearchBooksAPI200ResponseBooksInnerInner
-- | SearchBooksAPI200ResponseBooksInnerInner
data SearchBooksAPI200ResponseBooksInnerInner = SearchBooksAPI200ResponseBooksInnerInner
  { searchBooksAPI200ResponseBooksInnerInnerTitle :: !(Maybe Text) -- ^ "title"
  , searchBooksAPI200ResponseBooksInnerInnerImage :: !(Maybe Text) -- ^ "image"
  , searchBooksAPI200ResponseBooksInnerInnerId :: !(Maybe Int) -- ^ "id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchBooksAPI200ResponseBooksInnerInner
instance A.FromJSON SearchBooksAPI200ResponseBooksInnerInner where
  parseJSON = A.withObject "SearchBooksAPI200ResponseBooksInnerInner" $ \o ->
    SearchBooksAPI200ResponseBooksInnerInner
      <$> (o .:? "title")
      <*> (o .:? "image")
      <*> (o .:? "id")

-- | ToJSON SearchBooksAPI200ResponseBooksInnerInner
instance A.ToJSON SearchBooksAPI200ResponseBooksInnerInner where
  toJSON SearchBooksAPI200ResponseBooksInnerInner {..} =
   _omitNulls
      [ "title" .= searchBooksAPI200ResponseBooksInnerInnerTitle
      , "image" .= searchBooksAPI200ResponseBooksInnerInnerImage
      , "id" .= searchBooksAPI200ResponseBooksInnerInnerId
      ]


-- | Construct a value of type 'SearchBooksAPI200ResponseBooksInnerInner' (by applying it's required fields, if any)
mkSearchBooksAPI200ResponseBooksInnerInner
  :: SearchBooksAPI200ResponseBooksInnerInner
mkSearchBooksAPI200ResponseBooksInnerInner =
  SearchBooksAPI200ResponseBooksInnerInner
  { searchBooksAPI200ResponseBooksInnerInnerTitle = Nothing
  , searchBooksAPI200ResponseBooksInnerInnerImage = Nothing
  , searchBooksAPI200ResponseBooksInnerInnerId = Nothing
  }

-- ** SearchDrinksAPI200Response
-- | SearchDrinksAPI200Response
data SearchDrinksAPI200Response = SearchDrinksAPI200Response
  { searchDrinksAPI200ResponseOffset :: !(Maybe Int) -- ^ "offset"
  , searchDrinksAPI200ResponseNumber :: !(Maybe Int) -- ^ "number"
  , searchDrinksAPI200ResponseDrinks :: !(Maybe [SearchDrinksAPI200ResponseDrinksInner]) -- ^ "drinks"
  , searchDrinksAPI200ResponseTotalResults :: !(Maybe Int) -- ^ "total_results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200Response
instance A.FromJSON SearchDrinksAPI200Response where
  parseJSON = A.withObject "SearchDrinksAPI200Response" $ \o ->
    SearchDrinksAPI200Response
      <$> (o .:? "offset")
      <*> (o .:? "number")
      <*> (o .:? "drinks")
      <*> (o .:? "total_results")

-- | ToJSON SearchDrinksAPI200Response
instance A.ToJSON SearchDrinksAPI200Response where
  toJSON SearchDrinksAPI200Response {..} =
   _omitNulls
      [ "offset" .= searchDrinksAPI200ResponseOffset
      , "number" .= searchDrinksAPI200ResponseNumber
      , "drinks" .= searchDrinksAPI200ResponseDrinks
      , "total_results" .= searchDrinksAPI200ResponseTotalResults
      ]


-- | Construct a value of type 'SearchDrinksAPI200Response' (by applying it's required fields, if any)
mkSearchDrinksAPI200Response
  :: SearchDrinksAPI200Response
mkSearchDrinksAPI200Response =
  SearchDrinksAPI200Response
  { searchDrinksAPI200ResponseOffset = Nothing
  , searchDrinksAPI200ResponseNumber = Nothing
  , searchDrinksAPI200ResponseDrinks = Nothing
  , searchDrinksAPI200ResponseTotalResults = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInner
-- | SearchDrinksAPI200ResponseDrinksInner
data SearchDrinksAPI200ResponseDrinksInner = SearchDrinksAPI200ResponseDrinksInner
  { searchDrinksAPI200ResponseDrinksInnerFlavors :: !(Maybe [Text]) -- ^ "flavors"
  , searchDrinksAPI200ResponseDrinksInnerInstructions :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerInstructionsInner]) -- ^ "instructions"
  , searchDrinksAPI200ResponseDrinksInnerImages :: !(Maybe [Text]) -- ^ "images"
  , searchDrinksAPI200ResponseDrinksInnerNutrition :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerNutrition) -- ^ "nutrition"
  , searchDrinksAPI200ResponseDrinksInnerGlassType :: !(Maybe Text) -- ^ "glass_type"
  , searchDrinksAPI200ResponseDrinksInnerCredits :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerCredits) -- ^ "credits"
  , searchDrinksAPI200ResponseDrinksInnerPricePerServing :: !(Maybe Double) -- ^ "price_per_serving"
  , searchDrinksAPI200ResponseDrinksInnerDescription :: !(Maybe Text) -- ^ "description"
  , searchDrinksAPI200ResponseDrinksInnerIngredients :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerIngredientsInner]) -- ^ "ingredients"
  , searchDrinksAPI200ResponseDrinksInnerId :: !(Maybe Int) -- ^ "id"
  , searchDrinksAPI200ResponseDrinksInnerTitle :: !(Maybe Text) -- ^ "title"
  , searchDrinksAPI200ResponseDrinksInnerCuisines :: !(Maybe [Text]) -- ^ "cuisines"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInner
      <$> (o .:? "flavors")
      <*> (o .:? "instructions")
      <*> (o .:? "images")
      <*> (o .:? "nutrition")
      <*> (o .:? "glass_type")
      <*> (o .:? "credits")
      <*> (o .:? "price_per_serving")
      <*> (o .:? "description")
      <*> (o .:? "ingredients")
      <*> (o .:? "id")
      <*> (o .:? "title")
      <*> (o .:? "cuisines")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInner where
  toJSON SearchDrinksAPI200ResponseDrinksInner {..} =
   _omitNulls
      [ "flavors" .= searchDrinksAPI200ResponseDrinksInnerFlavors
      , "instructions" .= searchDrinksAPI200ResponseDrinksInnerInstructions
      , "images" .= searchDrinksAPI200ResponseDrinksInnerImages
      , "nutrition" .= searchDrinksAPI200ResponseDrinksInnerNutrition
      , "glass_type" .= searchDrinksAPI200ResponseDrinksInnerGlassType
      , "credits" .= searchDrinksAPI200ResponseDrinksInnerCredits
      , "price_per_serving" .= searchDrinksAPI200ResponseDrinksInnerPricePerServing
      , "description" .= searchDrinksAPI200ResponseDrinksInnerDescription
      , "ingredients" .= searchDrinksAPI200ResponseDrinksInnerIngredients
      , "id" .= searchDrinksAPI200ResponseDrinksInnerId
      , "title" .= searchDrinksAPI200ResponseDrinksInnerTitle
      , "cuisines" .= searchDrinksAPI200ResponseDrinksInnerCuisines
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInner
  :: SearchDrinksAPI200ResponseDrinksInner
mkSearchDrinksAPI200ResponseDrinksInner =
  SearchDrinksAPI200ResponseDrinksInner
  { searchDrinksAPI200ResponseDrinksInnerFlavors = Nothing
  , searchDrinksAPI200ResponseDrinksInnerInstructions = Nothing
  , searchDrinksAPI200ResponseDrinksInnerImages = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutrition = Nothing
  , searchDrinksAPI200ResponseDrinksInnerGlassType = Nothing
  , searchDrinksAPI200ResponseDrinksInnerCredits = Nothing
  , searchDrinksAPI200ResponseDrinksInnerPricePerServing = Nothing
  , searchDrinksAPI200ResponseDrinksInnerDescription = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredients = Nothing
  , searchDrinksAPI200ResponseDrinksInnerId = Nothing
  , searchDrinksAPI200ResponseDrinksInnerTitle = Nothing
  , searchDrinksAPI200ResponseDrinksInnerCuisines = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerCredits
-- | SearchDrinksAPI200ResponseDrinksInnerCredits
data SearchDrinksAPI200ResponseDrinksInnerCredits = SearchDrinksAPI200ResponseDrinksInnerCredits
  { searchDrinksAPI200ResponseDrinksInnerCreditsText :: !(Maybe Text) -- ^ "text"
  , searchDrinksAPI200ResponseDrinksInnerCreditsSourceName :: !(Maybe Text) -- ^ "source_name"
  , searchDrinksAPI200ResponseDrinksInnerCreditsSourceUrl :: !(Maybe Text) -- ^ "source_url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerCredits
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerCredits where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerCredits" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerCredits
      <$> (o .:? "text")
      <*> (o .:? "source_name")
      <*> (o .:? "source_url")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerCredits
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerCredits where
  toJSON SearchDrinksAPI200ResponseDrinksInnerCredits {..} =
   _omitNulls
      [ "text" .= searchDrinksAPI200ResponseDrinksInnerCreditsText
      , "source_name" .= searchDrinksAPI200ResponseDrinksInnerCreditsSourceName
      , "source_url" .= searchDrinksAPI200ResponseDrinksInnerCreditsSourceUrl
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerCredits' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerCredits
  :: SearchDrinksAPI200ResponseDrinksInnerCredits
mkSearchDrinksAPI200ResponseDrinksInnerCredits =
  SearchDrinksAPI200ResponseDrinksInnerCredits
  { searchDrinksAPI200ResponseDrinksInnerCreditsText = Nothing
  , searchDrinksAPI200ResponseDrinksInnerCreditsSourceName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerCreditsSourceUrl = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerIngredientsInner
-- | SearchDrinksAPI200ResponseDrinksInnerIngredientsInner
data SearchDrinksAPI200ResponseDrinksInnerIngredientsInner = SearchDrinksAPI200ResponseDrinksInnerIngredientsInner
  { searchDrinksAPI200ResponseDrinksInnerIngredientsInnerImage :: !(Maybe Text) -- ^ "image"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerNameClean :: !(Maybe Text) -- ^ "name_clean"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerAmount :: !(Maybe Int) -- ^ "amount"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerUnit :: !(Maybe Text) -- ^ "unit"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures) -- ^ "measures"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerOriginal :: !(Maybe Text) -- ^ "original"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeta :: !(Maybe [Text]) -- ^ "meta"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerOriginalName :: !(Maybe Text) -- ^ "original_name"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerName :: !(Maybe Text) -- ^ "name"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerId :: !(Maybe Int) -- ^ "id"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerAisle :: !(Maybe Text) -- ^ "aisle"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerConsistency :: !(Maybe Text) -- ^ "consistency"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerIngredientsInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerIngredientsInner
      <$> (o .:? "image")
      <*> (o .:? "name_clean")
      <*> (o .:? "amount")
      <*> (o .:? "unit")
      <*> (o .:? "measures")
      <*> (o .:? "original")
      <*> (o .:? "meta")
      <*> (o .:? "original_name")
      <*> (o .:? "name")
      <*> (o .:? "id")
      <*> (o .:? "aisle")
      <*> (o .:? "consistency")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInner where
  toJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInner {..} =
   _omitNulls
      [ "image" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerImage
      , "name_clean" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerNameClean
      , "amount" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerAmount
      , "unit" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerUnit
      , "measures" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
      , "original" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerOriginal
      , "meta" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeta
      , "original_name" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerOriginalName
      , "name" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerName
      , "id" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerId
      , "aisle" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerAisle
      , "consistency" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerConsistency
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerIngredientsInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerIngredientsInner
  :: SearchDrinksAPI200ResponseDrinksInnerIngredientsInner
mkSearchDrinksAPI200ResponseDrinksInnerIngredientsInner =
  SearchDrinksAPI200ResponseDrinksInnerIngredientsInner
  { searchDrinksAPI200ResponseDrinksInnerIngredientsInnerImage = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerNameClean = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerAmount = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerUnit = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerOriginal = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeta = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerOriginalName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerId = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerAisle = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerConsistency = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
-- | SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
data SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures = SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
  { searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric) -- ^ "metric"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs) -- ^ "us"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
      <$> (o .:? "metric")
      <*> (o .:? "us")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures where
  toJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures {..} =
   _omitNulls
      [ "metric" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
      , "us" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
  :: SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
mkSearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures =
  SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasures
  { searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
-- | SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
data SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric = SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
  { searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricUnitShort :: !(Maybe Text) -- ^ "unit_short"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricAmount :: !(Maybe Double) -- ^ "amount"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricUnitLong :: !(Maybe Text) -- ^ "unit_long"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
      <$> (o .:? "unit_short")
      <*> (o .:? "amount")
      <*> (o .:? "unit_long")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric where
  toJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric {..} =
   _omitNulls
      [ "unit_short" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricUnitShort
      , "amount" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricAmount
      , "unit_long" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricUnitLong
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
  :: SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
mkSearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric =
  SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetric
  { searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricUnitShort = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricAmount = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresMetricUnitLong = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
-- | SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
data SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs = SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
  { searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsUnitShort :: !(Maybe Text) -- ^ "unit_short"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsAmount :: !(Maybe Int) -- ^ "amount"
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsUnitLong :: !(Maybe Text) -- ^ "unit_long"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
      <$> (o .:? "unit_short")
      <*> (o .:? "amount")
      <*> (o .:? "unit_long")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs where
  toJSON SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs {..} =
   _omitNulls
      [ "unit_short" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsUnitShort
      , "amount" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsAmount
      , "unit_long" .= searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsUnitLong
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
  :: SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
mkSearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs =
  SearchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUs
  { searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsUnitShort = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsAmount = Nothing
  , searchDrinksAPI200ResponseDrinksInnerIngredientsInnerMeasuresUsUnitLong = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerInstructionsInner
-- | SearchDrinksAPI200ResponseDrinksInnerInstructionsInner
data SearchDrinksAPI200ResponseDrinksInnerInstructionsInner = SearchDrinksAPI200ResponseDrinksInnerInstructionsInner
  { searchDrinksAPI200ResponseDrinksInnerInstructionsInnerName :: !(Maybe Text) -- ^ "name"
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerSteps :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner]) -- ^ "steps"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerInstructionsInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerInstructionsInner
      <$> (o .:? "name")
      <*> (o .:? "steps")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInner where
  toJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInner {..} =
   _omitNulls
      [ "name" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerName
      , "steps" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerSteps
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerInstructionsInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerInstructionsInner
  :: SearchDrinksAPI200ResponseDrinksInnerInstructionsInner
mkSearchDrinksAPI200ResponseDrinksInnerInstructionsInner =
  SearchDrinksAPI200ResponseDrinksInnerInstructionsInner
  { searchDrinksAPI200ResponseDrinksInnerInstructionsInnerName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerSteps = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
-- | SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
data SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner = SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
  { searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerNumber :: !(Maybe Int) -- ^ "number"
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredients :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner]) -- ^ "ingredients"
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerEquipment :: !(Maybe [Text]) -- ^ "equipment"
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerStep :: !(Maybe Text) -- ^ "step"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
      <$> (o .:? "number")
      <*> (o .:? "ingredients")
      <*> (o .:? "equipment")
      <*> (o .:? "step")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner where
  toJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner {..} =
   _omitNulls
      [ "number" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerNumber
      , "ingredients" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredients
      , "equipment" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerEquipment
      , "step" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerStep
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
  :: SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
mkSearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner =
  SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInner
  { searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerNumber = Nothing
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredients = Nothing
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerEquipment = Nothing
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerStep = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
-- | SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
data SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner = SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
  { searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerName :: !(Maybe Text) -- ^ "name"
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerImage :: !(Maybe Text) -- ^ "image"
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerId :: !(Maybe Int) -- ^ "id"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
      <$> (o .:? "name")
      <*> (o .:? "image")
      <*> (o .:? "id")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner where
  toJSON SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner {..} =
   _omitNulls
      [ "name" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerName
      , "image" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerImage
      , "id" .= searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerId
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
  :: SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
mkSearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner =
  SearchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInner
  { searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerImage = Nothing
  , searchDrinksAPI200ResponseDrinksInnerInstructionsInnerStepsInnerIngredientsInnerId = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerNutrition
-- | SearchDrinksAPI200ResponseDrinksInnerNutrition
data SearchDrinksAPI200ResponseDrinksInnerNutrition = SearchDrinksAPI200ResponseDrinksInnerNutrition
  { searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing) -- ^ "weight_per_serving"
  , searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown :: !(Maybe SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown) -- ^ "caloric_breakdown"
  , searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoids :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner]) -- ^ "flavonoids"
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdown :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner]) -- ^ "ingredient_breakdown"
  , searchDrinksAPI200ResponseDrinksInnerNutritionProperties :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner]) -- ^ "properties"
  , searchDrinksAPI200ResponseDrinksInnerNutritionNutrients :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner]) -- ^ "nutrients"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerNutrition
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerNutrition where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerNutrition" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerNutrition
      <$> (o .:? "weight_per_serving")
      <*> (o .:? "caloric_breakdown")
      <*> (o .:? "flavonoids")
      <*> (o .:? "ingredient_breakdown")
      <*> (o .:? "properties")
      <*> (o .:? "nutrients")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerNutrition
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerNutrition where
  toJSON SearchDrinksAPI200ResponseDrinksInnerNutrition {..} =
   _omitNulls
      [ "weight_per_serving" .= searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
      , "caloric_breakdown" .= searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
      , "flavonoids" .= searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoids
      , "ingredient_breakdown" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdown
      , "properties" .= searchDrinksAPI200ResponseDrinksInnerNutritionProperties
      , "nutrients" .= searchDrinksAPI200ResponseDrinksInnerNutritionNutrients
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerNutrition' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerNutrition
  :: SearchDrinksAPI200ResponseDrinksInnerNutrition
mkSearchDrinksAPI200ResponseDrinksInnerNutrition =
  SearchDrinksAPI200ResponseDrinksInnerNutrition
  { searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoids = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdown = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionProperties = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionNutrients = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
-- | SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
data SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown = SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
  { searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentFat :: !(Maybe Double) -- ^ "percent_fat"
  , searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentCarbs :: !(Maybe Double) -- ^ "percent_carbs"
  , searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentProtein :: !(Maybe Double) -- ^ "percent_protein"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
      <$> (o .:? "percent_fat")
      <*> (o .:? "percent_carbs")
      <*> (o .:? "percent_protein")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown where
  toJSON SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown {..} =
   _omitNulls
      [ "percent_fat" .= searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentFat
      , "percent_carbs" .= searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentCarbs
      , "percent_protein" .= searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentProtein
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
  :: SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
mkSearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown =
  SearchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdown
  { searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentFat = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentCarbs = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionCaloricBreakdownPercentProtein = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
-- | SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
data SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner = SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
  { searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerName :: !(Maybe Text) -- ^ "name"
  , searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerAmount :: !(Maybe Int) -- ^ "amount"
  , searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerUnit :: !(Maybe Text) -- ^ "unit"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
      <$> (o .:? "name")
      <*> (o .:? "amount")
      <*> (o .:? "unit")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner where
  toJSON SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner {..} =
   _omitNulls
      [ "name" .= searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerName
      , "amount" .= searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerAmount
      , "unit" .= searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerUnit
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
  :: SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
mkSearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner =
  SearchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInner
  { searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerAmount = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionFlavonoidsInnerUnit = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
-- | SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
data SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner = SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
  { searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerName :: !(Maybe Text) -- ^ "name"
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerAmount :: !(Maybe Int) -- ^ "amount"
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerUnit :: !(Maybe Text) -- ^ "unit"
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerId :: !(Maybe Int) -- ^ "id"
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrients :: !(Maybe [SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner]) -- ^ "nutrients"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
      <$> (o .:? "name")
      <*> (o .:? "amount")
      <*> (o .:? "unit")
      <*> (o .:? "id")
      <*> (o .:? "nutrients")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner where
  toJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner {..} =
   _omitNulls
      [ "name" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerName
      , "amount" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerAmount
      , "unit" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerUnit
      , "id" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerId
      , "nutrients" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrients
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
  :: SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
mkSearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner =
  SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInner
  { searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerAmount = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerUnit = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerId = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrients = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
-- | SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
data SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner = SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
  { searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerName :: !(Maybe Text) -- ^ "name"
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerPercentOfDailyNeeds :: !(Maybe Double) -- ^ "percent_of_daily_needs"
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerAmount :: !(Maybe Int) -- ^ "amount"
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerUnit :: !(Maybe Text) -- ^ "unit"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
      <$> (o .:? "name")
      <*> (o .:? "percent_of_daily_needs")
      <*> (o .:? "amount")
      <*> (o .:? "unit")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner where
  toJSON SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner {..} =
   _omitNulls
      [ "name" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerName
      , "percent_of_daily_needs" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerPercentOfDailyNeeds
      , "amount" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerAmount
      , "unit" .= searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerUnit
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
  :: SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
mkSearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner =
  SearchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInner
  { searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerPercentOfDailyNeeds = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerAmount = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionIngredientBreakdownInnerNutrientsInnerUnit = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
-- | SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
data SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner = SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
  { searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerName :: !(Maybe Text) -- ^ "name"
  , searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerPercentOfDailyNeeds :: !(Maybe Double) -- ^ "percent_of_daily_needs"
  , searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerAmount :: !(Maybe Double) -- ^ "amount"
  , searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerUnit :: !(Maybe Text) -- ^ "unit"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
      <$> (o .:? "name")
      <*> (o .:? "percent_of_daily_needs")
      <*> (o .:? "amount")
      <*> (o .:? "unit")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner where
  toJSON SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner {..} =
   _omitNulls
      [ "name" .= searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerName
      , "percent_of_daily_needs" .= searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerPercentOfDailyNeeds
      , "amount" .= searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerAmount
      , "unit" .= searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerUnit
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
  :: SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
mkSearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner =
  SearchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInner
  { searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerName = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerPercentOfDailyNeeds = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerAmount = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionNutrientsInnerUnit = Nothing
  }

-- ** SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
-- | SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
data SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing = SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
  { searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServingAmount :: !(Maybe Int) -- ^ "amount"
  , searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServingUnit :: !(Maybe Text) -- ^ "unit"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
instance A.FromJSON SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing where
  parseJSON = A.withObject "SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing" $ \o ->
    SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
      <$> (o .:? "amount")
      <*> (o .:? "unit")

-- | ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
instance A.ToJSON SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing where
  toJSON SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing {..} =
   _omitNulls
      [ "amount" .= searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServingAmount
      , "unit" .= searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServingUnit
      ]


-- | Construct a value of type 'SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing' (by applying it's required fields, if any)
mkSearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
  :: SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
mkSearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing =
  SearchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServing
  { searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServingAmount = Nothing
  , searchDrinksAPI200ResponseDrinksInnerNutritionWeightPerServingUnit = Nothing
  }

-- ** SearchGifsAPI200Response
-- | SearchGifsAPI200Response
data SearchGifsAPI200Response = SearchGifsAPI200Response
  { searchGifsAPI200ResponseImages :: !(Maybe [SearchGifsAPI200ResponseImagesInner]) -- ^ "images"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchGifsAPI200Response
instance A.FromJSON SearchGifsAPI200Response where
  parseJSON = A.withObject "SearchGifsAPI200Response" $ \o ->
    SearchGifsAPI200Response
      <$> (o .:? "images")

-- | ToJSON SearchGifsAPI200Response
instance A.ToJSON SearchGifsAPI200Response where
  toJSON SearchGifsAPI200Response {..} =
   _omitNulls
      [ "images" .= searchGifsAPI200ResponseImages
      ]


-- | Construct a value of type 'SearchGifsAPI200Response' (by applying it's required fields, if any)
mkSearchGifsAPI200Response
  :: SearchGifsAPI200Response
mkSearchGifsAPI200Response =
  SearchGifsAPI200Response
  { searchGifsAPI200ResponseImages = Nothing
  }

-- ** SearchGifsAPI200ResponseImagesInner
-- | SearchGifsAPI200ResponseImagesInner
data SearchGifsAPI200ResponseImagesInner = SearchGifsAPI200ResponseImagesInner
  { searchGifsAPI200ResponseImagesInnerWidth :: !(Maybe Int) -- ^ "width"
  , searchGifsAPI200ResponseImagesInnerUrl :: !(Maybe Text) -- ^ "url"
  , searchGifsAPI200ResponseImagesInnerHeight :: !(Maybe Int) -- ^ "height"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchGifsAPI200ResponseImagesInner
instance A.FromJSON SearchGifsAPI200ResponseImagesInner where
  parseJSON = A.withObject "SearchGifsAPI200ResponseImagesInner" $ \o ->
    SearchGifsAPI200ResponseImagesInner
      <$> (o .:? "width")
      <*> (o .:? "url")
      <*> (o .:? "height")

-- | ToJSON SearchGifsAPI200ResponseImagesInner
instance A.ToJSON SearchGifsAPI200ResponseImagesInner where
  toJSON SearchGifsAPI200ResponseImagesInner {..} =
   _omitNulls
      [ "width" .= searchGifsAPI200ResponseImagesInnerWidth
      , "url" .= searchGifsAPI200ResponseImagesInnerUrl
      , "height" .= searchGifsAPI200ResponseImagesInnerHeight
      ]


-- | Construct a value of type 'SearchGifsAPI200ResponseImagesInner' (by applying it's required fields, if any)
mkSearchGifsAPI200ResponseImagesInner
  :: SearchGifsAPI200ResponseImagesInner
mkSearchGifsAPI200ResponseImagesInner =
  SearchGifsAPI200ResponseImagesInner
  { searchGifsAPI200ResponseImagesInnerWidth = Nothing
  , searchGifsAPI200ResponseImagesInnerUrl = Nothing
  , searchGifsAPI200ResponseImagesInnerHeight = Nothing
  }

-- ** SearchIconsAPI200Response
-- | SearchIconsAPI200Response
data SearchIconsAPI200Response = SearchIconsAPI200Response
  { searchIconsAPI200ResponseIcons :: !(Maybe [SearchRoyaltyFreeImagesAPI200ResponseImagesInner]) -- ^ "icons"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchIconsAPI200Response
instance A.FromJSON SearchIconsAPI200Response where
  parseJSON = A.withObject "SearchIconsAPI200Response" $ \o ->
    SearchIconsAPI200Response
      <$> (o .:? "icons")

-- | ToJSON SearchIconsAPI200Response
instance A.ToJSON SearchIconsAPI200Response where
  toJSON SearchIconsAPI200Response {..} =
   _omitNulls
      [ "icons" .= searchIconsAPI200ResponseIcons
      ]


-- | Construct a value of type 'SearchIconsAPI200Response' (by applying it's required fields, if any)
mkSearchIconsAPI200Response
  :: SearchIconsAPI200Response
mkSearchIconsAPI200Response =
  SearchIconsAPI200Response
  { searchIconsAPI200ResponseIcons = Nothing
  }

-- ** SearchJokesAPI200Response
-- | SearchJokesAPI200Response
data SearchJokesAPI200Response = SearchJokesAPI200Response
  { searchJokesAPI200ResponseJokes :: !(Maybe [SearchJokesAPI200ResponseJokesInner]) -- ^ "jokes"
  , searchJokesAPI200ResponseAvailable :: !(Maybe Int) -- ^ "available"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchJokesAPI200Response
instance A.FromJSON SearchJokesAPI200Response where
  parseJSON = A.withObject "SearchJokesAPI200Response" $ \o ->
    SearchJokesAPI200Response
      <$> (o .:? "jokes")
      <*> (o .:? "available")

-- | ToJSON SearchJokesAPI200Response
instance A.ToJSON SearchJokesAPI200Response where
  toJSON SearchJokesAPI200Response {..} =
   _omitNulls
      [ "jokes" .= searchJokesAPI200ResponseJokes
      , "available" .= searchJokesAPI200ResponseAvailable
      ]


-- | Construct a value of type 'SearchJokesAPI200Response' (by applying it's required fields, if any)
mkSearchJokesAPI200Response
  :: SearchJokesAPI200Response
mkSearchJokesAPI200Response =
  SearchJokesAPI200Response
  { searchJokesAPI200ResponseJokes = Nothing
  , searchJokesAPI200ResponseAvailable = Nothing
  }

-- ** SearchJokesAPI200ResponseJokesInner
-- | SearchJokesAPI200ResponseJokesInner
data SearchJokesAPI200ResponseJokesInner = SearchJokesAPI200ResponseJokesInner
  { searchJokesAPI200ResponseJokesInnerJoke :: !(Maybe Text) -- ^ "joke"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchJokesAPI200ResponseJokesInner
instance A.FromJSON SearchJokesAPI200ResponseJokesInner where
  parseJSON = A.withObject "SearchJokesAPI200ResponseJokesInner" $ \o ->
    SearchJokesAPI200ResponseJokesInner
      <$> (o .:? "joke")

-- | ToJSON SearchJokesAPI200ResponseJokesInner
instance A.ToJSON SearchJokesAPI200ResponseJokesInner where
  toJSON SearchJokesAPI200ResponseJokesInner {..} =
   _omitNulls
      [ "joke" .= searchJokesAPI200ResponseJokesInnerJoke
      ]


-- | Construct a value of type 'SearchJokesAPI200ResponseJokesInner' (by applying it's required fields, if any)
mkSearchJokesAPI200ResponseJokesInner
  :: SearchJokesAPI200ResponseJokesInner
mkSearchJokesAPI200ResponseJokesInner =
  SearchJokesAPI200ResponseJokesInner
  { searchJokesAPI200ResponseJokesInnerJoke = Nothing
  }

-- ** SearchMemesAPI200Response
-- | SearchMemesAPI200Response
data SearchMemesAPI200Response = SearchMemesAPI200Response
  { searchMemesAPI200ResponseMemes :: !(Maybe [SearchMemesAPI200ResponseMemesInner]) -- ^ "memes"
  , searchMemesAPI200ResponseAvailable :: !(Maybe Int) -- ^ "available"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchMemesAPI200Response
instance A.FromJSON SearchMemesAPI200Response where
  parseJSON = A.withObject "SearchMemesAPI200Response" $ \o ->
    SearchMemesAPI200Response
      <$> (o .:? "memes")
      <*> (o .:? "available")

-- | ToJSON SearchMemesAPI200Response
instance A.ToJSON SearchMemesAPI200Response where
  toJSON SearchMemesAPI200Response {..} =
   _omitNulls
      [ "memes" .= searchMemesAPI200ResponseMemes
      , "available" .= searchMemesAPI200ResponseAvailable
      ]


-- | Construct a value of type 'SearchMemesAPI200Response' (by applying it's required fields, if any)
mkSearchMemesAPI200Response
  :: SearchMemesAPI200Response
mkSearchMemesAPI200Response =
  SearchMemesAPI200Response
  { searchMemesAPI200ResponseMemes = Nothing
  , searchMemesAPI200ResponseAvailable = Nothing
  }

-- ** SearchMemesAPI200ResponseMemesInner
-- | SearchMemesAPI200ResponseMemesInner
data SearchMemesAPI200ResponseMemesInner = SearchMemesAPI200ResponseMemesInner
  { searchMemesAPI200ResponseMemesInnerType :: !(Maybe Text) -- ^ "type"
  , searchMemesAPI200ResponseMemesInnerDescription :: !(Maybe Text) -- ^ "description"
  , searchMemesAPI200ResponseMemesInnerUrl :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchMemesAPI200ResponseMemesInner
instance A.FromJSON SearchMemesAPI200ResponseMemesInner where
  parseJSON = A.withObject "SearchMemesAPI200ResponseMemesInner" $ \o ->
    SearchMemesAPI200ResponseMemesInner
      <$> (o .:? "type")
      <*> (o .:? "description")
      <*> (o .:? "url")

-- | ToJSON SearchMemesAPI200ResponseMemesInner
instance A.ToJSON SearchMemesAPI200ResponseMemesInner where
  toJSON SearchMemesAPI200ResponseMemesInner {..} =
   _omitNulls
      [ "type" .= searchMemesAPI200ResponseMemesInnerType
      , "description" .= searchMemesAPI200ResponseMemesInnerDescription
      , "url" .= searchMemesAPI200ResponseMemesInnerUrl
      ]


-- | Construct a value of type 'SearchMemesAPI200ResponseMemesInner' (by applying it's required fields, if any)
mkSearchMemesAPI200ResponseMemesInner
  :: SearchMemesAPI200ResponseMemesInner
mkSearchMemesAPI200ResponseMemesInner =
  SearchMemesAPI200ResponseMemesInner
  { searchMemesAPI200ResponseMemesInnerType = Nothing
  , searchMemesAPI200ResponseMemesInnerDescription = Nothing
  , searchMemesAPI200ResponseMemesInnerUrl = Nothing
  }

-- ** SearchNewsAPI200Response
-- | SearchNewsAPI200Response
data SearchNewsAPI200Response = SearchNewsAPI200Response
  { searchNewsAPI200ResponseOffset :: !(Maybe Int) -- ^ "offset"
  , searchNewsAPI200ResponseNumber :: !(Maybe Int) -- ^ "number"
  , searchNewsAPI200ResponseAvailable :: !(Maybe Int) -- ^ "available"
  , searchNewsAPI200ResponseNews :: !(Maybe [SearchNewsAPI200ResponseNewsInner]) -- ^ "news"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchNewsAPI200Response
instance A.FromJSON SearchNewsAPI200Response where
  parseJSON = A.withObject "SearchNewsAPI200Response" $ \o ->
    SearchNewsAPI200Response
      <$> (o .:? "offset")
      <*> (o .:? "number")
      <*> (o .:? "available")
      <*> (o .:? "news")

-- | ToJSON SearchNewsAPI200Response
instance A.ToJSON SearchNewsAPI200Response where
  toJSON SearchNewsAPI200Response {..} =
   _omitNulls
      [ "offset" .= searchNewsAPI200ResponseOffset
      , "number" .= searchNewsAPI200ResponseNumber
      , "available" .= searchNewsAPI200ResponseAvailable
      , "news" .= searchNewsAPI200ResponseNews
      ]


-- | Construct a value of type 'SearchNewsAPI200Response' (by applying it's required fields, if any)
mkSearchNewsAPI200Response
  :: SearchNewsAPI200Response
mkSearchNewsAPI200Response =
  SearchNewsAPI200Response
  { searchNewsAPI200ResponseOffset = Nothing
  , searchNewsAPI200ResponseNumber = Nothing
  , searchNewsAPI200ResponseAvailable = Nothing
  , searchNewsAPI200ResponseNews = Nothing
  }

-- ** SearchNewsAPI200ResponseNewsInner
-- | SearchNewsAPI200ResponseNewsInner
data SearchNewsAPI200ResponseNewsInner = SearchNewsAPI200ResponseNewsInner
  { searchNewsAPI200ResponseNewsInnerSummary :: !(Maybe Text) -- ^ "summary"
  , searchNewsAPI200ResponseNewsInnerImage :: !(Maybe Text) -- ^ "image"
  , searchNewsAPI200ResponseNewsInnerSentiment :: !(Maybe Double) -- ^ "sentiment"
  , searchNewsAPI200ResponseNewsInnerLanguage :: !(Maybe Text) -- ^ "language"
  , searchNewsAPI200ResponseNewsInnerVideo :: !(Maybe Text) -- ^ "video"
  , searchNewsAPI200ResponseNewsInnerTitle :: !(Maybe Text) -- ^ "title"
  , searchNewsAPI200ResponseNewsInnerUrl :: !(Maybe Text) -- ^ "url"
  , searchNewsAPI200ResponseNewsInnerSourceCountry :: !(Maybe Text) -- ^ "source_country"
  , searchNewsAPI200ResponseNewsInnerId :: !(Maybe Int) -- ^ "id"
  , searchNewsAPI200ResponseNewsInnerText :: !(Maybe Text) -- ^ "text"
  , searchNewsAPI200ResponseNewsInnerCategory :: !(Maybe Text) -- ^ "category"
  , searchNewsAPI200ResponseNewsInnerPublishDate :: !(Maybe Text) -- ^ "publish_date"
  , searchNewsAPI200ResponseNewsInnerAuthors :: !(Maybe [Text]) -- ^ "authors"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchNewsAPI200ResponseNewsInner
instance A.FromJSON SearchNewsAPI200ResponseNewsInner where
  parseJSON = A.withObject "SearchNewsAPI200ResponseNewsInner" $ \o ->
    SearchNewsAPI200ResponseNewsInner
      <$> (o .:? "summary")
      <*> (o .:? "image")
      <*> (o .:? "sentiment")
      <*> (o .:? "language")
      <*> (o .:? "video")
      <*> (o .:? "title")
      <*> (o .:? "url")
      <*> (o .:? "source_country")
      <*> (o .:? "id")
      <*> (o .:? "text")
      <*> (o .:? "category")
      <*> (o .:? "publish_date")
      <*> (o .:? "authors")

-- | ToJSON SearchNewsAPI200ResponseNewsInner
instance A.ToJSON SearchNewsAPI200ResponseNewsInner where
  toJSON SearchNewsAPI200ResponseNewsInner {..} =
   _omitNulls
      [ "summary" .= searchNewsAPI200ResponseNewsInnerSummary
      , "image" .= searchNewsAPI200ResponseNewsInnerImage
      , "sentiment" .= searchNewsAPI200ResponseNewsInnerSentiment
      , "language" .= searchNewsAPI200ResponseNewsInnerLanguage
      , "video" .= searchNewsAPI200ResponseNewsInnerVideo
      , "title" .= searchNewsAPI200ResponseNewsInnerTitle
      , "url" .= searchNewsAPI200ResponseNewsInnerUrl
      , "source_country" .= searchNewsAPI200ResponseNewsInnerSourceCountry
      , "id" .= searchNewsAPI200ResponseNewsInnerId
      , "text" .= searchNewsAPI200ResponseNewsInnerText
      , "category" .= searchNewsAPI200ResponseNewsInnerCategory
      , "publish_date" .= searchNewsAPI200ResponseNewsInnerPublishDate
      , "authors" .= searchNewsAPI200ResponseNewsInnerAuthors
      ]


-- | Construct a value of type 'SearchNewsAPI200ResponseNewsInner' (by applying it's required fields, if any)
mkSearchNewsAPI200ResponseNewsInner
  :: SearchNewsAPI200ResponseNewsInner
mkSearchNewsAPI200ResponseNewsInner =
  SearchNewsAPI200ResponseNewsInner
  { searchNewsAPI200ResponseNewsInnerSummary = Nothing
  , searchNewsAPI200ResponseNewsInnerImage = Nothing
  , searchNewsAPI200ResponseNewsInnerSentiment = Nothing
  , searchNewsAPI200ResponseNewsInnerLanguage = Nothing
  , searchNewsAPI200ResponseNewsInnerVideo = Nothing
  , searchNewsAPI200ResponseNewsInnerTitle = Nothing
  , searchNewsAPI200ResponseNewsInnerUrl = Nothing
  , searchNewsAPI200ResponseNewsInnerSourceCountry = Nothing
  , searchNewsAPI200ResponseNewsInnerId = Nothing
  , searchNewsAPI200ResponseNewsInnerText = Nothing
  , searchNewsAPI200ResponseNewsInnerCategory = Nothing
  , searchNewsAPI200ResponseNewsInnerPublishDate = Nothing
  , searchNewsAPI200ResponseNewsInnerAuthors = Nothing
  }

-- ** SearchRecipesAPI200Response
-- | SearchRecipesAPI200Response
data SearchRecipesAPI200Response = SearchRecipesAPI200Response
  { searchRecipesAPI200ResponseOffset :: !(Maybe Int) -- ^ "offset"
  , searchRecipesAPI200ResponseNumber :: !(Maybe Int) -- ^ "number"
  , searchRecipesAPI200ResponseRecipes :: !(Maybe [SearchRecipesAPI200ResponseRecipesInner]) -- ^ "recipes"
  , searchRecipesAPI200ResponseTotalResults :: !(Maybe Int) -- ^ "total_results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRecipesAPI200Response
instance A.FromJSON SearchRecipesAPI200Response where
  parseJSON = A.withObject "SearchRecipesAPI200Response" $ \o ->
    SearchRecipesAPI200Response
      <$> (o .:? "offset")
      <*> (o .:? "number")
      <*> (o .:? "recipes")
      <*> (o .:? "total_results")

-- | ToJSON SearchRecipesAPI200Response
instance A.ToJSON SearchRecipesAPI200Response where
  toJSON SearchRecipesAPI200Response {..} =
   _omitNulls
      [ "offset" .= searchRecipesAPI200ResponseOffset
      , "number" .= searchRecipesAPI200ResponseNumber
      , "recipes" .= searchRecipesAPI200ResponseRecipes
      , "total_results" .= searchRecipesAPI200ResponseTotalResults
      ]


-- | Construct a value of type 'SearchRecipesAPI200Response' (by applying it's required fields, if any)
mkSearchRecipesAPI200Response
  :: SearchRecipesAPI200Response
mkSearchRecipesAPI200Response =
  SearchRecipesAPI200Response
  { searchRecipesAPI200ResponseOffset = Nothing
  , searchRecipesAPI200ResponseNumber = Nothing
  , searchRecipesAPI200ResponseRecipes = Nothing
  , searchRecipesAPI200ResponseTotalResults = Nothing
  }

-- ** SearchRecipesAPI200ResponseRecipesInner
-- | SearchRecipesAPI200ResponseRecipesInner
data SearchRecipesAPI200ResponseRecipesInner = SearchRecipesAPI200ResponseRecipesInner
  { searchRecipesAPI200ResponseRecipesInnerImages :: !(Maybe [Text]) -- ^ "images"
  , searchRecipesAPI200ResponseRecipesInnerNutrition :: !(Maybe SearchRecipesAPI200ResponseRecipesInnerNutrition) -- ^ "nutrition"
  , searchRecipesAPI200ResponseRecipesInnerId :: !(Maybe Int) -- ^ "id"
  , searchRecipesAPI200ResponseRecipesInnerTitle :: !(Maybe Text) -- ^ "title"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRecipesAPI200ResponseRecipesInner
instance A.FromJSON SearchRecipesAPI200ResponseRecipesInner where
  parseJSON = A.withObject "SearchRecipesAPI200ResponseRecipesInner" $ \o ->
    SearchRecipesAPI200ResponseRecipesInner
      <$> (o .:? "images")
      <*> (o .:? "nutrition")
      <*> (o .:? "id")
      <*> (o .:? "title")

-- | ToJSON SearchRecipesAPI200ResponseRecipesInner
instance A.ToJSON SearchRecipesAPI200ResponseRecipesInner where
  toJSON SearchRecipesAPI200ResponseRecipesInner {..} =
   _omitNulls
      [ "images" .= searchRecipesAPI200ResponseRecipesInnerImages
      , "nutrition" .= searchRecipesAPI200ResponseRecipesInnerNutrition
      , "id" .= searchRecipesAPI200ResponseRecipesInnerId
      , "title" .= searchRecipesAPI200ResponseRecipesInnerTitle
      ]


-- | Construct a value of type 'SearchRecipesAPI200ResponseRecipesInner' (by applying it's required fields, if any)
mkSearchRecipesAPI200ResponseRecipesInner
  :: SearchRecipesAPI200ResponseRecipesInner
mkSearchRecipesAPI200ResponseRecipesInner =
  SearchRecipesAPI200ResponseRecipesInner
  { searchRecipesAPI200ResponseRecipesInnerImages = Nothing
  , searchRecipesAPI200ResponseRecipesInnerNutrition = Nothing
  , searchRecipesAPI200ResponseRecipesInnerId = Nothing
  , searchRecipesAPI200ResponseRecipesInnerTitle = Nothing
  }

-- ** SearchRecipesAPI200ResponseRecipesInnerNutrition
-- | SearchRecipesAPI200ResponseRecipesInnerNutrition
data SearchRecipesAPI200ResponseRecipesInnerNutrition = SearchRecipesAPI200ResponseRecipesInnerNutrition
  { searchRecipesAPI200ResponseRecipesInnerNutritionNutrients :: !(Maybe [SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner]) -- ^ "nutrients"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRecipesAPI200ResponseRecipesInnerNutrition
instance A.FromJSON SearchRecipesAPI200ResponseRecipesInnerNutrition where
  parseJSON = A.withObject "SearchRecipesAPI200ResponseRecipesInnerNutrition" $ \o ->
    SearchRecipesAPI200ResponseRecipesInnerNutrition
      <$> (o .:? "nutrients")

-- | ToJSON SearchRecipesAPI200ResponseRecipesInnerNutrition
instance A.ToJSON SearchRecipesAPI200ResponseRecipesInnerNutrition where
  toJSON SearchRecipesAPI200ResponseRecipesInnerNutrition {..} =
   _omitNulls
      [ "nutrients" .= searchRecipesAPI200ResponseRecipesInnerNutritionNutrients
      ]


-- | Construct a value of type 'SearchRecipesAPI200ResponseRecipesInnerNutrition' (by applying it's required fields, if any)
mkSearchRecipesAPI200ResponseRecipesInnerNutrition
  :: SearchRecipesAPI200ResponseRecipesInnerNutrition
mkSearchRecipesAPI200ResponseRecipesInnerNutrition =
  SearchRecipesAPI200ResponseRecipesInnerNutrition
  { searchRecipesAPI200ResponseRecipesInnerNutritionNutrients = Nothing
  }

-- ** SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
-- | SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
data SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner = SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
  { searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerName :: !(Maybe Text) -- ^ "name"
  , searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerAmount :: !(Maybe Double) -- ^ "amount"
  , searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerUnit :: !(Maybe Text) -- ^ "unit"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
instance A.FromJSON SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner where
  parseJSON = A.withObject "SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner" $ \o ->
    SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
      <$> (o .:? "name")
      <*> (o .:? "amount")
      <*> (o .:? "unit")

-- | ToJSON SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
instance A.ToJSON SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner where
  toJSON SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner {..} =
   _omitNulls
      [ "name" .= searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerName
      , "amount" .= searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerAmount
      , "unit" .= searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerUnit
      ]


-- | Construct a value of type 'SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner' (by applying it's required fields, if any)
mkSearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
  :: SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
mkSearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner =
  SearchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInner
  { searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerName = Nothing
  , searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerAmount = Nothing
  , searchRecipesAPI200ResponseRecipesInnerNutritionNutrientsInnerUnit = Nothing
  }

-- ** SearchRestaurantsAPI200Response
-- | SearchRestaurantsAPI200Response
data SearchRestaurantsAPI200Response = SearchRestaurantsAPI200Response
  { searchRestaurantsAPI200ResponseRestaurants :: !(Maybe [SearchRestaurantsAPI200ResponseRestaurantsInner]) -- ^ "restaurants"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRestaurantsAPI200Response
instance A.FromJSON SearchRestaurantsAPI200Response where
  parseJSON = A.withObject "SearchRestaurantsAPI200Response" $ \o ->
    SearchRestaurantsAPI200Response
      <$> (o .:? "restaurants")

-- | ToJSON SearchRestaurantsAPI200Response
instance A.ToJSON SearchRestaurantsAPI200Response where
  toJSON SearchRestaurantsAPI200Response {..} =
   _omitNulls
      [ "restaurants" .= searchRestaurantsAPI200ResponseRestaurants
      ]


-- | Construct a value of type 'SearchRestaurantsAPI200Response' (by applying it's required fields, if any)
mkSearchRestaurantsAPI200Response
  :: SearchRestaurantsAPI200Response
mkSearchRestaurantsAPI200Response =
  SearchRestaurantsAPI200Response
  { searchRestaurantsAPI200ResponseRestaurants = Nothing
  }

-- ** SearchRestaurantsAPI200ResponseRestaurantsInner
-- | SearchRestaurantsAPI200ResponseRestaurantsInner
data SearchRestaurantsAPI200ResponseRestaurantsInner = SearchRestaurantsAPI200ResponseRestaurantsInner
  { searchRestaurantsAPI200ResponseRestaurantsInnerOffersThirdPartyDelivery :: !(Maybe Bool) -- ^ "offers_third_party_delivery"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddress :: !(Maybe SearchRestaurantsAPI200ResponseRestaurantsInnerAddress) -- ^ "address"
  , searchRestaurantsAPI200ResponseRestaurantsInnerSupportsUpcCodes :: !(Maybe Bool) -- ^ "supports_upc_codes"
  , searchRestaurantsAPI200ResponseRestaurantsInnerIsOpen :: !(Maybe Bool) -- ^ "is_open"
  , searchRestaurantsAPI200ResponseRestaurantsInnerDescription :: !(Maybe Text) -- ^ "description"
  , searchRestaurantsAPI200ResponseRestaurantsInnerWeightedRatingValue :: !(Maybe Int) -- ^ "weighted_rating_value"
  , searchRestaurantsAPI200ResponseRestaurantsInnerType :: !(Maybe Text) -- ^ "type"
  , searchRestaurantsAPI200ResponseRestaurantsInnerOffersFirstPartyDelivery :: !(Maybe Bool) -- ^ "offers_first_party_delivery"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAggregatedRatingCount :: !(Maybe Int) -- ^ "aggregated_rating_count"
  , searchRestaurantsAPI200ResponseRestaurantsInnerPickupEnabled :: !(Maybe Bool) -- ^ "pickup_enabled"
  , searchRestaurantsAPI200ResponseRestaurantsInnerCuisines :: !(Maybe [Text]) -- ^ "cuisines"
  , searchRestaurantsAPI200ResponseRestaurantsInnerMiles :: !(Maybe Double) -- ^ "miles"
  , searchRestaurantsAPI200ResponseRestaurantsInnerDollarSigns :: !(Maybe Int) -- ^ "dollar_signs"
  , searchRestaurantsAPI200ResponseRestaurantsInnerDeliveryEnabled :: !(Maybe Bool) -- ^ "delivery_enabled"
  , searchRestaurantsAPI200ResponseRestaurantsInnerName :: !(Maybe Text) -- ^ "name"
  , searchRestaurantsAPI200ResponseRestaurantsInnerPhoneNumber :: !(Maybe Double) -- ^ "phone_number"
  , searchRestaurantsAPI200ResponseRestaurantsInnerId :: !(Maybe Text) -- ^ "_id"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHours :: !(Maybe SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours) -- ^ "local_hours"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRestaurantsAPI200ResponseRestaurantsInner
instance A.FromJSON SearchRestaurantsAPI200ResponseRestaurantsInner where
  parseJSON = A.withObject "SearchRestaurantsAPI200ResponseRestaurantsInner" $ \o ->
    SearchRestaurantsAPI200ResponseRestaurantsInner
      <$> (o .:? "offers_third_party_delivery")
      <*> (o .:? "address")
      <*> (o .:? "supports_upc_codes")
      <*> (o .:? "is_open")
      <*> (o .:? "description")
      <*> (o .:? "weighted_rating_value")
      <*> (o .:? "type")
      <*> (o .:? "offers_first_party_delivery")
      <*> (o .:? "aggregated_rating_count")
      <*> (o .:? "pickup_enabled")
      <*> (o .:? "cuisines")
      <*> (o .:? "miles")
      <*> (o .:? "dollar_signs")
      <*> (o .:? "delivery_enabled")
      <*> (o .:? "name")
      <*> (o .:? "phone_number")
      <*> (o .:? "_id")
      <*> (o .:? "local_hours")

-- | ToJSON SearchRestaurantsAPI200ResponseRestaurantsInner
instance A.ToJSON SearchRestaurantsAPI200ResponseRestaurantsInner where
  toJSON SearchRestaurantsAPI200ResponseRestaurantsInner {..} =
   _omitNulls
      [ "offers_third_party_delivery" .= searchRestaurantsAPI200ResponseRestaurantsInnerOffersThirdPartyDelivery
      , "address" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddress
      , "supports_upc_codes" .= searchRestaurantsAPI200ResponseRestaurantsInnerSupportsUpcCodes
      , "is_open" .= searchRestaurantsAPI200ResponseRestaurantsInnerIsOpen
      , "description" .= searchRestaurantsAPI200ResponseRestaurantsInnerDescription
      , "weighted_rating_value" .= searchRestaurantsAPI200ResponseRestaurantsInnerWeightedRatingValue
      , "type" .= searchRestaurantsAPI200ResponseRestaurantsInnerType
      , "offers_first_party_delivery" .= searchRestaurantsAPI200ResponseRestaurantsInnerOffersFirstPartyDelivery
      , "aggregated_rating_count" .= searchRestaurantsAPI200ResponseRestaurantsInnerAggregatedRatingCount
      , "pickup_enabled" .= searchRestaurantsAPI200ResponseRestaurantsInnerPickupEnabled
      , "cuisines" .= searchRestaurantsAPI200ResponseRestaurantsInnerCuisines
      , "miles" .= searchRestaurantsAPI200ResponseRestaurantsInnerMiles
      , "dollar_signs" .= searchRestaurantsAPI200ResponseRestaurantsInnerDollarSigns
      , "delivery_enabled" .= searchRestaurantsAPI200ResponseRestaurantsInnerDeliveryEnabled
      , "name" .= searchRestaurantsAPI200ResponseRestaurantsInnerName
      , "phone_number" .= searchRestaurantsAPI200ResponseRestaurantsInnerPhoneNumber
      , "_id" .= searchRestaurantsAPI200ResponseRestaurantsInnerId
      , "local_hours" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
      ]


-- | Construct a value of type 'SearchRestaurantsAPI200ResponseRestaurantsInner' (by applying it's required fields, if any)
mkSearchRestaurantsAPI200ResponseRestaurantsInner
  :: SearchRestaurantsAPI200ResponseRestaurantsInner
mkSearchRestaurantsAPI200ResponseRestaurantsInner =
  SearchRestaurantsAPI200ResponseRestaurantsInner
  { searchRestaurantsAPI200ResponseRestaurantsInnerOffersThirdPartyDelivery = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddress = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerSupportsUpcCodes = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerIsOpen = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerDescription = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerWeightedRatingValue = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerType = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerOffersFirstPartyDelivery = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAggregatedRatingCount = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerPickupEnabled = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerCuisines = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerMiles = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerDollarSigns = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerDeliveryEnabled = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerName = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerPhoneNumber = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerId = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHours = Nothing
  }

-- ** SearchRestaurantsAPI200ResponseRestaurantsInnerAddress
-- | SearchRestaurantsAPI200ResponseRestaurantsInnerAddress
data SearchRestaurantsAPI200ResponseRestaurantsInnerAddress = SearchRestaurantsAPI200ResponseRestaurantsInnerAddress
  { searchRestaurantsAPI200ResponseRestaurantsInnerAddressZipcode :: !(Maybe Text) -- ^ "zipcode"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressCountry :: !(Maybe Text) -- ^ "country"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressCity :: !(Maybe Text) -- ^ "city"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressLatitude :: !(Maybe Double) -- ^ "latitude"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressLon :: !(Maybe Double) -- ^ "lon"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressStreetAddr2 :: !(Maybe Text) -- ^ "street_addr_2"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressState :: !(Maybe Text) -- ^ "state"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressStreetAddr :: !(Maybe Text) -- ^ "street_addr"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressLat :: !(Maybe Double) -- ^ "lat"
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressLongitude :: !(Maybe Double) -- ^ "longitude"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRestaurantsAPI200ResponseRestaurantsInnerAddress
instance A.FromJSON SearchRestaurantsAPI200ResponseRestaurantsInnerAddress where
  parseJSON = A.withObject "SearchRestaurantsAPI200ResponseRestaurantsInnerAddress" $ \o ->
    SearchRestaurantsAPI200ResponseRestaurantsInnerAddress
      <$> (o .:? "zipcode")
      <*> (o .:? "country")
      <*> (o .:? "city")
      <*> (o .:? "latitude")
      <*> (o .:? "lon")
      <*> (o .:? "street_addr_2")
      <*> (o .:? "state")
      <*> (o .:? "street_addr")
      <*> (o .:? "lat")
      <*> (o .:? "longitude")

-- | ToJSON SearchRestaurantsAPI200ResponseRestaurantsInnerAddress
instance A.ToJSON SearchRestaurantsAPI200ResponseRestaurantsInnerAddress where
  toJSON SearchRestaurantsAPI200ResponseRestaurantsInnerAddress {..} =
   _omitNulls
      [ "zipcode" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressZipcode
      , "country" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressCountry
      , "city" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressCity
      , "latitude" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressLatitude
      , "lon" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressLon
      , "street_addr_2" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressStreetAddr2
      , "state" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressState
      , "street_addr" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressStreetAddr
      , "lat" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressLat
      , "longitude" .= searchRestaurantsAPI200ResponseRestaurantsInnerAddressLongitude
      ]


-- | Construct a value of type 'SearchRestaurantsAPI200ResponseRestaurantsInnerAddress' (by applying it's required fields, if any)
mkSearchRestaurantsAPI200ResponseRestaurantsInnerAddress
  :: SearchRestaurantsAPI200ResponseRestaurantsInnerAddress
mkSearchRestaurantsAPI200ResponseRestaurantsInnerAddress =
  SearchRestaurantsAPI200ResponseRestaurantsInnerAddress
  { searchRestaurantsAPI200ResponseRestaurantsInnerAddressZipcode = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressCountry = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressCity = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressLatitude = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressLon = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressStreetAddr2 = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressState = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressStreetAddr = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressLat = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerAddressLongitude = Nothing
  }

-- ** SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
-- | SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
data SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours = SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
  { searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational :: !(Maybe SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational) -- ^ "operational"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursDelivery :: !(Maybe SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational) -- ^ "delivery"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursPickup :: !(Maybe SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational) -- ^ "pickup"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursDineIn :: !(Maybe SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational) -- ^ "dine_in"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
instance A.FromJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours where
  parseJSON = A.withObject "SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours" $ \o ->
    SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
      <$> (o .:? "operational")
      <*> (o .:? "delivery")
      <*> (o .:? "pickup")
      <*> (o .:? "dine_in")

-- | ToJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
instance A.ToJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours where
  toJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours {..} =
   _omitNulls
      [ "operational" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
      , "delivery" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursDelivery
      , "pickup" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursPickup
      , "dine_in" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursDineIn
      ]


-- | Construct a value of type 'SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours' (by applying it's required fields, if any)
mkSearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
  :: SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
mkSearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours =
  SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
  { searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursDelivery = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursPickup = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursDineIn = Nothing
  }

-- ** SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
-- | SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
data SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational = SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
  { searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalSunday :: !(Maybe Text) -- ^ "sunday"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalSaturday :: !(Maybe Text) -- ^ "saturday"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalTuesday :: !(Maybe Text) -- ^ "tuesday"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalThursday :: !(Maybe Text) -- ^ "thursday"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalFriday :: !(Maybe Text) -- ^ "friday"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalWednesday :: !(Maybe Text) -- ^ "wednesday"
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalMonday :: !(Maybe Text) -- ^ "monday"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
instance A.FromJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational where
  parseJSON = A.withObject "SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational" $ \o ->
    SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
      <$> (o .:? "sunday")
      <*> (o .:? "saturday")
      <*> (o .:? "tuesday")
      <*> (o .:? "thursday")
      <*> (o .:? "friday")
      <*> (o .:? "wednesday")
      <*> (o .:? "monday")

-- | ToJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
instance A.ToJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational where
  toJSON SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational {..} =
   _omitNulls
      [ "sunday" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalSunday
      , "saturday" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalSaturday
      , "tuesday" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalTuesday
      , "thursday" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalThursday
      , "friday" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalFriday
      , "wednesday" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalWednesday
      , "monday" .= searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalMonday
      ]


-- | Construct a value of type 'SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational' (by applying it's required fields, if any)
mkSearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
  :: SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
mkSearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational =
  SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
  { searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalSunday = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalSaturday = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalTuesday = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalThursday = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalFriday = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalWednesday = Nothing
  , searchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperationalMonday = Nothing
  }

-- ** SearchRoyaltyFreeImagesAPI200Response
-- | SearchRoyaltyFreeImagesAPI200Response
data SearchRoyaltyFreeImagesAPI200Response = SearchRoyaltyFreeImagesAPI200Response
  { searchRoyaltyFreeImagesAPI200ResponseImages :: !(Maybe [SearchRoyaltyFreeImagesAPI200ResponseImagesInner]) -- ^ "images"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRoyaltyFreeImagesAPI200Response
instance A.FromJSON SearchRoyaltyFreeImagesAPI200Response where
  parseJSON = A.withObject "SearchRoyaltyFreeImagesAPI200Response" $ \o ->
    SearchRoyaltyFreeImagesAPI200Response
      <$> (o .:? "images")

-- | ToJSON SearchRoyaltyFreeImagesAPI200Response
instance A.ToJSON SearchRoyaltyFreeImagesAPI200Response where
  toJSON SearchRoyaltyFreeImagesAPI200Response {..} =
   _omitNulls
      [ "images" .= searchRoyaltyFreeImagesAPI200ResponseImages
      ]


-- | Construct a value of type 'SearchRoyaltyFreeImagesAPI200Response' (by applying it's required fields, if any)
mkSearchRoyaltyFreeImagesAPI200Response
  :: SearchRoyaltyFreeImagesAPI200Response
mkSearchRoyaltyFreeImagesAPI200Response =
  SearchRoyaltyFreeImagesAPI200Response
  { searchRoyaltyFreeImagesAPI200ResponseImages = Nothing
  }

-- ** SearchRoyaltyFreeImagesAPI200ResponseImagesInner
-- | SearchRoyaltyFreeImagesAPI200ResponseImagesInner
data SearchRoyaltyFreeImagesAPI200ResponseImagesInner = SearchRoyaltyFreeImagesAPI200ResponseImagesInner
  { searchRoyaltyFreeImagesAPI200ResponseImagesInnerWidth :: !(Maybe Int) -- ^ "width"
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense :: !(Maybe SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense) -- ^ "license"
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerThumbnail :: !(Maybe Text) -- ^ "thumbnail"
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerId :: !(Maybe Text) -- ^ "id"
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerUrl :: !(Maybe Text) -- ^ "url"
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerHeight :: !(Maybe Int) -- ^ "height"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInner
instance A.FromJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInner where
  parseJSON = A.withObject "SearchRoyaltyFreeImagesAPI200ResponseImagesInner" $ \o ->
    SearchRoyaltyFreeImagesAPI200ResponseImagesInner
      <$> (o .:? "width")
      <*> (o .:? "license")
      <*> (o .:? "thumbnail")
      <*> (o .:? "id")
      <*> (o .:? "url")
      <*> (o .:? "height")

-- | ToJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInner
instance A.ToJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInner where
  toJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInner {..} =
   _omitNulls
      [ "width" .= searchRoyaltyFreeImagesAPI200ResponseImagesInnerWidth
      , "license" .= searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
      , "thumbnail" .= searchRoyaltyFreeImagesAPI200ResponseImagesInnerThumbnail
      , "id" .= searchRoyaltyFreeImagesAPI200ResponseImagesInnerId
      , "url" .= searchRoyaltyFreeImagesAPI200ResponseImagesInnerUrl
      , "height" .= searchRoyaltyFreeImagesAPI200ResponseImagesInnerHeight
      ]


-- | Construct a value of type 'SearchRoyaltyFreeImagesAPI200ResponseImagesInner' (by applying it's required fields, if any)
mkSearchRoyaltyFreeImagesAPI200ResponseImagesInner
  :: SearchRoyaltyFreeImagesAPI200ResponseImagesInner
mkSearchRoyaltyFreeImagesAPI200ResponseImagesInner =
  SearchRoyaltyFreeImagesAPI200ResponseImagesInner
  { searchRoyaltyFreeImagesAPI200ResponseImagesInnerWidth = Nothing
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense = Nothing
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerThumbnail = Nothing
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerId = Nothing
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerUrl = Nothing
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerHeight = Nothing
  }

-- ** SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
-- | SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
data SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense = SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
  { searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicenseName :: !(Maybe Text) -- ^ "name"
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicenseLink :: !(Maybe Text) -- ^ "link"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
instance A.FromJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense where
  parseJSON = A.withObject "SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense" $ \o ->
    SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
      <$> (o .:? "name")
      <*> (o .:? "link")

-- | ToJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
instance A.ToJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense where
  toJSON SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense {..} =
   _omitNulls
      [ "name" .= searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicenseName
      , "link" .= searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicenseLink
      ]


-- | Construct a value of type 'SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense' (by applying it's required fields, if any)
mkSearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
  :: SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
mkSearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense =
  SearchRoyaltyFreeImagesAPI200ResponseImagesInnerLicense
  { searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicenseName = Nothing
  , searchRoyaltyFreeImagesAPI200ResponseImagesInnerLicenseLink = Nothing
  }

-- ** SearchWebAPI200Response
-- | SearchWebAPI200Response
data SearchWebAPI200Response = SearchWebAPI200Response
  { searchWebAPI200ResponseResults :: !(Maybe [SearchWebAPI200ResponseResultsInner]) -- ^ "results"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchWebAPI200Response
instance A.FromJSON SearchWebAPI200Response where
  parseJSON = A.withObject "SearchWebAPI200Response" $ \o ->
    SearchWebAPI200Response
      <$> (o .:? "results")

-- | ToJSON SearchWebAPI200Response
instance A.ToJSON SearchWebAPI200Response where
  toJSON SearchWebAPI200Response {..} =
   _omitNulls
      [ "results" .= searchWebAPI200ResponseResults
      ]


-- | Construct a value of type 'SearchWebAPI200Response' (by applying it's required fields, if any)
mkSearchWebAPI200Response
  :: SearchWebAPI200Response
mkSearchWebAPI200Response =
  SearchWebAPI200Response
  { searchWebAPI200ResponseResults = Nothing
  }

-- ** SearchWebAPI200ResponseResultsInner
-- | SearchWebAPI200ResponseResultsInner
data SearchWebAPI200ResponseResultsInner = SearchWebAPI200ResponseResultsInner
  { searchWebAPI200ResponseResultsInnerTitle :: !(Maybe Text) -- ^ "title"
  , searchWebAPI200ResponseResultsInnerSummary :: !(Maybe Text) -- ^ "summary"
  , searchWebAPI200ResponseResultsInnerUrl :: !(Maybe Text) -- ^ "url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SearchWebAPI200ResponseResultsInner
instance A.FromJSON SearchWebAPI200ResponseResultsInner where
  parseJSON = A.withObject "SearchWebAPI200ResponseResultsInner" $ \o ->
    SearchWebAPI200ResponseResultsInner
      <$> (o .:? "title")
      <*> (o .:? "summary")
      <*> (o .:? "url")

-- | ToJSON SearchWebAPI200ResponseResultsInner
instance A.ToJSON SearchWebAPI200ResponseResultsInner where
  toJSON SearchWebAPI200ResponseResultsInner {..} =
   _omitNulls
      [ "title" .= searchWebAPI200ResponseResultsInnerTitle
      , "summary" .= searchWebAPI200ResponseResultsInnerSummary
      , "url" .= searchWebAPI200ResponseResultsInnerUrl
      ]


-- | Construct a value of type 'SearchWebAPI200ResponseResultsInner' (by applying it's required fields, if any)
mkSearchWebAPI200ResponseResultsInner
  :: SearchWebAPI200ResponseResultsInner
mkSearchWebAPI200ResponseResultsInner =
  SearchWebAPI200ResponseResultsInner
  { searchWebAPI200ResponseResultsInnerTitle = Nothing
  , searchWebAPI200ResponseResultsInnerSummary = Nothing
  , searchWebAPI200ResponseResultsInnerUrl = Nothing
  }

-- ** SingularizeWordAPI200Response
-- | SingularizeWordAPI200Response
data SingularizeWordAPI200Response = SingularizeWordAPI200Response
  { singularizeWordAPI200ResponseOriginal :: !(Maybe Text) -- ^ "original"
  , singularizeWordAPI200ResponseSingular :: !(Maybe Text) -- ^ "singular"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON SingularizeWordAPI200Response
instance A.FromJSON SingularizeWordAPI200Response where
  parseJSON = A.withObject "SingularizeWordAPI200Response" $ \o ->
    SingularizeWordAPI200Response
      <$> (o .:? "original")
      <*> (o .:? "singular")

-- | ToJSON SingularizeWordAPI200Response
instance A.ToJSON SingularizeWordAPI200Response where
  toJSON SingularizeWordAPI200Response {..} =
   _omitNulls
      [ "original" .= singularizeWordAPI200ResponseOriginal
      , "singular" .= singularizeWordAPI200ResponseSingular
      ]


-- | Construct a value of type 'SingularizeWordAPI200Response' (by applying it's required fields, if any)
mkSingularizeWordAPI200Response
  :: SingularizeWordAPI200Response
mkSingularizeWordAPI200Response =
  SingularizeWordAPI200Response
  { singularizeWordAPI200ResponseOriginal = Nothing
  , singularizeWordAPI200ResponseSingular = Nothing
  }

-- ** StemTextAPI200Response
-- | StemTextAPI200Response
data StemTextAPI200Response = StemTextAPI200Response
  { stemTextAPI200ResponseOriginal :: !(Maybe Text) -- ^ "original"
  , stemTextAPI200ResponseStemmed :: !(Maybe Text) -- ^ "stemmed"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON StemTextAPI200Response
instance A.FromJSON StemTextAPI200Response where
  parseJSON = A.withObject "StemTextAPI200Response" $ \o ->
    StemTextAPI200Response
      <$> (o .:? "original")
      <*> (o .:? "stemmed")

-- | ToJSON StemTextAPI200Response
instance A.ToJSON StemTextAPI200Response where
  toJSON StemTextAPI200Response {..} =
   _omitNulls
      [ "original" .= stemTextAPI200ResponseOriginal
      , "stemmed" .= stemTextAPI200ResponseStemmed
      ]


-- | Construct a value of type 'StemTextAPI200Response' (by applying it's required fields, if any)
mkStemTextAPI200Response
  :: StemTextAPI200Response
mkStemTextAPI200Response =
  StemTextAPI200Response
  { stemTextAPI200ResponseOriginal = Nothing
  , stemTextAPI200ResponseStemmed = Nothing
  }

-- ** StoreKeyValueGETAPI200Response
-- | StoreKeyValueGETAPI200Response
data StoreKeyValueGETAPI200Response = StoreKeyValueGETAPI200Response
  { storeKeyValueGETAPI200ResponseStatus :: !(Maybe Text) -- ^ "status"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON StoreKeyValueGETAPI200Response
instance A.FromJSON StoreKeyValueGETAPI200Response where
  parseJSON = A.withObject "StoreKeyValueGETAPI200Response" $ \o ->
    StoreKeyValueGETAPI200Response
      <$> (o .:? "status")

-- | ToJSON StoreKeyValueGETAPI200Response
instance A.ToJSON StoreKeyValueGETAPI200Response where
  toJSON StoreKeyValueGETAPI200Response {..} =
   _omitNulls
      [ "status" .= storeKeyValueGETAPI200ResponseStatus
      ]


-- | Construct a value of type 'StoreKeyValueGETAPI200Response' (by applying it's required fields, if any)
mkStoreKeyValueGETAPI200Response
  :: StoreKeyValueGETAPI200Response
mkStoreKeyValueGETAPI200Response =
  StoreKeyValueGETAPI200Response
  { storeKeyValueGETAPI200ResponseStatus = Nothing
  }

-- ** TagPartOfSpeechAPI200Response
-- | TagPartOfSpeechAPI200Response
data TagPartOfSpeechAPI200Response = TagPartOfSpeechAPI200Response
  { tagPartOfSpeechAPI200ResponseTaggedText :: !(Maybe Text) -- ^ "tagged_text"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TagPartOfSpeechAPI200Response
instance A.FromJSON TagPartOfSpeechAPI200Response where
  parseJSON = A.withObject "TagPartOfSpeechAPI200Response" $ \o ->
    TagPartOfSpeechAPI200Response
      <$> (o .:? "tagged_text")

-- | ToJSON TagPartOfSpeechAPI200Response
instance A.ToJSON TagPartOfSpeechAPI200Response where
  toJSON TagPartOfSpeechAPI200Response {..} =
   _omitNulls
      [ "tagged_text" .= tagPartOfSpeechAPI200ResponseTaggedText
      ]


-- | Construct a value of type 'TagPartOfSpeechAPI200Response' (by applying it's required fields, if any)
mkTagPartOfSpeechAPI200Response
  :: TagPartOfSpeechAPI200Response
mkTagPartOfSpeechAPI200Response =
  TagPartOfSpeechAPI200Response
  { tagPartOfSpeechAPI200ResponseTaggedText = Nothing
  }

-- ** TopNewsAPI200Response
-- | TopNewsAPI200Response
data TopNewsAPI200Response = TopNewsAPI200Response
  { topNewsAPI200ResponseTopNews :: !(Maybe [TopNewsAPI200ResponseTopNewsInner]) -- ^ "top_news"
  , topNewsAPI200ResponseLanguage :: !(Maybe Text) -- ^ "language"
  , topNewsAPI200ResponseCountry :: !(Maybe Text) -- ^ "country"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TopNewsAPI200Response
instance A.FromJSON TopNewsAPI200Response where
  parseJSON = A.withObject "TopNewsAPI200Response" $ \o ->
    TopNewsAPI200Response
      <$> (o .:? "top_news")
      <*> (o .:? "language")
      <*> (o .:? "country")

-- | ToJSON TopNewsAPI200Response
instance A.ToJSON TopNewsAPI200Response where
  toJSON TopNewsAPI200Response {..} =
   _omitNulls
      [ "top_news" .= topNewsAPI200ResponseTopNews
      , "language" .= topNewsAPI200ResponseLanguage
      , "country" .= topNewsAPI200ResponseCountry
      ]


-- | Construct a value of type 'TopNewsAPI200Response' (by applying it's required fields, if any)
mkTopNewsAPI200Response
  :: TopNewsAPI200Response
mkTopNewsAPI200Response =
  TopNewsAPI200Response
  { topNewsAPI200ResponseTopNews = Nothing
  , topNewsAPI200ResponseLanguage = Nothing
  , topNewsAPI200ResponseCountry = Nothing
  }

-- ** TopNewsAPI200ResponseTopNewsInner
-- | TopNewsAPI200ResponseTopNewsInner
data TopNewsAPI200ResponseTopNewsInner = TopNewsAPI200ResponseTopNewsInner
  { topNewsAPI200ResponseTopNewsInnerNews :: !(Maybe [TopNewsAPI200ResponseTopNewsInnerNewsInner]) -- ^ "news"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TopNewsAPI200ResponseTopNewsInner
instance A.FromJSON TopNewsAPI200ResponseTopNewsInner where
  parseJSON = A.withObject "TopNewsAPI200ResponseTopNewsInner" $ \o ->
    TopNewsAPI200ResponseTopNewsInner
      <$> (o .:? "news")

-- | ToJSON TopNewsAPI200ResponseTopNewsInner
instance A.ToJSON TopNewsAPI200ResponseTopNewsInner where
  toJSON TopNewsAPI200ResponseTopNewsInner {..} =
   _omitNulls
      [ "news" .= topNewsAPI200ResponseTopNewsInnerNews
      ]


-- | Construct a value of type 'TopNewsAPI200ResponseTopNewsInner' (by applying it's required fields, if any)
mkTopNewsAPI200ResponseTopNewsInner
  :: TopNewsAPI200ResponseTopNewsInner
mkTopNewsAPI200ResponseTopNewsInner =
  TopNewsAPI200ResponseTopNewsInner
  { topNewsAPI200ResponseTopNewsInnerNews = Nothing
  }

-- ** TopNewsAPI200ResponseTopNewsInnerNewsInner
-- | TopNewsAPI200ResponseTopNewsInnerNewsInner
data TopNewsAPI200ResponseTopNewsInnerNewsInner = TopNewsAPI200ResponseTopNewsInnerNewsInner
  { topNewsAPI200ResponseTopNewsInnerNewsInnerSummary :: !(Maybe Text) -- ^ "summary"
  , topNewsAPI200ResponseTopNewsInnerNewsInnerImage :: !(Maybe Text) -- ^ "image"
  , topNewsAPI200ResponseTopNewsInnerNewsInnerId :: !(Maybe Int) -- ^ "id"
  , topNewsAPI200ResponseTopNewsInnerNewsInnerText :: !(Maybe Text) -- ^ "text"
  , topNewsAPI200ResponseTopNewsInnerNewsInnerTitle :: !(Maybe Text) -- ^ "title"
  , topNewsAPI200ResponseTopNewsInnerNewsInnerPublishDate :: !(Maybe Text) -- ^ "publish_date"
  , topNewsAPI200ResponseTopNewsInnerNewsInnerUrl :: !(Maybe Text) -- ^ "url"
  , topNewsAPI200ResponseTopNewsInnerNewsInnerAuthors :: !(Maybe [Text]) -- ^ "authors"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON TopNewsAPI200ResponseTopNewsInnerNewsInner
instance A.FromJSON TopNewsAPI200ResponseTopNewsInnerNewsInner where
  parseJSON = A.withObject "TopNewsAPI200ResponseTopNewsInnerNewsInner" $ \o ->
    TopNewsAPI200ResponseTopNewsInnerNewsInner
      <$> (o .:? "summary")
      <*> (o .:? "image")
      <*> (o .:? "id")
      <*> (o .:? "text")
      <*> (o .:? "title")
      <*> (o .:? "publish_date")
      <*> (o .:? "url")
      <*> (o .:? "authors")

-- | ToJSON TopNewsAPI200ResponseTopNewsInnerNewsInner
instance A.ToJSON TopNewsAPI200ResponseTopNewsInnerNewsInner where
  toJSON TopNewsAPI200ResponseTopNewsInnerNewsInner {..} =
   _omitNulls
      [ "summary" .= topNewsAPI200ResponseTopNewsInnerNewsInnerSummary
      , "image" .= topNewsAPI200ResponseTopNewsInnerNewsInnerImage
      , "id" .= topNewsAPI200ResponseTopNewsInnerNewsInnerId
      , "text" .= topNewsAPI200ResponseTopNewsInnerNewsInnerText
      , "title" .= topNewsAPI200ResponseTopNewsInnerNewsInnerTitle
      , "publish_date" .= topNewsAPI200ResponseTopNewsInnerNewsInnerPublishDate
      , "url" .= topNewsAPI200ResponseTopNewsInnerNewsInnerUrl
      , "authors" .= topNewsAPI200ResponseTopNewsInnerNewsInnerAuthors
      ]


-- | Construct a value of type 'TopNewsAPI200ResponseTopNewsInnerNewsInner' (by applying it's required fields, if any)
mkTopNewsAPI200ResponseTopNewsInnerNewsInner
  :: TopNewsAPI200ResponseTopNewsInnerNewsInner
mkTopNewsAPI200ResponseTopNewsInnerNewsInner =
  TopNewsAPI200ResponseTopNewsInnerNewsInner
  { topNewsAPI200ResponseTopNewsInnerNewsInnerSummary = Nothing
  , topNewsAPI200ResponseTopNewsInnerNewsInnerImage = Nothing
  , topNewsAPI200ResponseTopNewsInnerNewsInnerId = Nothing
  , topNewsAPI200ResponseTopNewsInnerNewsInnerText = Nothing
  , topNewsAPI200ResponseTopNewsInnerNewsInnerTitle = Nothing
  , topNewsAPI200ResponseTopNewsInnerNewsInnerPublishDate = Nothing
  , topNewsAPI200ResponseTopNewsInnerNewsInnerUrl = Nothing
  , topNewsAPI200ResponseTopNewsInnerNewsInnerAuthors = Nothing
  }

-- ** VectorSearchAPI200Response
-- | VectorSearchAPI200Response
data VectorSearchAPI200Response = VectorSearchAPI200Response
  { vectorSearchAPI200ResponseVectors :: !(Maybe [VectorSearchAPI200ResponseVectorsInner]) -- ^ "vectors"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON VectorSearchAPI200Response
instance A.FromJSON VectorSearchAPI200Response where
  parseJSON = A.withObject "VectorSearchAPI200Response" $ \o ->
    VectorSearchAPI200Response
      <$> (o .:? "vectors")

-- | ToJSON VectorSearchAPI200Response
instance A.ToJSON VectorSearchAPI200Response where
  toJSON VectorSearchAPI200Response {..} =
   _omitNulls
      [ "vectors" .= vectorSearchAPI200ResponseVectors
      ]


-- | Construct a value of type 'VectorSearchAPI200Response' (by applying it's required fields, if any)
mkVectorSearchAPI200Response
  :: VectorSearchAPI200Response
mkVectorSearchAPI200Response =
  VectorSearchAPI200Response
  { vectorSearchAPI200ResponseVectors = Nothing
  }

-- ** VectorSearchAPI200ResponseVectorsInner
-- | VectorSearchAPI200ResponseVectorsInner
data VectorSearchAPI200ResponseVectorsInner = VectorSearchAPI200ResponseVectorsInner
  { vectorSearchAPI200ResponseVectorsInnerLicense :: !(Maybe Text) -- ^ "license"
  , vectorSearchAPI200ResponseVectorsInnerTitle :: !(Maybe Text) -- ^ "title"
  , vectorSearchAPI200ResponseVectorsInnerAuthor :: !(Maybe Text) -- ^ "author"
  , vectorSearchAPI200ResponseVectorsInnerImageUrl :: !(Maybe Text) -- ^ "image_url"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON VectorSearchAPI200ResponseVectorsInner
instance A.FromJSON VectorSearchAPI200ResponseVectorsInner where
  parseJSON = A.withObject "VectorSearchAPI200ResponseVectorsInner" $ \o ->
    VectorSearchAPI200ResponseVectorsInner
      <$> (o .:? "license")
      <*> (o .:? "title")
      <*> (o .:? "author")
      <*> (o .:? "image_url")

-- | ToJSON VectorSearchAPI200ResponseVectorsInner
instance A.ToJSON VectorSearchAPI200ResponseVectorsInner where
  toJSON VectorSearchAPI200ResponseVectorsInner {..} =
   _omitNulls
      [ "license" .= vectorSearchAPI200ResponseVectorsInnerLicense
      , "title" .= vectorSearchAPI200ResponseVectorsInnerTitle
      , "author" .= vectorSearchAPI200ResponseVectorsInnerAuthor
      , "image_url" .= vectorSearchAPI200ResponseVectorsInnerImageUrl
      ]


-- | Construct a value of type 'VectorSearchAPI200ResponseVectorsInner' (by applying it's required fields, if any)
mkVectorSearchAPI200ResponseVectorsInner
  :: VectorSearchAPI200ResponseVectorsInner
mkVectorSearchAPI200ResponseVectorsInner =
  VectorSearchAPI200ResponseVectorsInner
  { vectorSearchAPI200ResponseVectorsInnerLicense = Nothing
  , vectorSearchAPI200ResponseVectorsInnerTitle = Nothing
  , vectorSearchAPI200ResponseVectorsInnerAuthor = Nothing
  , vectorSearchAPI200ResponseVectorsInnerImageUrl = Nothing
  }

-- ** VerifyEmailAddressAPI200Response
-- | VerifyEmailAddressAPI200Response
data VerifyEmailAddressAPI200Response = VerifyEmailAddressAPI200Response
  { verifyEmailAddressAPI200ResponseEmail :: !(Maybe Text) -- ^ "email"
  , verifyEmailAddressAPI200ResponseDomain :: !(Maybe Text) -- ^ "domain"
  , verifyEmailAddressAPI200ResponseFirstName :: !(Maybe Text) -- ^ "first_name"
  , verifyEmailAddressAPI200ResponseMiddleName :: !(Maybe Text) -- ^ "middle_name"
  , verifyEmailAddressAPI200ResponseLastName :: !(Maybe Text) -- ^ "last_name"
  , verifyEmailAddressAPI200ResponseFullName :: !(Maybe Text) -- ^ "full_name"
  , verifyEmailAddressAPI200ResponseUsername :: !(Maybe Text) -- ^ "username"
  , verifyEmailAddressAPI200ResponseImage :: !(Maybe Text) -- ^ "image"
  , verifyEmailAddressAPI200ResponseResult :: !(Maybe Text) -- ^ "result"
  , verifyEmailAddressAPI200ResponseDisposable :: !(Maybe Bool) -- ^ "disposable"
  , verifyEmailAddressAPI200ResponseAcceptAll :: !(Maybe Bool) -- ^ "accept_all"
  , verifyEmailAddressAPI200ResponseFreeProvider :: !(Maybe Bool) -- ^ "free_provider"
  } deriving (P.Show, P.Eq, P.Typeable)

-- | FromJSON VerifyEmailAddressAPI200Response
instance A.FromJSON VerifyEmailAddressAPI200Response where
  parseJSON = A.withObject "VerifyEmailAddressAPI200Response" $ \o ->
    VerifyEmailAddressAPI200Response
      <$> (o .:? "email")
      <*> (o .:? "domain")
      <*> (o .:? "first_name")
      <*> (o .:? "middle_name")
      <*> (o .:? "last_name")
      <*> (o .:? "full_name")
      <*> (o .:? "username")
      <*> (o .:? "image")
      <*> (o .:? "result")
      <*> (o .:? "disposable")
      <*> (o .:? "accept_all")
      <*> (o .:? "free_provider")

-- | ToJSON VerifyEmailAddressAPI200Response
instance A.ToJSON VerifyEmailAddressAPI200Response where
  toJSON VerifyEmailAddressAPI200Response {..} =
   _omitNulls
      [ "email" .= verifyEmailAddressAPI200ResponseEmail
      , "domain" .= verifyEmailAddressAPI200ResponseDomain
      , "first_name" .= verifyEmailAddressAPI200ResponseFirstName
      , "middle_name" .= verifyEmailAddressAPI200ResponseMiddleName
      , "last_name" .= verifyEmailAddressAPI200ResponseLastName
      , "full_name" .= verifyEmailAddressAPI200ResponseFullName
      , "username" .= verifyEmailAddressAPI200ResponseUsername
      , "image" .= verifyEmailAddressAPI200ResponseImage
      , "result" .= verifyEmailAddressAPI200ResponseResult
      , "disposable" .= verifyEmailAddressAPI200ResponseDisposable
      , "accept_all" .= verifyEmailAddressAPI200ResponseAcceptAll
      , "free_provider" .= verifyEmailAddressAPI200ResponseFreeProvider
      ]


-- | Construct a value of type 'VerifyEmailAddressAPI200Response' (by applying it's required fields, if any)
mkVerifyEmailAddressAPI200Response
  :: VerifyEmailAddressAPI200Response
mkVerifyEmailAddressAPI200Response =
  VerifyEmailAddressAPI200Response
  { verifyEmailAddressAPI200ResponseEmail = Nothing
  , verifyEmailAddressAPI200ResponseDomain = Nothing
  , verifyEmailAddressAPI200ResponseFirstName = Nothing
  , verifyEmailAddressAPI200ResponseMiddleName = Nothing
  , verifyEmailAddressAPI200ResponseLastName = Nothing
  , verifyEmailAddressAPI200ResponseFullName = Nothing
  , verifyEmailAddressAPI200ResponseUsername = Nothing
  , verifyEmailAddressAPI200ResponseImage = Nothing
  , verifyEmailAddressAPI200ResponseResult = Nothing
  , verifyEmailAddressAPI200ResponseDisposable = Nothing
  , verifyEmailAddressAPI200ResponseAcceptAll = Nothing
  , verifyEmailAddressAPI200ResponseFreeProvider = Nothing
  }




-- * Auth Methods

-- ** AuthApiKeyApiKey
data AuthApiKeyApiKey =
  AuthApiKeyApiKey Text -- ^ secret
  deriving (P.Eq, P.Show, P.Typeable)

instance AuthMethod AuthApiKeyApiKey where
  applyAuthMethod _ a@(AuthApiKeyApiKey secret) req =
    P.pure $
    if (P.typeOf a `P.elem` rAuthTypes req)
      then req `setQuery` toQuery ("api-key", Just secret)
           & L.over rAuthTypesL (P.filter (/= P.typeOf a))
      else req

-- ** AuthApiKeyHeaderApiKey
data AuthApiKeyHeaderApiKey =
  AuthApiKeyHeaderApiKey Text -- ^ secret
  deriving (P.Eq, P.Show, P.Typeable)

instance AuthMethod AuthApiKeyHeaderApiKey where
  applyAuthMethod _ a@(AuthApiKeyHeaderApiKey secret) req =
    P.pure $
    if (P.typeOf a `P.elem` rAuthTypes req)
      then req `setHeader` toHeader ("x-api-key", secret)
           & L.over rAuthTypesL (P.filter (/= P.typeOf a))
      else req


