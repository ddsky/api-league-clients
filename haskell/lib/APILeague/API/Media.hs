{-
   API League

   API League is a Hub for World Class APIs.

   OpenAPI Version: 3.0.0
   API League API version: 1.6.4
   Contact: mail@apileague.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : APILeague.API.Media
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module APILeague.API.Media where

import APILeague.Core
import APILeague.MimeTypes
import APILeague.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Media

-- *** detectMainImageColorAPI

-- | @GET \/detect-color@
-- 
-- Detect Main Image Color API
-- 
-- Detect the main color of an image. The API returns a list of colors and their hex codes. The API supports images in the following formats: JPEG, PNG, and GIF.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
detectMainImageColorAPI
  :: Url -- ^ "url" -  The url of the image for which the colors should be detected.
  -> APILeagueRequest DetectMainImageColorAPI MimeNoContent [DetectMainImageColorAPI200ResponseInner] MimeJSON
detectMainImageColorAPI (Url url) =
  _mkRequest "GET" ["/detect-color"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("url", Just url)

data DetectMainImageColorAPI  
-- | @application/json@
instance Produces DetectMainImageColorAPI MimeJSON


-- *** rescaleImageAPI

-- | @GET \/rescale-image@
-- 
-- Rescale Image API
-- 
-- Rescale an image to a specific width and height. The image will be resized to fit the specified width and height while maintaining the original aspect ratio unless the crop parameter is set to true. The image will be returned in the same format as the original image.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
rescaleImageAPI
  :: Url -- ^ "url" -  The url of the image to be rescaled.
  -> Width -- ^ "width" -  The desired width of the rescaled image.
  -> Height -- ^ "height" -  The desired height of the rescaled image.
  -> Crop -- ^ "crop" -  Whether the image should be cropped. If true, the returned image will have exactly the given width and height and some content might have been cropped from the left/right or top/bottom. If this parameter is false, the image will keep its ratio but will be resized to fill the given box. Some content might be outside the box though.
  -> APILeagueRequest RescaleImageAPI MimeNoContent FilePath MimeOctetStream
rescaleImageAPI (Url url) (Width width) (Height height) (Crop crop) =
  _mkRequest "GET" ["/rescale-image"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("url", Just url)
    `addQuery` toQuery ("width", Just width)
    `addQuery` toQuery ("height", Just height)
    `addQuery` toQuery ("crop", Just crop)

data RescaleImageAPI  
-- | @application/octet-stream@
instance Produces RescaleImageAPI MimeOctetStream


-- *** searchIconsAPI

-- | @GET \/search-icons@
-- 
-- Search Icons API
-- 
-- Search through millions of icons to match any topic you want.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
searchIconsAPI
  :: Query -- ^ "query" -  The search query.
  -> APILeagueRequest SearchIconsAPI MimeNoContent SearchIconsAPI200Response MimeJSON
searchIconsAPI (Query query) =
  _mkRequest "GET" ["/search-icons"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("query", Just query)

data SearchIconsAPI  

-- | /Optional Param/ "only-public-domain" - If true, only public domain icons will be returned.
instance HasOptionalParam SearchIconsAPI OnlyPublicDomain where
  applyOptionalParam req (OnlyPublicDomain xs) =
    req `addQuery` toQuery ("only-public-domain", Just xs)

-- | /Optional Param/ "number" - The number of icons to return in range [1,100]
instance HasOptionalParam SearchIconsAPI Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchIconsAPI MimeJSON


-- *** searchRoyaltyFreeImagesAPI

-- | @GET \/search-images@
-- 
-- Search Royalty Free Images API
-- 
-- Search through hundreds of thousands of royalty free images to match any topic you want. The images are returned in a list with the URL, width, and height of the image. Additionally, you can find the license type and link of the image.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
searchRoyaltyFreeImagesAPI
  :: Query -- ^ "query" -  The search query.
  -> APILeagueRequest SearchRoyaltyFreeImagesAPI MimeNoContent SearchRoyaltyFreeImagesAPI200Response MimeJSON
searchRoyaltyFreeImagesAPI (Query query) =
  _mkRequest "GET" ["/search-images"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("query", Just query)

data SearchRoyaltyFreeImagesAPI  

-- | /Optional Param/ "number" - The number of images to return in range [1,100]
instance HasOptionalParam SearchRoyaltyFreeImagesAPI Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchRoyaltyFreeImagesAPI MimeJSON


-- *** vectorSearchAPI

-- | @GET \/search-vectors@
-- 
-- Vector Search API
-- 
-- Search through over 700,000 free to use vector icons. The license is either \"PUBLIC_DOMAIN\" or \"ATTRIBUTION\". If it is \"ATTRIBUTION\" just attribute the author somewhere in your project.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
vectorSearchAPI
  :: Query -- ^ "query" -  The search query.
  -> APILeagueRequest VectorSearchAPI MimeNoContent VectorSearchAPI200Response MimeJSON
vectorSearchAPI (Query query) =
  _mkRequest "GET" ["/search-vectors"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("query", Just query)

data VectorSearchAPI  

-- | /Optional Param/ "offset" - The number of vectors to skip, between 0 and 1000
instance HasOptionalParam VectorSearchAPI Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of vectors to return in range [1,10]
instance HasOptionalParam VectorSearchAPI Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces VectorSearchAPI MimeJSON

