{-
   API League

   API League is a Hub for World Class APIs.

   OpenAPI Version: 3.0.0
   API League API version: 1.4.0
   Contact: mail@apileague.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : APILeague.API.Food
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module APILeague.API.Food where

import APILeague.Core
import APILeague.MimeTypes
import APILeague.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Food

-- *** computeNutrition

-- | @GET \/compute-nutrition@
-- 
-- Compute Nutrition
-- 
-- Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
computeNutrition
  :: Ingredients -- ^ "ingredients" -  A comma-separated list of the ingredients of the recipe.
  -> APILeagueRequest ComputeNutrition MimeNoContent ComputeNutrition200Response MimeJSON
computeNutrition (Ingredients ingredients) =
  _mkRequest "GET" ["/compute-nutrition"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("ingredients", Just ingredients)

data ComputeNutrition  

-- | /Optional Param/ "servings" - The number of servings the ingredients make. Nutrition is computed per serving.
instance HasOptionalParam ComputeNutrition Servings where
  applyOptionalParam req (Servings xs) =
    req `addQuery` toQuery ("servings", Just xs)

-- | /Optional Param/ "reduce-oils" - If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.
instance HasOptionalParam ComputeNutrition ReduceOils where
  applyOptionalParam req (ReduceOils xs) =
    req `addQuery` toQuery ("reduce-oils", Just xs)
-- | @application/json@
instance Produces ComputeNutrition MimeJSON


-- *** retrieveRecipeInformation

-- | @GET \/retrieve-recipe@
-- 
-- Retrieve Recipe Information
-- 
-- Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
retrieveRecipeInformation
  :: Id -- ^ "id" -  The id of the recipe to retrieve.
  -> APILeagueRequest RetrieveRecipeInformation MimeNoContent RetrieveRecipeInformation200Response MimeJSON
retrieveRecipeInformation (Id id) =
  _mkRequest "GET" ["/retrieve-recipe"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("id", Just id)

data RetrieveRecipeInformation  

-- | /Optional Param/ "add-wine-pairing" - Whether to pair a wine to the recipe.
instance HasOptionalParam RetrieveRecipeInformation AddWinePairing where
  applyOptionalParam req (AddWinePairing xs) =
    req `addQuery` toQuery ("add-wine-pairing", Just xs)
-- | @application/json@
instance Produces RetrieveRecipeInformation MimeJSON


-- *** searchRecipes

-- | @GET \/search-recipes@
-- 
-- Search Recipes
-- 
-- Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
searchRecipes
  :: APILeagueRequest SearchRecipes MimeNoContent SearchRecipes200Response MimeJSON
searchRecipes =
  _mkRequest "GET" ["/search-recipes"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)

data SearchRecipes  

-- | /Optional Param/ "query" - The search query.
instance HasOptionalParam SearchRecipes Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "cuisines" - The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR').
instance HasOptionalParam SearchRecipes Cuisines where
  applyOptionalParam req (Cuisines xs) =
    req `addQuery` toQuery ("cuisines", Just xs)

-- | /Optional Param/ "exclude-cuisines" - The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND').
instance HasOptionalParam SearchRecipes ExcludeCuisines where
  applyOptionalParam req (ExcludeCuisines xs) =
    req `addQuery` toQuery ("exclude-cuisines", Just xs)

-- | /Optional Param/ "meal-type" - The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.
instance HasOptionalParam SearchRecipes MealType where
  applyOptionalParam req (MealType xs) =
    req `addQuery` toQuery ("meal-type", Just xs)

-- | /Optional Param/ "diet" - The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.
instance HasOptionalParam SearchRecipes Diet where
  applyOptionalParam req (Diet xs) =
    req `addQuery` toQuery ("diet", Just xs)

-- | /Optional Param/ "intolerances" - A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.
instance HasOptionalParam SearchRecipes Intolerances where
  applyOptionalParam req (Intolerances xs) =
    req `addQuery` toQuery ("intolerances", Just xs)

-- | /Optional Param/ "equipment" - The equipment required. Multiple values will be interpreted as 'OR'.
instance HasOptionalParam SearchRecipes Equipment where
  applyOptionalParam req (Equipment xs) =
    req `addQuery` toQuery ("equipment", Just xs)

-- | /Optional Param/ "include-ingredients" - A comma-separated list of ingredients that should/must be used in the recipes.
instance HasOptionalParam SearchRecipes IncludeIngredients where
  applyOptionalParam req (IncludeIngredients xs) =
    req `addQuery` toQuery ("include-ingredients", Just xs)

-- | /Optional Param/ "exclude-ingredients" - A comma-separated list of ingredients or ingredient types that the recipes must not contain.
instance HasOptionalParam SearchRecipes ExcludeIngredients where
  applyOptionalParam req (ExcludeIngredients xs) =
    req `addQuery` toQuery ("exclude-ingredients", Just xs)

-- | /Optional Param/ "fill-ingredients" - Add information about the ingredients and whether they are used or missing in relation to the query.
instance HasOptionalParam SearchRecipes FillIngredients where
  applyOptionalParam req (FillIngredients xs) =
    req `addQuery` toQuery ("fill-ingredients", Just xs)

-- | /Optional Param/ "add-recipe-information" - If set to true, you get more information about the recipes returned.
instance HasOptionalParam SearchRecipes AddRecipeInformation where
  applyOptionalParam req (AddRecipeInformation xs) =
    req `addQuery` toQuery ("add-recipe-information", Just xs)

-- | /Optional Param/ "max-time" - The maximum time in minutes it should take to prepare and cook the recipe.
instance HasOptionalParam SearchRecipes MaxTime where
  applyOptionalParam req (MaxTime xs) =
    req `addQuery` toQuery ("max-time", Just xs)

-- | /Optional Param/ "min-servings" - The minimum amount of servings the recipe is for.
instance HasOptionalParam SearchRecipes MinServings where
  applyOptionalParam req (MinServings xs) =
    req `addQuery` toQuery ("min-servings", Just xs)

-- | /Optional Param/ "max-servings" - The maximum amount of servings the recipe is for.
instance HasOptionalParam SearchRecipes MaxServings where
  applyOptionalParam req (MaxServings xs) =
    req `addQuery` toQuery ("max-servings", Just xs)

-- | /Optional Param/ "min-calories" - The minimum amount of calories the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinCalories where
  applyOptionalParam req (MinCalories xs) =
    req `addQuery` toQuery ("min-calories", Just xs)

-- | /Optional Param/ "max-calories" - The maximum amount of calories the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxCalories where
  applyOptionalParam req (MaxCalories xs) =
    req `addQuery` toQuery ("max-calories", Just xs)

-- | /Optional Param/ "min-carbs" - The minimum amount of carbohydrates in grams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinCarbs where
  applyOptionalParam req (MinCarbs xs) =
    req `addQuery` toQuery ("min-carbs", Just xs)

-- | /Optional Param/ "max-carbs" - The maximum amount of carbohydrates in grams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxCarbs where
  applyOptionalParam req (MaxCarbs xs) =
    req `addQuery` toQuery ("max-carbs", Just xs)

-- | /Optional Param/ "min-protein" - The minimum amount of protein in grams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinProtein where
  applyOptionalParam req (MinProtein xs) =
    req `addQuery` toQuery ("min-protein", Just xs)

-- | /Optional Param/ "max-protein" - The maximum amount of protein in grams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxProtein where
  applyOptionalParam req (MaxProtein xs) =
    req `addQuery` toQuery ("max-protein", Just xs)

-- | /Optional Param/ "min-fat" - The minimum amount of fat in grams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinFat where
  applyOptionalParam req (MinFat xs) =
    req `addQuery` toQuery ("min-fat", Just xs)

-- | /Optional Param/ "max-fat" - The maximum amount of fat in grams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxFat where
  applyOptionalParam req (MaxFat xs) =
    req `addQuery` toQuery ("max-fat", Just xs)

-- | /Optional Param/ "min-sugar" - The minimum amount of sugar in grams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinSugar where
  applyOptionalParam req (MinSugar xs) =
    req `addQuery` toQuery ("min-sugar", Just xs)

-- | /Optional Param/ "max-sugar" - The maximum amount of sugar in grams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxSugar where
  applyOptionalParam req (MaxSugar xs) =
    req `addQuery` toQuery ("max-sugar", Just xs)

-- | /Optional Param/ "min-fiber" - The minimum amount of fiber in grams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinFiber where
  applyOptionalParam req (MinFiber xs) =
    req `addQuery` toQuery ("min-fiber", Just xs)

-- | /Optional Param/ "max-fiber" - The maximum amount of fiber in grams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxFiber where
  applyOptionalParam req (MaxFiber xs) =
    req `addQuery` toQuery ("max-fiber", Just xs)

-- | /Optional Param/ "min-folate" - The minimum amount of folate in micrograms the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinFolate where
  applyOptionalParam req (MinFolate xs) =
    req `addQuery` toQuery ("min-folate", Just xs)

-- | /Optional Param/ "max-folate" - The maximum amount of folate in micrograms the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxFolate where
  applyOptionalParam req (MaxFolate xs) =
    req `addQuery` toQuery ("max-folate", Just xs)

-- | /Optional Param/ "min-folic-acid" - The minimum amount of folic acid in micrograms the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinFolicAcid where
  applyOptionalParam req (MinFolicAcid xs) =
    req `addQuery` toQuery ("min-folic-acid", Just xs)

-- | /Optional Param/ "max-folic-acid" - The maximum amount of folic acid in micrograms the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxFolicAcid where
  applyOptionalParam req (MaxFolicAcid xs) =
    req `addQuery` toQuery ("max-folic-acid", Just xs)

-- | /Optional Param/ "min-iodine" - The minimum amount of iodine in micrograms the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinIodine where
  applyOptionalParam req (MinIodine xs) =
    req `addQuery` toQuery ("min-iodine", Just xs)

-- | /Optional Param/ "max-iodine" - The maximum amount of iodine in micrograms the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxIodine where
  applyOptionalParam req (MaxIodine xs) =
    req `addQuery` toQuery ("max-iodine", Just xs)

-- | /Optional Param/ "min-iron" - The minimum amount of iron in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinIron where
  applyOptionalParam req (MinIron xs) =
    req `addQuery` toQuery ("min-iron", Just xs)

-- | /Optional Param/ "max-iron" - The maximum amount of iron in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxIron where
  applyOptionalParam req (MaxIron xs) =
    req `addQuery` toQuery ("max-iron", Just xs)

-- | /Optional Param/ "min-zinc" - The minimum amount of zinc in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinZinc where
  applyOptionalParam req (MinZinc xs) =
    req `addQuery` toQuery ("min-zinc", Just xs)

-- | /Optional Param/ "max-zinc" - The maximum amount of zinc in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxZinc where
  applyOptionalParam req (MaxZinc xs) =
    req `addQuery` toQuery ("max-zinc", Just xs)

-- | /Optional Param/ "min-magnesium" - The minimum amount of magnesium in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinMagnesium where
  applyOptionalParam req (MinMagnesium xs) =
    req `addQuery` toQuery ("min-magnesium", Just xs)

-- | /Optional Param/ "max-magnesium" - The maximum amount of magnesium in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxMagnesium where
  applyOptionalParam req (MaxMagnesium xs) =
    req `addQuery` toQuery ("max-magnesium", Just xs)

-- | /Optional Param/ "min-manganese" - The minimum amount of manganese in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinManganese where
  applyOptionalParam req (MinManganese xs) =
    req `addQuery` toQuery ("min-manganese", Just xs)

-- | /Optional Param/ "max-manganese" - The maximum amount of manganese in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxManganese where
  applyOptionalParam req (MaxManganese xs) =
    req `addQuery` toQuery ("max-manganese", Just xs)

-- | /Optional Param/ "min-phosphorus" - The minimum amount of phosphorus in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinPhosphorus where
  applyOptionalParam req (MinPhosphorus xs) =
    req `addQuery` toQuery ("min-phosphorus", Just xs)

-- | /Optional Param/ "max-phosphorus" - The maximum amount of phosphorus in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxPhosphorus where
  applyOptionalParam req (MaxPhosphorus xs) =
    req `addQuery` toQuery ("max-phosphorus", Just xs)

-- | /Optional Param/ "min-potassium" - The minimum amount of potassium in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinPotassium where
  applyOptionalParam req (MinPotassium xs) =
    req `addQuery` toQuery ("min-potassium", Just xs)

-- | /Optional Param/ "max-potassium" - The maximum amount of potassium in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxPotassium where
  applyOptionalParam req (MaxPotassium xs) =
    req `addQuery` toQuery ("max-potassium", Just xs)

-- | /Optional Param/ "min-sodium" - The minimum amount of sodium in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinSodium where
  applyOptionalParam req (MinSodium xs) =
    req `addQuery` toQuery ("min-sodium", Just xs)

-- | /Optional Param/ "max-sodium" - The maximum amount of sodium in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxSodium where
  applyOptionalParam req (MaxSodium xs) =
    req `addQuery` toQuery ("max-sodium", Just xs)

-- | /Optional Param/ "min-selenium" - The minimum amount of selenium in micrograms the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinSelenium where
  applyOptionalParam req (MinSelenium xs) =
    req `addQuery` toQuery ("min-selenium", Just xs)

-- | /Optional Param/ "max-selenium" - The maximum amount of selenium in micrograms the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxSelenium where
  applyOptionalParam req (MaxSelenium xs) =
    req `addQuery` toQuery ("max-selenium", Just xs)

-- | /Optional Param/ "min-copper" - The minimum amount of copper in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinCopper where
  applyOptionalParam req (MinCopper xs) =
    req `addQuery` toQuery ("min-copper", Just xs)

-- | /Optional Param/ "max-copper" - The maximum amount of copper in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxCopper where
  applyOptionalParam req (MaxCopper xs) =
    req `addQuery` toQuery ("max-copper", Just xs)

-- | /Optional Param/ "min-calcium" - The minimum amount of calcium in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinCalcium where
  applyOptionalParam req (MinCalcium xs) =
    req `addQuery` toQuery ("min-calcium", Just xs)

-- | /Optional Param/ "max-calcium" - The maximum amount of calcium in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxCalcium where
  applyOptionalParam req (MaxCalcium xs) =
    req `addQuery` toQuery ("max-calcium", Just xs)

-- | /Optional Param/ "min-choline" - The minimum amount of choline in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinCholine where
  applyOptionalParam req (MinCholine xs) =
    req `addQuery` toQuery ("min-choline", Just xs)

-- | /Optional Param/ "max-choline" - The maximum amount of choline in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxCholine where
  applyOptionalParam req (MaxCholine xs) =
    req `addQuery` toQuery ("max-choline", Just xs)

-- | /Optional Param/ "min-cholesterol" - The minimum amount of cholesterol in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinCholesterol where
  applyOptionalParam req (MinCholesterol xs) =
    req `addQuery` toQuery ("min-cholesterol", Just xs)

-- | /Optional Param/ "max-cholesterol" - The maximum amount of cholesterol in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxCholesterol where
  applyOptionalParam req (MaxCholesterol xs) =
    req `addQuery` toQuery ("max-cholesterol", Just xs)

-- | /Optional Param/ "min-fluoride" - The minimum amount of fluoride in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinFluoride where
  applyOptionalParam req (MinFluoride xs) =
    req `addQuery` toQuery ("min-fluoride", Just xs)

-- | /Optional Param/ "max-fluoride" - The maximum amount of fluoride in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxFluoride where
  applyOptionalParam req (MaxFluoride xs) =
    req `addQuery` toQuery ("max-fluoride", Just xs)

-- | /Optional Param/ "min-alcohol" - The minimum amount of alcohol in grams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinAlcohol where
  applyOptionalParam req (MinAlcohol xs) =
    req `addQuery` toQuery ("min-alcohol", Just xs)

-- | /Optional Param/ "max-alcohol" - The maximum amount of alcohol in grams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxAlcohol where
  applyOptionalParam req (MaxAlcohol xs) =
    req `addQuery` toQuery ("max-alcohol", Just xs)

-- | /Optional Param/ "min-caffeine" - The minimum amount of caffeine in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinCaffeine where
  applyOptionalParam req (MinCaffeine xs) =
    req `addQuery` toQuery ("min-caffeine", Just xs)

-- | /Optional Param/ "max-caffeine" - The maximum amount of caffeine in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxCaffeine where
  applyOptionalParam req (MaxCaffeine xs) =
    req `addQuery` toQuery ("max-caffeine", Just xs)

-- | /Optional Param/ "min-saturated-fat" - The minimum amount of saturated fat in grams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinSaturatedFat where
  applyOptionalParam req (MinSaturatedFat xs) =
    req `addQuery` toQuery ("min-saturated-fat", Just xs)

-- | /Optional Param/ "max-saturated-fat" - The maximum amount of saturated fat in grams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxSaturatedFat where
  applyOptionalParam req (MaxSaturatedFat xs) =
    req `addQuery` toQuery ("max-saturated-fat", Just xs)

-- | /Optional Param/ "min-vitamin-a" - The minimum amount of Vitamin A in IU the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminA where
  applyOptionalParam req (MinVitaminA xs) =
    req `addQuery` toQuery ("min-vitamin-a", Just xs)

-- | /Optional Param/ "max-vitamin-a" - The maximum amount of Vitamin A in IU the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminA where
  applyOptionalParam req (MaxVitaminA xs) =
    req `addQuery` toQuery ("max-vitamin-a", Just xs)

-- | /Optional Param/ "min-vitamin-c" - The minimum amount of Vitamin C in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminC where
  applyOptionalParam req (MinVitaminC xs) =
    req `addQuery` toQuery ("min-vitamin-c", Just xs)

-- | /Optional Param/ "max-vitamin-c" - The maximum amount of Vitamin C in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminC where
  applyOptionalParam req (MaxVitaminC xs) =
    req `addQuery` toQuery ("max-vitamin-c", Just xs)

-- | /Optional Param/ "min-vitamin-d" - The minimum amount of Vitamin D in micrograms the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminD where
  applyOptionalParam req (MinVitaminD xs) =
    req `addQuery` toQuery ("min-vitamin-d", Just xs)

-- | /Optional Param/ "max-vitamin-d" - The maximum amount of Vitamin D in micrograms the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminD where
  applyOptionalParam req (MaxVitaminD xs) =
    req `addQuery` toQuery ("max-vitamin-d", Just xs)

-- | /Optional Param/ "min-vitamin-e" - The minimum amount of Vitamin E in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminE where
  applyOptionalParam req (MinVitaminE xs) =
    req `addQuery` toQuery ("min-vitamin-e", Just xs)

-- | /Optional Param/ "max-vitamin-e" - The maximum amount of Vitamin E in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminE where
  applyOptionalParam req (MaxVitaminE xs) =
    req `addQuery` toQuery ("max-vitamin-e", Just xs)

-- | /Optional Param/ "min-vitamin-k" - The minimum amount of Vitamin K in micrograms the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminK where
  applyOptionalParam req (MinVitaminK xs) =
    req `addQuery` toQuery ("min-vitamin-k", Just xs)

-- | /Optional Param/ "max-vitamin-k" - The maximum amount of Vitamin K in micrograms the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminK where
  applyOptionalParam req (MaxVitaminK xs) =
    req `addQuery` toQuery ("max-vitamin-k", Just xs)

-- | /Optional Param/ "min-vitamin-b1" - The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminB1 where
  applyOptionalParam req (MinVitaminB1 xs) =
    req `addQuery` toQuery ("min-vitamin-b1", Just xs)

-- | /Optional Param/ "max-vitamin-b1" - The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminB1 where
  applyOptionalParam req (MaxVitaminB1 xs) =
    req `addQuery` toQuery ("max-vitamin-b1", Just xs)

-- | /Optional Param/ "min-vitamin-b2" - The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminB2 where
  applyOptionalParam req (MinVitaminB2 xs) =
    req `addQuery` toQuery ("min-vitamin-b2", Just xs)

-- | /Optional Param/ "max-vitamin-b2" - The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminB2 where
  applyOptionalParam req (MaxVitaminB2 xs) =
    req `addQuery` toQuery ("max-vitamin-b2", Just xs)

-- | /Optional Param/ "min-vitamin-b3" - The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminB3 where
  applyOptionalParam req (MinVitaminB3 xs) =
    req `addQuery` toQuery ("min-vitamin-b3", Just xs)

-- | /Optional Param/ "max-vitamin-b3" - The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminB3 where
  applyOptionalParam req (MaxVitaminB3 xs) =
    req `addQuery` toQuery ("max-vitamin-b3", Just xs)

-- | /Optional Param/ "min-vitamin-b5" - The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminB5 where
  applyOptionalParam req (MinVitaminB5 xs) =
    req `addQuery` toQuery ("min-vitamin-b5", Just xs)

-- | /Optional Param/ "max-vitamin-b5" - The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminB5 where
  applyOptionalParam req (MaxVitaminB5 xs) =
    req `addQuery` toQuery ("max-vitamin-b5", Just xs)

-- | /Optional Param/ "min-vitamin-b6" - The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminB6 where
  applyOptionalParam req (MinVitaminB6 xs) =
    req `addQuery` toQuery ("min-vitamin-b6", Just xs)

-- | /Optional Param/ "max-vitamin-b6" - The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminB6 where
  applyOptionalParam req (MaxVitaminB6 xs) =
    req `addQuery` toQuery ("max-vitamin-b6", Just xs)

-- | /Optional Param/ "min-vitamin-b12" - The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.
instance HasOptionalParam SearchRecipes MinVitaminB12 where
  applyOptionalParam req (MinVitaminB12 xs) =
    req `addQuery` toQuery ("min-vitamin-b12", Just xs)

-- | /Optional Param/ "max-vitamin-b12" - The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.
instance HasOptionalParam SearchRecipes MaxVitaminB12 where
  applyOptionalParam req (MaxVitaminB12 xs) =
    req `addQuery` toQuery ("max-vitamin-b12", Just xs)

-- | /Optional Param/ "sort" - The strategy to sort recipes by. See a full list of supported sorting options.
instance HasOptionalParam SearchRecipes Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "sort-direction" - Whether to sort ascending or descending (ASC or DESC).
instance HasOptionalParam SearchRecipes SortDirection where
  applyOptionalParam req (SortDirection xs) =
    req `addQuery` toQuery ("sort-direction", Just xs)

-- | /Optional Param/ "offset" - The number of recipes to skip, between 0 and 900.
instance HasOptionalParam SearchRecipes Offset where
  applyOptionalParam req (Offset xs) =
    req `addQuery` toQuery ("offset", Just xs)

-- | /Optional Param/ "number" - The number of recipes, between 1 and 100.
instance HasOptionalParam SearchRecipes Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchRecipes MimeJSON


-- *** searchRestaurants

-- | @GET \/search-restaurants@
-- 
-- Search Restaurants
-- 
-- Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
searchRestaurants
  :: Lat -- ^ "lat" -  The latitude to search around.
  -> Lon -- ^ "lon" -  The longitude to search around.
  -> APILeagueRequest SearchRestaurants MimeNoContent SearchRestaurants200Response MimeJSON
searchRestaurants (Lat lat) (Lon lon) =
  _mkRequest "GET" ["/search-restaurants"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("lat", Just lat)
    `addQuery` toQuery ("lon", Just lon)

data SearchRestaurants  

-- | /Optional Param/ "query" - The search query.
instance HasOptionalParam SearchRestaurants Query where
  applyOptionalParam req (Query xs) =
    req `addQuery` toQuery ("query", Just xs)

-- | /Optional Param/ "distance" - The maximum distance of the restaurant in miles around the given location.
instance HasOptionalParam SearchRestaurants Distance where
  applyOptionalParam req (Distance xs) =
    req `addQuery` toQuery ("distance", Just xs)

-- | /Optional Param/ "budget" - The budget in USD for the meal.
instance HasOptionalParam SearchRestaurants Budget where
  applyOptionalParam req (Budget xs) =
    req `addQuery` toQuery ("budget", Just xs)

-- | /Optional Param/ "min-rating" - The minimum rating of the restaurants in range [0,5].
instance HasOptionalParam SearchRestaurants MinRating where
  applyOptionalParam req (MinRating xs) =
    req `addQuery` toQuery ("min-rating", Just xs)

-- | /Optional Param/ "cuisine" - The cuisine that the restaurants should support.
instance HasOptionalParam SearchRestaurants Cuisine where
  applyOptionalParam req (Cuisine xs) =
    req `addQuery` toQuery ("cuisine", Just xs)

-- | /Optional Param/ "is-open" - Whether the restaurants have to be open now.
instance HasOptionalParam SearchRestaurants IsOpen where
  applyOptionalParam req (IsOpen xs) =
    req `addQuery` toQuery ("is-open", Just xs)

-- | /Optional Param/ "page" - The page of the results.
instance HasOptionalParam SearchRestaurants Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "sort" - The sort parameter, one of: cheapest, fastest, rating, distance or relevance.
instance HasOptionalParam SearchRestaurants Sort where
  applyOptionalParam req (Sort xs) =
    req `addQuery` toQuery ("sort", Just xs)
-- | @application/json@
instance Produces SearchRestaurants MimeJSON

