{-
   API League

   API League is a Hub for World Class APIs.

   OpenAPI Version: 3.0.0
   API League API version: 1.3.0
   Contact: mail@apileague.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : APILeague.API.ApiText
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module APILeague.API.ApiText where

import APILeague.Core
import APILeague.MimeTypes
import APILeague.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Text

-- *** correctSpelling

-- | @GET \/correct-spelling@
-- 
-- Correct Spelling
-- 
-- The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
correctSpelling
  :: ParamText -- ^ "text" -  The text to be corrected.
  -> Language -- ^ "language" -  The language of the text, one of en, de, es, fr, or it.
  -> APILeagueRequest CorrectSpelling MimeNoContent CorrectSpelling200Response MimeJSON
correctSpelling (ParamText text) (Language language) =
  _mkRequest "GET" ["/correct-spelling"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)
    `addQuery` toQuery ("language", Just language)

data CorrectSpelling  
-- | @application/json@
instance Produces CorrectSpelling MimeJSON


-- *** detectGenderByName

-- | @GET \/detect-gender@
-- 
-- Detect Gender by Name
-- 
-- Detect the likelihood that a name is given to a male or female (aka to \"genderize\" a name). While there are more than two genders, this API is limited to the binary classification as the name is given to the baby when it is born and only the sex is known.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
detectGenderByName
  :: Name -- ^ "name" -  The name of the perso for which the sentiment should be detected.
  -> APILeagueRequest DetectGenderByName MimeNoContent DetectGenderByName200Response MimeJSON
detectGenderByName (Name name) =
  _mkRequest "GET" ["/detect-gender"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("name", Just name)

data DetectGenderByName  
-- | @application/json@
instance Produces DetectGenderByName MimeJSON


-- *** detectLanguage

-- | @GET \/detect-language@
-- 
-- Detect Language
-- 
-- Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
detectLanguage
  :: ParamText -- ^ "text" -  The text for which the language should be detected.
  -> APILeagueRequest DetectLanguage MimeNoContent [DetectLanguage200ResponseInner] MimeJSON
detectLanguage (ParamText text) =
  _mkRequest "GET" ["/detect-language"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data DetectLanguage  
-- | @application/json@
instance Produces DetectLanguage MimeJSON


-- *** detectSentiment

-- | @GET \/detect-sentiment@
-- 
-- Detect Sentiment
-- 
-- Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
detectSentiment
  :: ParamText -- ^ "text" -  The text for which the sentiment should be detected.
  -> APILeagueRequest DetectSentiment MimeNoContent DetectSentiment200Response MimeJSON
detectSentiment (ParamText text) =
  _mkRequest "GET" ["/detect-sentiment"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data DetectSentiment  
-- | @application/json@
instance Produces DetectSentiment MimeJSON


-- *** extractDates

-- | @GET \/extract-dates@
-- 
-- Extract Dates
-- 
-- Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \"April 5th, 2035\", \"04/05/2035\", or \"05.04.2035\". The normalized date is the date in the form of a timestamp (milliseconds since 1970).
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractDates
  :: ParamText -- ^ "text" -  The text from which dates should be extracted.
  -> APILeagueRequest ExtractDates MimeNoContent ExtractDates200Response MimeJSON
extractDates (ParamText text) =
  _mkRequest "GET" ["/extract-dates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data ExtractDates  
-- | @application/json@
instance Produces ExtractDates MimeJSON


-- *** extractEntities

-- | @GET \/extract-entities@
-- 
-- Extract Entities
-- 
-- Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \"Canada\" represents the concept of a country. The word \"Jim Carrey\" represents the concept of a person. The word \"Tesla\" represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractEntities
  :: ParamText -- ^ "text" -  The text from which entities should be extracted.
  -> APILeagueRequest ExtractEntities MimeNoContent ExtractEntities200Response MimeJSON
extractEntities (ParamText text) =
  _mkRequest "GET" ["/extract-entities"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data ExtractEntities  
-- | @application/json@
instance Produces ExtractEntities MimeJSON


-- *** listWordSynonyms

-- | @GET \/list-synonyms@
-- 
-- List Word Synonyms
-- 
-- Return synonyms of a word.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
listWordSynonyms
  :: Word -- ^ "word" -  The (noun) word for which a list of synonyms should be returned.
  -> APILeagueRequest ListWordSynonyms MimeNoContent ListWordSynonyms200Response MimeJSON
listWordSynonyms (Word word) =
  _mkRequest "GET" ["/list-synonyms"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("word", Just word)

data ListWordSynonyms  
-- | @application/json@
instance Produces ListWordSynonyms MimeJSON


-- *** pluralizeWord

-- | @GET \/pluralize-word@
-- 
-- Pluralize Word
-- 
-- Find the plural form of a word.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
pluralizeWord
  :: Word -- ^ "word" -  The (noun) word for which the plural form should be found.
  -> APILeagueRequest PluralizeWord MimeNoContent PluralizeWord200Response MimeJSON
pluralizeWord (Word word) =
  _mkRequest "GET" ["/pluralize-word"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("word", Just word)

data PluralizeWord  
-- | @application/json@
instance Produces PluralizeWord MimeJSON


-- *** scoreReadability

-- | @GET \/score-readability@
-- 
-- Score Readability
-- 
-- Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
scoreReadability
  :: ParamText -- ^ "text" -  The text to score for readability.
  -> APILeagueRequest ScoreReadability MimeNoContent ScoreReadability200Response MimeJSON
scoreReadability (ParamText text) =
  _mkRequest "GET" ["/score-readability"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data ScoreReadability  
-- | @application/json@
instance Produces ScoreReadability MimeJSON


-- *** scoreText

-- | @GET \/score-text@
-- 
-- Score Text
-- 
-- Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
scoreText
  :: Title -- ^ "title" -  The title of the text to score.
  -> ParamText -- ^ "text" -  The text to score for multiple metrics.
  -> APILeagueRequest ScoreText MimeNoContent ScoreText200Response MimeJSON
scoreText (Title title) (ParamText text) =
  _mkRequest "GET" ["/score-text"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("title", Just title)
    `addQuery` toQuery ("text", Just text)

data ScoreText  
-- | @application/json@
instance Produces ScoreText MimeJSON


-- *** singularizeWord

-- | @GET \/singularize-word@
-- 
-- Singularize Word
-- 
-- Find the singular form of a word.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
singularizeWord
  :: Word -- ^ "word" -  The (noun) word for which the singular form should be found.
  -> APILeagueRequest SingularizeWord MimeNoContent SingularizeWord200Response MimeJSON
singularizeWord (Word word) =
  _mkRequest "GET" ["/singularize-word"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("word", Just word)

data SingularizeWord  
-- | @application/json@
instance Produces SingularizeWord MimeJSON


-- *** stemText

-- | @GET \/stem-text@
-- 
-- Stem Text
-- 
-- The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
stemText
  :: ParamText -- ^ "text" -  The text to be stemmed.
  -> APILeagueRequest StemText MimeNoContent StemText200Response MimeJSON
stemText (ParamText text) =
  _mkRequest "GET" ["/stem-text"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data StemText  
-- | @application/json@
instance Produces StemText MimeJSON


-- *** tagPartOfSpeech

-- | @GET \/tag-pos@
-- 
-- Tag Part of Speech
-- 
-- Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
tagPartOfSpeech
  :: ParamText -- ^ "text" -  The text to tag the part of speech.
  -> APILeagueRequest TagPartOfSpeech MimeNoContent TagPartOfSpeech200Response MimeJSON
tagPartOfSpeech (ParamText text) =
  _mkRequest "GET" ["/tag-pos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data TagPartOfSpeech  
-- | @application/json@
instance Produces TagPartOfSpeech MimeJSON

