{-
   API League

   API League is a Hub for World Class APIs.

   OpenAPI Version: 3.0.0
   API League API version: 1.6.4
   Contact: mail@apileague.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : APILeague.API.ApiText
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module APILeague.API.ApiText where

import APILeague.Core
import APILeague.MimeTypes
import APILeague.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Text

-- *** correctSpellingAPI

-- | @GET \/correct-spelling@
-- 
-- Correct Spelling API
-- 
-- The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
correctSpellingAPI
  :: ParamText -- ^ "text" -  The text to be corrected.
  -> Language -- ^ "language" -  The language of the text, one of en, de, es, fr, or it.
  -> APILeagueRequest CorrectSpellingAPI MimeNoContent CorrectSpellingAPI200Response MimeJSON
correctSpellingAPI (ParamText text) (Language language) =
  _mkRequest "GET" ["/correct-spelling"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)
    `addQuery` toQuery ("language", Just language)

data CorrectSpellingAPI  
-- | @application/json@
instance Produces CorrectSpellingAPI MimeJSON


-- *** detectGenderByNameAPI

-- | @GET \/detect-gender@
-- 
-- Detect Gender by Name API
-- 
-- Detect the likelihood that a name is given to a male or female (aka to \"genderize\" a name). While there are more than two genders, this API is limited to the binary classification as the name is given to the baby when it is born and only the sex is known.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
detectGenderByNameAPI
  :: Name -- ^ "name" -  The name of the perso for which the sentiment should be detected.
  -> APILeagueRequest DetectGenderByNameAPI MimeNoContent DetectGenderByNameAPI200Response MimeJSON
detectGenderByNameAPI (Name name) =
  _mkRequest "GET" ["/detect-gender"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("name", Just name)

data DetectGenderByNameAPI  
-- | @application/json@
instance Produces DetectGenderByNameAPI MimeJSON


-- *** detectLanguageAPI

-- | @GET \/detect-language@
-- 
-- Detect Language API
-- 
-- Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
detectLanguageAPI
  :: ParamText -- ^ "text" -  The text for which the language should be detected.
  -> APILeagueRequest DetectLanguageAPI MimeNoContent [DetectLanguageAPI200ResponseInner] MimeJSON
detectLanguageAPI (ParamText text) =
  _mkRequest "GET" ["/detect-language"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data DetectLanguageAPI  
-- | @application/json@
instance Produces DetectLanguageAPI MimeJSON


-- *** detectSentimentAPI

-- | @GET \/detect-sentiment@
-- 
-- Detect Sentiment API
-- 
-- Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
detectSentimentAPI
  :: ParamText -- ^ "text" -  The text for which the sentiment should be detected.
  -> APILeagueRequest DetectSentimentAPI MimeNoContent DetectSentimentAPI200Response MimeJSON
detectSentimentAPI (ParamText text) =
  _mkRequest "GET" ["/detect-sentiment"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data DetectSentimentAPI  
-- | @application/json@
instance Produces DetectSentimentAPI MimeJSON


-- *** extractDatesAPI

-- | @GET \/extract-dates@
-- 
-- Extract Dates API
-- 
-- Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \"April 5th, 2035\", \"04/05/2035\", or \"05.04.2035\". The normalized date is the date in the form of a timestamp (milliseconds since 1970).
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractDatesAPI
  :: ParamText -- ^ "text" -  The text from which dates should be extracted.
  -> APILeagueRequest ExtractDatesAPI MimeNoContent ExtractDatesAPI200Response MimeJSON
extractDatesAPI (ParamText text) =
  _mkRequest "GET" ["/extract-dates"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data ExtractDatesAPI  
-- | @application/json@
instance Produces ExtractDatesAPI MimeJSON


-- *** extractEntitiesAPI

-- | @GET \/extract-entities@
-- 
-- Extract Entities API
-- 
-- Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \"Canada\" represents the concept of a country. The word \"Jim Carrey\" represents the concept of a person. The word \"Tesla\" represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractEntitiesAPI
  :: ParamText -- ^ "text" -  The text from which entities should be extracted.
  -> APILeagueRequest ExtractEntitiesAPI MimeNoContent ExtractEntitiesAPI200Response MimeJSON
extractEntitiesAPI (ParamText text) =
  _mkRequest "GET" ["/extract-entities"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data ExtractEntitiesAPI  
-- | @application/json@
instance Produces ExtractEntitiesAPI MimeJSON


-- *** listWordSynonymsAPI

-- | @GET \/list-synonyms@
-- 
-- List Word Synonyms API
-- 
-- Return synonyms of a word.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
listWordSynonymsAPI
  :: Word -- ^ "word" -  The (noun) word for which a list of synonyms should be returned.
  -> APILeagueRequest ListWordSynonymsAPI MimeNoContent ListWordSynonymsAPI200Response MimeJSON
listWordSynonymsAPI (Word word) =
  _mkRequest "GET" ["/list-synonyms"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("word", Just word)

data ListWordSynonymsAPI  
-- | @application/json@
instance Produces ListWordSynonymsAPI MimeJSON


-- *** pluralizeWordAPI

-- | @GET \/pluralize-word@
-- 
-- Pluralize Word API
-- 
-- Find the plural form of a word.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
pluralizeWordAPI
  :: Word -- ^ "word" -  The (noun) word for which the plural form should be found.
  -> APILeagueRequest PluralizeWordAPI MimeNoContent PluralizeWordAPI200Response MimeJSON
pluralizeWordAPI (Word word) =
  _mkRequest "GET" ["/pluralize-word"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("word", Just word)

data PluralizeWordAPI  
-- | @application/json@
instance Produces PluralizeWordAPI MimeJSON


-- *** scoreReadabilityAPI

-- | @GET \/score-readability@
-- 
-- Score Readability API
-- 
-- Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
scoreReadabilityAPI
  :: ParamText -- ^ "text" -  The text to score for readability.
  -> APILeagueRequest ScoreReadabilityAPI MimeNoContent ScoreReadabilityAPI200Response MimeJSON
scoreReadabilityAPI (ParamText text) =
  _mkRequest "GET" ["/score-readability"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data ScoreReadabilityAPI  
-- | @application/json@
instance Produces ScoreReadabilityAPI MimeJSON


-- *** scoreTextAPI

-- | @GET \/score-text@
-- 
-- Score Text API
-- 
-- Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
scoreTextAPI
  :: Title -- ^ "title" -  The title of the text to score.
  -> ParamText -- ^ "text" -  The text to score for multiple metrics.
  -> APILeagueRequest ScoreTextAPI MimeNoContent ScoreTextAPI200Response MimeJSON
scoreTextAPI (Title title) (ParamText text) =
  _mkRequest "GET" ["/score-text"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("title", Just title)
    `addQuery` toQuery ("text", Just text)

data ScoreTextAPI  
-- | @application/json@
instance Produces ScoreTextAPI MimeJSON


-- *** singularizeWordAPI

-- | @GET \/singularize-word@
-- 
-- Singularize Word API
-- 
-- Find the singular form of a word.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
singularizeWordAPI
  :: Word -- ^ "word" -  The (noun) word for which the singular form should be found.
  -> APILeagueRequest SingularizeWordAPI MimeNoContent SingularizeWordAPI200Response MimeJSON
singularizeWordAPI (Word word) =
  _mkRequest "GET" ["/singularize-word"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("word", Just word)

data SingularizeWordAPI  
-- | @application/json@
instance Produces SingularizeWordAPI MimeJSON


-- *** stemTextAPI

-- | @GET \/stem-text@
-- 
-- Stem Text API
-- 
-- The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
stemTextAPI
  :: ParamText -- ^ "text" -  The text to be stemmed.
  -> APILeagueRequest StemTextAPI MimeNoContent StemTextAPI200Response MimeJSON
stemTextAPI (ParamText text) =
  _mkRequest "GET" ["/stem-text"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data StemTextAPI  
-- | @application/json@
instance Produces StemTextAPI MimeJSON


-- *** tagPartOfSpeechAPI

-- | @GET \/tag-pos@
-- 
-- Tag Part of Speech API
-- 
-- Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
tagPartOfSpeechAPI
  :: ParamText -- ^ "text" -  The text to tag the part of speech.
  -> APILeagueRequest TagPartOfSpeechAPI MimeNoContent TagPartOfSpeechAPI200Response MimeJSON
tagPartOfSpeechAPI (ParamText text) =
  _mkRequest "GET" ["/tag-pos"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("text", Just text)

data TagPartOfSpeechAPI  
-- | @application/json@
instance Produces TagPartOfSpeechAPI MimeJSON

