{-
   API League

   API League is a Hub for World Class APIs.

   OpenAPI Version: 3.0.0
   API League API version: 1.6.4
   Contact: mail@apileague.com
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : APILeague.API.Web
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module APILeague.API.Web where

import APILeague.Core
import APILeague.MimeTypes
import APILeague.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Web

-- *** extractAuthorsAPI

-- | @GET \/extract-authors@
-- 
-- Extract Authors API
-- 
-- Extracts the authors from a given URL. This API is useful for extracting the authors from a blog post or news article. The API will return a list of authors with their names and links to their profiles if available.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractAuthorsAPI
  :: Url -- ^ "url" -  The url with the article from which authors should be extracted.
  -> APILeagueRequest ExtractAuthorsAPI MimeNoContent ExtractAuthorsAPI200Response MimeJSON
extractAuthorsAPI (Url url) =
  _mkRequest "GET" ["/extract-authors"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("url", Just url)

data ExtractAuthorsAPI  
-- | @application/json@
instance Produces ExtractAuthorsAPI MimeJSON


-- *** extractContentFromAWebPageAPI

-- | @GET \/extract-content@
-- 
-- Extract Content from a Web Page API
-- 
-- Extract the main content from a web page. This API is useful for extracting the main text, title, and images from a web page. It can be used to create a summary of the content of a web page, or to extract the main content of a web page to display it in a different format.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractContentFromAWebPageAPI
  :: Url -- ^ "url" -  The url for which the content will be extracted.
  -> APILeagueRequest ExtractContentFromAWebPageAPI MimeNoContent ExtractContentFromAWebPageAPI200Response MimeJSON
extractContentFromAWebPageAPI (Url url) =
  _mkRequest "GET" ["/extract-content"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("url", Just url)

data ExtractContentFromAWebPageAPI  
-- | @application/json@
instance Produces ExtractContentFromAWebPageAPI MimeJSON


-- *** extractPublishDateAPI

-- | @GET \/extract-publish-date@
-- 
-- Extract Publish Date API
-- 
-- Extract the publish date of an article (news or blog). The API will return the publish date of the article if it can be found. The date returned is in the format YYYY-MM-DD.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
extractPublishDateAPI
  :: Url -- ^ "url" -  The url for which the publish date should be extracted.
  -> APILeagueRequest ExtractPublishDateAPI MimeNoContent ExtractPublishDateAPI200Response MimeJSON
extractPublishDateAPI (Url url) =
  _mkRequest "GET" ["/extract-publish-date"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("url", Just url)

data ExtractPublishDateAPI  
-- | @application/json@
instance Produces ExtractPublishDateAPI MimeJSON


-- *** retrievePageRankAPI

-- | @GET \/retrieve-page-rank@
-- 
-- Retrieve Page Rank API
-- 
-- This API allows you to retrieve the page rank of a given URL. The API returns the page rank, the position of the URL in the search results, and the percentile of the page rank.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
retrievePageRankAPI
  :: Domain -- ^ "domain" -  The domain for which the page rank should be returned.
  -> APILeagueRequest RetrievePageRankAPI MimeNoContent RetrievePageRankAPI200Response MimeJSON
retrievePageRankAPI (Domain domain) =
  _mkRequest "GET" ["/retrieve-page-rank"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("domain", Just domain)

data RetrievePageRankAPI  
-- | @application/json@
instance Produces RetrievePageRankAPI MimeJSON


-- *** searchWebAPI

-- | @GET \/search-web@
-- 
-- Search Web API
-- 
-- Search the web for a given query. The API returns a list of results with the title, summary, and URL.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
searchWebAPI
  :: Query -- ^ "query" -  The search query.
  -> APILeagueRequest SearchWebAPI MimeNoContent SearchWebAPI200Response MimeJSON
searchWebAPI (Query query) =
  _mkRequest "GET" ["/search-web"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("query", Just query)

data SearchWebAPI  

-- | /Optional Param/ "number" - The number of results to return in range [1,50]
instance HasOptionalParam SearchWebAPI Number where
  applyOptionalParam req (Number xs) =
    req `addQuery` toQuery ("number", Just xs)
-- | @application/json@
instance Produces SearchWebAPI MimeJSON


-- *** verifyEmailAddressAPI

-- | @GET \/verify-email@
-- 
-- Verify Email Address API
-- 
-- This email checker API allows you to validate an email address. The validation will parse the name if possible and check whether the email is not just a disposable junk email address. The API will also check if the email is from a free provider like Gmail, Yahoo, or Hotmail.
-- 
-- AuthMethod: 'AuthApiKeyApiKey', 'AuthApiKeyHeaderApiKey'
-- 
verifyEmailAddressAPI
  :: Email -- ^ "email" -  The email address to verify.
  -> APILeagueRequest VerifyEmailAddressAPI MimeNoContent VerifyEmailAddressAPI200Response MimeJSON
verifyEmailAddressAPI (Email email) =
  _mkRequest "GET" ["/verify-email"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKey)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyHeaderApiKey)
    `addQuery` toQuery ("email", Just email)

data VerifyEmailAddressAPI  
-- | @application/json@
instance Produces VerifyEmailAddressAPI MimeJSON

