/*
API League

API League is a Hub for World Class APIs.

API version: 1.0
Contact: mail@apileague.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse20019ReadabilitySubscores struct for InlineResponse20019ReadabilitySubscores
type InlineResponse20019ReadabilitySubscores struct {
	ReadingTimeSeconds *int32 `json:"reading_time_seconds,omitempty"`
	Forcast *float32 `json:"forcast,omitempty"`
	Flesch *float32 `json:"flesch,omitempty"`
	Smog *float32 `json:"smog,omitempty"`
	Ari *float32 `json:"ari,omitempty"`
	Lix *float32 `json:"lix,omitempty"`
	ColemanLiau *float32 `json:"coleman_liau,omitempty"`
	Kincaid *float32 `json:"kincaid,omitempty"`
	Fog *float32 `json:"fog,omitempty"`
}

// NewInlineResponse20019ReadabilitySubscores instantiates a new InlineResponse20019ReadabilitySubscores object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20019ReadabilitySubscores() *InlineResponse20019ReadabilitySubscores {
	this := InlineResponse20019ReadabilitySubscores{}
	return &this
}

// NewInlineResponse20019ReadabilitySubscoresWithDefaults instantiates a new InlineResponse20019ReadabilitySubscores object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20019ReadabilitySubscoresWithDefaults() *InlineResponse20019ReadabilitySubscores {
	this := InlineResponse20019ReadabilitySubscores{}
	return &this
}

// GetReadingTimeSeconds returns the ReadingTimeSeconds field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetReadingTimeSeconds() int32 {
	if o == nil || o.ReadingTimeSeconds == nil {
		var ret int32
		return ret
	}
	return *o.ReadingTimeSeconds
}

// GetReadingTimeSecondsOk returns a tuple with the ReadingTimeSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetReadingTimeSecondsOk() (*int32, bool) {
	if o == nil || o.ReadingTimeSeconds == nil {
		return nil, false
	}
	return o.ReadingTimeSeconds, true
}

// HasReadingTimeSeconds returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasReadingTimeSeconds() bool {
	if o != nil && o.ReadingTimeSeconds != nil {
		return true
	}

	return false
}

// SetReadingTimeSeconds gets a reference to the given int32 and assigns it to the ReadingTimeSeconds field.
func (o *InlineResponse20019ReadabilitySubscores) SetReadingTimeSeconds(v int32) {
	o.ReadingTimeSeconds = &v
}

// GetForcast returns the Forcast field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetForcast() float32 {
	if o == nil || o.Forcast == nil {
		var ret float32
		return ret
	}
	return *o.Forcast
}

// GetForcastOk returns a tuple with the Forcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetForcastOk() (*float32, bool) {
	if o == nil || o.Forcast == nil {
		return nil, false
	}
	return o.Forcast, true
}

// HasForcast returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasForcast() bool {
	if o != nil && o.Forcast != nil {
		return true
	}

	return false
}

// SetForcast gets a reference to the given float32 and assigns it to the Forcast field.
func (o *InlineResponse20019ReadabilitySubscores) SetForcast(v float32) {
	o.Forcast = &v
}

// GetFlesch returns the Flesch field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetFlesch() float32 {
	if o == nil || o.Flesch == nil {
		var ret float32
		return ret
	}
	return *o.Flesch
}

// GetFleschOk returns a tuple with the Flesch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetFleschOk() (*float32, bool) {
	if o == nil || o.Flesch == nil {
		return nil, false
	}
	return o.Flesch, true
}

// HasFlesch returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasFlesch() bool {
	if o != nil && o.Flesch != nil {
		return true
	}

	return false
}

// SetFlesch gets a reference to the given float32 and assigns it to the Flesch field.
func (o *InlineResponse20019ReadabilitySubscores) SetFlesch(v float32) {
	o.Flesch = &v
}

// GetSmog returns the Smog field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetSmog() float32 {
	if o == nil || o.Smog == nil {
		var ret float32
		return ret
	}
	return *o.Smog
}

// GetSmogOk returns a tuple with the Smog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetSmogOk() (*float32, bool) {
	if o == nil || o.Smog == nil {
		return nil, false
	}
	return o.Smog, true
}

// HasSmog returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasSmog() bool {
	if o != nil && o.Smog != nil {
		return true
	}

	return false
}

// SetSmog gets a reference to the given float32 and assigns it to the Smog field.
func (o *InlineResponse20019ReadabilitySubscores) SetSmog(v float32) {
	o.Smog = &v
}

// GetAri returns the Ari field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetAri() float32 {
	if o == nil || o.Ari == nil {
		var ret float32
		return ret
	}
	return *o.Ari
}

// GetAriOk returns a tuple with the Ari field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetAriOk() (*float32, bool) {
	if o == nil || o.Ari == nil {
		return nil, false
	}
	return o.Ari, true
}

// HasAri returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasAri() bool {
	if o != nil && o.Ari != nil {
		return true
	}

	return false
}

// SetAri gets a reference to the given float32 and assigns it to the Ari field.
func (o *InlineResponse20019ReadabilitySubscores) SetAri(v float32) {
	o.Ari = &v
}

// GetLix returns the Lix field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetLix() float32 {
	if o == nil || o.Lix == nil {
		var ret float32
		return ret
	}
	return *o.Lix
}

// GetLixOk returns a tuple with the Lix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetLixOk() (*float32, bool) {
	if o == nil || o.Lix == nil {
		return nil, false
	}
	return o.Lix, true
}

// HasLix returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasLix() bool {
	if o != nil && o.Lix != nil {
		return true
	}

	return false
}

// SetLix gets a reference to the given float32 and assigns it to the Lix field.
func (o *InlineResponse20019ReadabilitySubscores) SetLix(v float32) {
	o.Lix = &v
}

// GetColemanLiau returns the ColemanLiau field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetColemanLiau() float32 {
	if o == nil || o.ColemanLiau == nil {
		var ret float32
		return ret
	}
	return *o.ColemanLiau
}

// GetColemanLiauOk returns a tuple with the ColemanLiau field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetColemanLiauOk() (*float32, bool) {
	if o == nil || o.ColemanLiau == nil {
		return nil, false
	}
	return o.ColemanLiau, true
}

// HasColemanLiau returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasColemanLiau() bool {
	if o != nil && o.ColemanLiau != nil {
		return true
	}

	return false
}

// SetColemanLiau gets a reference to the given float32 and assigns it to the ColemanLiau field.
func (o *InlineResponse20019ReadabilitySubscores) SetColemanLiau(v float32) {
	o.ColemanLiau = &v
}

// GetKincaid returns the Kincaid field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetKincaid() float32 {
	if o == nil || o.Kincaid == nil {
		var ret float32
		return ret
	}
	return *o.Kincaid
}

// GetKincaidOk returns a tuple with the Kincaid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetKincaidOk() (*float32, bool) {
	if o == nil || o.Kincaid == nil {
		return nil, false
	}
	return o.Kincaid, true
}

// HasKincaid returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasKincaid() bool {
	if o != nil && o.Kincaid != nil {
		return true
	}

	return false
}

// SetKincaid gets a reference to the given float32 and assigns it to the Kincaid field.
func (o *InlineResponse20019ReadabilitySubscores) SetKincaid(v float32) {
	o.Kincaid = &v
}

// GetFog returns the Fog field value if set, zero value otherwise.
func (o *InlineResponse20019ReadabilitySubscores) GetFog() float32 {
	if o == nil || o.Fog == nil {
		var ret float32
		return ret
	}
	return *o.Fog
}

// GetFogOk returns a tuple with the Fog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20019ReadabilitySubscores) GetFogOk() (*float32, bool) {
	if o == nil || o.Fog == nil {
		return nil, false
	}
	return o.Fog, true
}

// HasFog returns a boolean if a field has been set.
func (o *InlineResponse20019ReadabilitySubscores) HasFog() bool {
	if o != nil && o.Fog != nil {
		return true
	}

	return false
}

// SetFog gets a reference to the given float32 and assigns it to the Fog field.
func (o *InlineResponse20019ReadabilitySubscores) SetFog(v float32) {
	o.Fog = &v
}

func (o InlineResponse20019ReadabilitySubscores) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ReadingTimeSeconds != nil {
		toSerialize["reading_time_seconds"] = o.ReadingTimeSeconds
	}
	if o.Forcast != nil {
		toSerialize["forcast"] = o.Forcast
	}
	if o.Flesch != nil {
		toSerialize["flesch"] = o.Flesch
	}
	if o.Smog != nil {
		toSerialize["smog"] = o.Smog
	}
	if o.Ari != nil {
		toSerialize["ari"] = o.Ari
	}
	if o.Lix != nil {
		toSerialize["lix"] = o.Lix
	}
	if o.ColemanLiau != nil {
		toSerialize["coleman_liau"] = o.ColemanLiau
	}
	if o.Kincaid != nil {
		toSerialize["kincaid"] = o.Kincaid
	}
	if o.Fog != nil {
		toSerialize["fog"] = o.Fog
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20019ReadabilitySubscores struct {
	value *InlineResponse20019ReadabilitySubscores
	isSet bool
}

func (v NullableInlineResponse20019ReadabilitySubscores) Get() *InlineResponse20019ReadabilitySubscores {
	return v.value
}

func (v *NullableInlineResponse20019ReadabilitySubscores) Set(val *InlineResponse20019ReadabilitySubscores) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20019ReadabilitySubscores) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20019ReadabilitySubscores) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20019ReadabilitySubscores(val *InlineResponse20019ReadabilitySubscores) *NullableInlineResponse20019ReadabilitySubscores {
	return &NullableInlineResponse20019ReadabilitySubscores{value: val, isSet: true}
}

func (v NullableInlineResponse20019ReadabilitySubscores) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20019ReadabilitySubscores) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


