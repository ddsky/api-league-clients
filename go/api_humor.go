/*
API League

API League is a Hub for World Class APIs.

API version: 1.6.4
Contact: mail@apileague.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apileague

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// HumorAPIService HumorAPI service
type HumorAPIService service

type ApiGenerateNonsenseWordAPIRequest struct {
	ctx context.Context
	ApiService *HumorAPIService
}

func (r ApiGenerateNonsenseWordAPIRequest) Execute() (*GenerateNonsenseWordAPI200Response, *http.Response, error) {
	return r.ApiService.GenerateNonsenseWordAPIExecute(r)
}

/*
GenerateNonsenseWordAPI Generate Nonsense Word API

Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGenerateNonsenseWordAPIRequest
*/
func (a *HumorAPIService) GenerateNonsenseWordAPI(ctx context.Context) ApiGenerateNonsenseWordAPIRequest {
	return ApiGenerateNonsenseWordAPIRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return GenerateNonsenseWordAPI200Response
func (a *HumorAPIService) GenerateNonsenseWordAPIExecute(r ApiGenerateNonsenseWordAPIRequest) (*GenerateNonsenseWordAPI200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GenerateNonsenseWordAPI200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HumorAPIService.GenerateNonsenseWordAPI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/generate-nonsense-word"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api-key", key)
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["headerApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRandomJokeAPIRequest struct {
	ctx context.Context
	ApiService *HumorAPIService
	includeTags *string
	excludeTags *string
	minRating *float64
	maxLength *int32
}

// A comma-separated list of tags the jokes should have.
func (r ApiRandomJokeAPIRequest) IncludeTags(includeTags string) ApiRandomJokeAPIRequest {
	r.includeTags = &includeTags
	return r
}

// A comma-separated list of tags the jokes must not have.
func (r ApiRandomJokeAPIRequest) ExcludeTags(excludeTags string) ApiRandomJokeAPIRequest {
	r.excludeTags = &excludeTags
	return r
}

// The minimum rating in range [0.0,1.0] of the jokes.
func (r ApiRandomJokeAPIRequest) MinRating(minRating float64) ApiRandomJokeAPIRequest {
	r.minRating = &minRating
	return r
}

// The maximum length of the joke in letters.
func (r ApiRandomJokeAPIRequest) MaxLength(maxLength int32) ApiRandomJokeAPIRequest {
	r.maxLength = &maxLength
	return r
}

func (r ApiRandomJokeAPIRequest) Execute() (*SearchJokesAPI200ResponseJokesInner, *http.Response, error) {
	return r.ApiService.RandomJokeAPIExecute(r)
}

/*
RandomJokeAPI Random Joke API

This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as "nsfw" or "religious".

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRandomJokeAPIRequest
*/
func (a *HumorAPIService) RandomJokeAPI(ctx context.Context) ApiRandomJokeAPIRequest {
	return ApiRandomJokeAPIRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchJokesAPI200ResponseJokesInner
func (a *HumorAPIService) RandomJokeAPIExecute(r ApiRandomJokeAPIRequest) (*SearchJokesAPI200ResponseJokesInner, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchJokesAPI200ResponseJokesInner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HumorAPIService.RandomJokeAPI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/retrieve-random-joke"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include-tags", r.includeTags, "")
	}
	if r.excludeTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude-tags", r.excludeTags, "")
	}
	if r.minRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min-rating", r.minRating, "")
	}
	if r.maxLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max-length", r.maxLength, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api-key", key)
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["headerApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRandomMemeAPIRequest struct {
	ctx context.Context
	ApiService *HumorAPIService
	keywords *string
	keywordsInImage *bool
	mediaType *string
	minRating *float64
	maxAgeDays *int32
}

// A comma-separated list of words that must occur in the meme.
func (r ApiRandomMemeAPIRequest) Keywords(keywords string) ApiRandomMemeAPIRequest {
	r.keywords = &keywords
	return r
}

// Whether the keywords must occur in the image.
func (r ApiRandomMemeAPIRequest) KeywordsInImage(keywordsInImage bool) ApiRandomMemeAPIRequest {
	r.keywordsInImage = &keywordsInImage
	return r
}

// The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;).
func (r ApiRandomMemeAPIRequest) MediaType(mediaType string) ApiRandomMemeAPIRequest {
	r.mediaType = &mediaType
	return r
}

// The minimum rating in range [0.0,1.0] of the meme.
func (r ApiRandomMemeAPIRequest) MinRating(minRating float64) ApiRandomMemeAPIRequest {
	r.minRating = &minRating
	return r
}

// The maximum age of the meme in days.
func (r ApiRandomMemeAPIRequest) MaxAgeDays(maxAgeDays int32) ApiRandomMemeAPIRequest {
	r.maxAgeDays = &maxAgeDays
	return r
}

func (r ApiRandomMemeAPIRequest) Execute() (*RandomMemeAPI200Response, *http.Response, error) {
	return r.ApiService.RandomMemeAPIExecute(r)
}

/*
RandomMemeAPI Random Meme API

Get a random meme out of over 300,000+ memes. To get the latest memes, you can use the max-age-days parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRandomMemeAPIRequest
*/
func (a *HumorAPIService) RandomMemeAPI(ctx context.Context) ApiRandomMemeAPIRequest {
	return ApiRandomMemeAPIRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return RandomMemeAPI200Response
func (a *HumorAPIService) RandomMemeAPIExecute(r ApiRandomMemeAPIRequest) (*RandomMemeAPI200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RandomMemeAPI200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HumorAPIService.RandomMemeAPI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/retrieve-random-meme"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.keywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keywords", r.keywords, "")
	}
	if r.keywordsInImage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keywords-in-image", r.keywordsInImage, "")
	}
	if r.mediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "media-type", r.mediaType, "")
	}
	if r.minRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min-rating", r.minRating, "")
	}
	if r.maxAgeDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max-age-days", r.maxAgeDays, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api-key", key)
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["headerApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchGifsAPIRequest struct {
	ctx context.Context
	ApiService *HumorAPIService
	query *string
	number *int32
}

// The search query.
func (r ApiSearchGifsAPIRequest) Query(query string) ApiSearchGifsAPIRequest {
	r.query = &query
	return r
}

// The number of gifs to return in range [1,10]
func (r ApiSearchGifsAPIRequest) Number(number int32) ApiSearchGifsAPIRequest {
	r.number = &number
	return r
}

func (r ApiSearchGifsAPIRequest) Execute() (*SearchGifsAPI200Response, *http.Response, error) {
	return r.ApiService.SearchGifsAPIExecute(r)
}

/*
SearchGifsAPI Search Gifs API

Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchGifsAPIRequest
*/
func (a *HumorAPIService) SearchGifsAPI(ctx context.Context) ApiSearchGifsAPIRequest {
	return ApiSearchGifsAPIRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchGifsAPI200Response
func (a *HumorAPIService) SearchGifsAPIExecute(r ApiSearchGifsAPIRequest) (*SearchGifsAPI200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchGifsAPI200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HumorAPIService.SearchGifsAPI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search-gifs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}
	if strlen(*r.query) > 300 {
		return localVarReturnValue, nil, reportError("query must have less than 300 elements")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "")
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api-key", key)
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["headerApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchJokesAPIRequest struct {
	ctx context.Context
	ApiService *HumorAPIService
	keywords *string
	includeTags *string
	excludeTags *string
	minRating *float64
	maxLength *float64
	offset *int32
	number *int32
}

// A comma-separated list of words that must occur in the joke.
func (r ApiSearchJokesAPIRequest) Keywords(keywords string) ApiSearchJokesAPIRequest {
	r.keywords = &keywords
	return r
}

// A comma-separated list of tags the jokes should have.
func (r ApiSearchJokesAPIRequest) IncludeTags(includeTags string) ApiSearchJokesAPIRequest {
	r.includeTags = &includeTags
	return r
}

// A comma-separated list of tags the jokes must not have.
func (r ApiSearchJokesAPIRequest) ExcludeTags(excludeTags string) ApiSearchJokesAPIRequest {
	r.excludeTags = &excludeTags
	return r
}

// The minimum rating in range [0.0,1.0] of the jokes.
func (r ApiSearchJokesAPIRequest) MinRating(minRating float64) ApiSearchJokesAPIRequest {
	r.minRating = &minRating
	return r
}

// The maximum length of the joke in letters.
func (r ApiSearchJokesAPIRequest) MaxLength(maxLength float64) ApiSearchJokesAPIRequest {
	r.maxLength = &maxLength
	return r
}

// The number of jokes to skip, between 0 and 1000.
func (r ApiSearchJokesAPIRequest) Offset(offset int32) ApiSearchJokesAPIRequest {
	r.offset = &offset
	return r
}

// The number of jokes, between 1 and 10.
func (r ApiSearchJokesAPIRequest) Number(number int32) ApiSearchJokesAPIRequest {
	r.number = &number
	return r
}

func (r ApiSearchJokesAPIRequest) Execute() (*SearchJokesAPI200Response, *http.Response, error) {
	return r.ApiService.SearchJokesAPIExecute(r)
}

/*
SearchJokesAPI Search Jokes API

With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchJokesAPIRequest
*/
func (a *HumorAPIService) SearchJokesAPI(ctx context.Context) ApiSearchJokesAPIRequest {
	return ApiSearchJokesAPIRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchJokesAPI200Response
func (a *HumorAPIService) SearchJokesAPIExecute(r ApiSearchJokesAPIRequest) (*SearchJokesAPI200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchJokesAPI200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HumorAPIService.SearchJokesAPI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search-jokes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.keywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keywords", r.keywords, "")
	}
	if r.includeTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include-tags", r.includeTags, "")
	}
	if r.excludeTags != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exclude-tags", r.excludeTags, "")
	}
	if r.minRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min-rating", r.minRating, "")
	}
	if r.maxLength != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max-length", r.maxLength, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api-key", key)
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["headerApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchMemesAPIRequest struct {
	ctx context.Context
	ApiService *HumorAPIService
	keywords *string
	keywordsInImage *bool
	mediaType *string
	minRating *float64
	maxAgeDays *int32
	offset *int32
	number *int32
}

// A comma-separated list of words that must occur in the meme.
func (r ApiSearchMemesAPIRequest) Keywords(keywords string) ApiSearchMemesAPIRequest {
	r.keywords = &keywords
	return r
}

// Whether the keywords must occur in the image.
func (r ApiSearchMemesAPIRequest) KeywordsInImage(keywordsInImage bool) ApiSearchMemesAPIRequest {
	r.keywordsInImage = &keywordsInImage
	return r
}

// The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;).
func (r ApiSearchMemesAPIRequest) MediaType(mediaType string) ApiSearchMemesAPIRequest {
	r.mediaType = &mediaType
	return r
}

// The minimum rating in range [0.0,1.0] of the meme.
func (r ApiSearchMemesAPIRequest) MinRating(minRating float64) ApiSearchMemesAPIRequest {
	r.minRating = &minRating
	return r
}

// The maximum age of the meme in days.
func (r ApiSearchMemesAPIRequest) MaxAgeDays(maxAgeDays int32) ApiSearchMemesAPIRequest {
	r.maxAgeDays = &maxAgeDays
	return r
}

// The number of memes to skip, between 0 and 1000.
func (r ApiSearchMemesAPIRequest) Offset(offset int32) ApiSearchMemesAPIRequest {
	r.offset = &offset
	return r
}

// The number of memes, between 1 and 10.
func (r ApiSearchMemesAPIRequest) Number(number int32) ApiSearchMemesAPIRequest {
	r.number = &number
	return r
}

func (r ApiSearchMemesAPIRequest) Execute() (*SearchMemesAPI200Response, *http.Response, error) {
	return r.ApiService.SearchMemesAPIExecute(r)
}

/*
SearchMemesAPI Search Memes API

Search over 300,000 memes by keyword, rating, and age. Most memes are stills (images) but using the media-type you can also get videos. You can even search for text within memes. You'll surely find something funny.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchMemesAPIRequest
*/
func (a *HumorAPIService) SearchMemesAPI(ctx context.Context) ApiSearchMemesAPIRequest {
	return ApiSearchMemesAPIRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SearchMemesAPI200Response
func (a *HumorAPIService) SearchMemesAPIExecute(r ApiSearchMemesAPIRequest) (*SearchMemesAPI200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SearchMemesAPI200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "HumorAPIService.SearchMemesAPI")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search-memes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.keywords != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keywords", r.keywords, "")
	}
	if r.keywordsInImage != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "keywords-in-image", r.keywordsInImage, "")
	}
	if r.mediaType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "media-type", r.mediaType, "")
	}
	if r.minRating != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "min-rating", r.minRating, "")
	}
	if r.maxAgeDays != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max-age-days", r.maxAgeDays, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.number != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "number", r.number, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("api-key", key)
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["headerApiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
