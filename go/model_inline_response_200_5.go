/*
API League

API League is a Hub for World Class APIs.

API version: 1.0
Contact: mail@apileague.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2005 struct for InlineResponse2005
type InlineResponse2005 struct {
	Memes []InlineResponse2005Memes `json:"memes,omitempty"`
	Available *int32 `json:"available,omitempty"`
}

// NewInlineResponse2005 instantiates a new InlineResponse2005 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2005() *InlineResponse2005 {
	this := InlineResponse2005{}
	return &this
}

// NewInlineResponse2005WithDefaults instantiates a new InlineResponse2005 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2005WithDefaults() *InlineResponse2005 {
	this := InlineResponse2005{}
	return &this
}

// GetMemes returns the Memes field value if set, zero value otherwise.
func (o *InlineResponse2005) GetMemes() []InlineResponse2005Memes {
	if o == nil || o.Memes == nil {
		var ret []InlineResponse2005Memes
		return ret
	}
	return o.Memes
}

// GetMemesOk returns a tuple with the Memes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005) GetMemesOk() ([]InlineResponse2005Memes, bool) {
	if o == nil || o.Memes == nil {
		return nil, false
	}
	return o.Memes, true
}

// HasMemes returns a boolean if a field has been set.
func (o *InlineResponse2005) HasMemes() bool {
	if o != nil && o.Memes != nil {
		return true
	}

	return false
}

// SetMemes gets a reference to the given []InlineResponse2005Memes and assigns it to the Memes field.
func (o *InlineResponse2005) SetMemes(v []InlineResponse2005Memes) {
	o.Memes = v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *InlineResponse2005) GetAvailable() int32 {
	if o == nil || o.Available == nil {
		var ret int32
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2005) GetAvailableOk() (*int32, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *InlineResponse2005) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given int32 and assigns it to the Available field.
func (o *InlineResponse2005) SetAvailable(v int32) {
	o.Available = &v
}

func (o InlineResponse2005) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Memes != nil {
		toSerialize["memes"] = o.Memes
	}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2005 struct {
	value *InlineResponse2005
	isSet bool
}

func (v NullableInlineResponse2005) Get() *InlineResponse2005 {
	return v.value
}

func (v *NullableInlineResponse2005) Set(val *InlineResponse2005) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2005) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2005) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2005(val *InlineResponse2005) *NullableInlineResponse2005 {
	return &NullableInlineResponse2005{value: val, isSet: true}
}

func (v NullableInlineResponse2005) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2005) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


