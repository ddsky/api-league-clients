/*
API League

API League is a Hub for World Class APIs.

API version: 1.0.0
Contact: mail@apileague.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apileague

import (
	"encoding/json"
)

// checks if the SearchJokes200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchJokes200Response{}

// SearchJokes200Response struct for SearchJokes200Response
type SearchJokes200Response struct {
	Jokes []SearchJokes200ResponseJokesInner `json:"jokes,omitempty"`
	Available *int32 `json:"available,omitempty"`
}

// NewSearchJokes200Response instantiates a new SearchJokes200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchJokes200Response() *SearchJokes200Response {
	this := SearchJokes200Response{}
	return &this
}

// NewSearchJokes200ResponseWithDefaults instantiates a new SearchJokes200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchJokes200ResponseWithDefaults() *SearchJokes200Response {
	this := SearchJokes200Response{}
	return &this
}

// GetJokes returns the Jokes field value if set, zero value otherwise.
func (o *SearchJokes200Response) GetJokes() []SearchJokes200ResponseJokesInner {
	if o == nil || IsNil(o.Jokes) {
		var ret []SearchJokes200ResponseJokesInner
		return ret
	}
	return o.Jokes
}

// GetJokesOk returns a tuple with the Jokes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJokes200Response) GetJokesOk() ([]SearchJokes200ResponseJokesInner, bool) {
	if o == nil || IsNil(o.Jokes) {
		return nil, false
	}
	return o.Jokes, true
}

// HasJokes returns a boolean if a field has been set.
func (o *SearchJokes200Response) HasJokes() bool {
	if o != nil && !IsNil(o.Jokes) {
		return true
	}

	return false
}

// SetJokes gets a reference to the given []SearchJokes200ResponseJokesInner and assigns it to the Jokes field.
func (o *SearchJokes200Response) SetJokes(v []SearchJokes200ResponseJokesInner) {
	o.Jokes = v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *SearchJokes200Response) GetAvailable() int32 {
	if o == nil || IsNil(o.Available) {
		var ret int32
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchJokes200Response) GetAvailableOk() (*int32, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *SearchJokes200Response) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given int32 and assigns it to the Available field.
func (o *SearchJokes200Response) SetAvailable(v int32) {
	o.Available = &v
}

func (o SearchJokes200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchJokes200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jokes) {
		toSerialize["jokes"] = o.Jokes
	}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	return toSerialize, nil
}

type NullableSearchJokes200Response struct {
	value *SearchJokes200Response
	isSet bool
}

func (v NullableSearchJokes200Response) Get() *SearchJokes200Response {
	return v.value
}

func (v *NullableSearchJokes200Response) Set(val *SearchJokes200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchJokes200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchJokes200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchJokes200Response(val *SearchJokes200Response) *NullableSearchJokes200Response {
	return &NullableSearchJokes200Response{value: val, isSet: true}
}

func (v NullableSearchJokes200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchJokes200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


