/*
API League

API League is a Hub for World Class APIs.

API version: 1.0
Contact: mail@apileague.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse20021Dates struct for InlineResponse20021Dates
type InlineResponse20021Dates struct {
	StartPosition *int32 `json:"start_position,omitempty"`
	Date NullableString `json:"date,omitempty"`
	NormalizedDate *float32 `json:"normalized_date,omitempty"`
	Tag NullableString `json:"tag,omitempty"`
	EndPosition *int32 `json:"end_position,omitempty"`
}

// NewInlineResponse20021Dates instantiates a new InlineResponse20021Dates object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse20021Dates() *InlineResponse20021Dates {
	this := InlineResponse20021Dates{}
	return &this
}

// NewInlineResponse20021DatesWithDefaults instantiates a new InlineResponse20021Dates object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse20021DatesWithDefaults() *InlineResponse20021Dates {
	this := InlineResponse20021Dates{}
	return &this
}

// GetStartPosition returns the StartPosition field value if set, zero value otherwise.
func (o *InlineResponse20021Dates) GetStartPosition() int32 {
	if o == nil || o.StartPosition == nil {
		var ret int32
		return ret
	}
	return *o.StartPosition
}

// GetStartPositionOk returns a tuple with the StartPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021Dates) GetStartPositionOk() (*int32, bool) {
	if o == nil || o.StartPosition == nil {
		return nil, false
	}
	return o.StartPosition, true
}

// HasStartPosition returns a boolean if a field has been set.
func (o *InlineResponse20021Dates) HasStartPosition() bool {
	if o != nil && o.StartPosition != nil {
		return true
	}

	return false
}

// SetStartPosition gets a reference to the given int32 and assigns it to the StartPosition field.
func (o *InlineResponse20021Dates) SetStartPosition(v int32) {
	o.StartPosition = &v
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineResponse20021Dates) GetDate() string {
	if o == nil || o.Date.Get() == nil {
		var ret string
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse20021Dates) GetDateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *InlineResponse20021Dates) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableString and assigns it to the Date field.
func (o *InlineResponse20021Dates) SetDate(v string) {
	o.Date.Set(&v)
}
// SetDateNil sets the value for Date to be an explicit nil
func (o *InlineResponse20021Dates) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *InlineResponse20021Dates) UnsetDate() {
	o.Date.Unset()
}

// GetNormalizedDate returns the NormalizedDate field value if set, zero value otherwise.
func (o *InlineResponse20021Dates) GetNormalizedDate() float32 {
	if o == nil || o.NormalizedDate == nil {
		var ret float32
		return ret
	}
	return *o.NormalizedDate
}

// GetNormalizedDateOk returns a tuple with the NormalizedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021Dates) GetNormalizedDateOk() (*float32, bool) {
	if o == nil || o.NormalizedDate == nil {
		return nil, false
	}
	return o.NormalizedDate, true
}

// HasNormalizedDate returns a boolean if a field has been set.
func (o *InlineResponse20021Dates) HasNormalizedDate() bool {
	if o != nil && o.NormalizedDate != nil {
		return true
	}

	return false
}

// SetNormalizedDate gets a reference to the given float32 and assigns it to the NormalizedDate field.
func (o *InlineResponse20021Dates) SetNormalizedDate(v float32) {
	o.NormalizedDate = &v
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineResponse20021Dates) GetTag() string {
	if o == nil || o.Tag.Get() == nil {
		var ret string
		return ret
	}
	return *o.Tag.Get()
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse20021Dates) GetTagOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Tag.Get(), o.Tag.IsSet()
}

// HasTag returns a boolean if a field has been set.
func (o *InlineResponse20021Dates) HasTag() bool {
	if o != nil && o.Tag.IsSet() {
		return true
	}

	return false
}

// SetTag gets a reference to the given NullableString and assigns it to the Tag field.
func (o *InlineResponse20021Dates) SetTag(v string) {
	o.Tag.Set(&v)
}
// SetTagNil sets the value for Tag to be an explicit nil
func (o *InlineResponse20021Dates) SetTagNil() {
	o.Tag.Set(nil)
}

// UnsetTag ensures that no value is present for Tag, not even an explicit nil
func (o *InlineResponse20021Dates) UnsetTag() {
	o.Tag.Unset()
}

// GetEndPosition returns the EndPosition field value if set, zero value otherwise.
func (o *InlineResponse20021Dates) GetEndPosition() int32 {
	if o == nil || o.EndPosition == nil {
		var ret int32
		return ret
	}
	return *o.EndPosition
}

// GetEndPositionOk returns a tuple with the EndPosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse20021Dates) GetEndPositionOk() (*int32, bool) {
	if o == nil || o.EndPosition == nil {
		return nil, false
	}
	return o.EndPosition, true
}

// HasEndPosition returns a boolean if a field has been set.
func (o *InlineResponse20021Dates) HasEndPosition() bool {
	if o != nil && o.EndPosition != nil {
		return true
	}

	return false
}

// SetEndPosition gets a reference to the given int32 and assigns it to the EndPosition field.
func (o *InlineResponse20021Dates) SetEndPosition(v int32) {
	o.EndPosition = &v
}

func (o InlineResponse20021Dates) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StartPosition != nil {
		toSerialize["start_position"] = o.StartPosition
	}
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if o.NormalizedDate != nil {
		toSerialize["normalized_date"] = o.NormalizedDate
	}
	if o.Tag.IsSet() {
		toSerialize["tag"] = o.Tag.Get()
	}
	if o.EndPosition != nil {
		toSerialize["end_position"] = o.EndPosition
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse20021Dates struct {
	value *InlineResponse20021Dates
	isSet bool
}

func (v NullableInlineResponse20021Dates) Get() *InlineResponse20021Dates {
	return v.value
}

func (v *NullableInlineResponse20021Dates) Set(val *InlineResponse20021Dates) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse20021Dates) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse20021Dates) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse20021Dates(val *InlineResponse20021Dates) *NullableInlineResponse20021Dates {
	return &NullableInlineResponse20021Dates{value: val, isSet: true}
}

func (v NullableInlineResponse20021Dates) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse20021Dates) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


