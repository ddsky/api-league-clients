/*
API League

API League is a Hub for World Class APIs.

API version: 1.0
Contact: mail@apileague.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2004Jokes struct for InlineResponse2004Jokes
type InlineResponse2004Jokes struct {
	Joke NullableString `json:"joke,omitempty"`
}

// NewInlineResponse2004Jokes instantiates a new InlineResponse2004Jokes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2004Jokes() *InlineResponse2004Jokes {
	this := InlineResponse2004Jokes{}
	return &this
}

// NewInlineResponse2004JokesWithDefaults instantiates a new InlineResponse2004Jokes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2004JokesWithDefaults() *InlineResponse2004Jokes {
	this := InlineResponse2004Jokes{}
	return &this
}

// GetJoke returns the Joke field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineResponse2004Jokes) GetJoke() string {
	if o == nil || o.Joke.Get() == nil {
		var ret string
		return ret
	}
	return *o.Joke.Get()
}

// GetJokeOk returns a tuple with the Joke field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineResponse2004Jokes) GetJokeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Joke.Get(), o.Joke.IsSet()
}

// HasJoke returns a boolean if a field has been set.
func (o *InlineResponse2004Jokes) HasJoke() bool {
	if o != nil && o.Joke.IsSet() {
		return true
	}

	return false
}

// SetJoke gets a reference to the given NullableString and assigns it to the Joke field.
func (o *InlineResponse2004Jokes) SetJoke(v string) {
	o.Joke.Set(&v)
}
// SetJokeNil sets the value for Joke to be an explicit nil
func (o *InlineResponse2004Jokes) SetJokeNil() {
	o.Joke.Set(nil)
}

// UnsetJoke ensures that no value is present for Joke, not even an explicit nil
func (o *InlineResponse2004Jokes) UnsetJoke() {
	o.Joke.Unset()
}

func (o InlineResponse2004Jokes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Joke.IsSet() {
		toSerialize["joke"] = o.Joke.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2004Jokes struct {
	value *InlineResponse2004Jokes
	isSet bool
}

func (v NullableInlineResponse2004Jokes) Get() *InlineResponse2004Jokes {
	return v.value
}

func (v *NullableInlineResponse2004Jokes) Set(val *InlineResponse2004Jokes) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2004Jokes) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2004Jokes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2004Jokes(val *InlineResponse2004Jokes) *NullableInlineResponse2004Jokes {
	return &NullableInlineResponse2004Jokes{value: val, isSet: true}
}

func (v NullableInlineResponse2004Jokes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2004Jokes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


