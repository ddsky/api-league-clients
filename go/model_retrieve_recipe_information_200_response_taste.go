/*
API League

API League is a Hub for World Class APIs.

API version: 1.6.2
Contact: mail@apileague.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apileague

import (
	"encoding/json"
)

// checks if the RetrieveRecipeInformation200ResponseTaste type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RetrieveRecipeInformation200ResponseTaste{}

// RetrieveRecipeInformation200ResponseTaste struct for RetrieveRecipeInformation200ResponseTaste
type RetrieveRecipeInformation200ResponseTaste struct {
	Fattiness *float32 `json:"fattiness,omitempty"`
	Spiciness *int32 `json:"spiciness,omitempty"`
	Saltiness *int32 `json:"saltiness,omitempty"`
	Bitterness *float32 `json:"bitterness,omitempty"`
	Savoriness *float32 `json:"savoriness,omitempty"`
	Sweetness *float32 `json:"sweetness,omitempty"`
	Sourness *float32 `json:"sourness,omitempty"`
}

// NewRetrieveRecipeInformation200ResponseTaste instantiates a new RetrieveRecipeInformation200ResponseTaste object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetrieveRecipeInformation200ResponseTaste() *RetrieveRecipeInformation200ResponseTaste {
	this := RetrieveRecipeInformation200ResponseTaste{}
	return &this
}

// NewRetrieveRecipeInformation200ResponseTasteWithDefaults instantiates a new RetrieveRecipeInformation200ResponseTaste object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetrieveRecipeInformation200ResponseTasteWithDefaults() *RetrieveRecipeInformation200ResponseTaste {
	this := RetrieveRecipeInformation200ResponseTaste{}
	return &this
}

// GetFattiness returns the Fattiness field value if set, zero value otherwise.
func (o *RetrieveRecipeInformation200ResponseTaste) GetFattiness() float32 {
	if o == nil || IsNil(o.Fattiness) {
		var ret float32
		return ret
	}
	return *o.Fattiness
}

// GetFattinessOk returns a tuple with the Fattiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) GetFattinessOk() (*float32, bool) {
	if o == nil || IsNil(o.Fattiness) {
		return nil, false
	}
	return o.Fattiness, true
}

// HasFattiness returns a boolean if a field has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) HasFattiness() bool {
	if o != nil && !IsNil(o.Fattiness) {
		return true
	}

	return false
}

// SetFattiness gets a reference to the given float32 and assigns it to the Fattiness field.
func (o *RetrieveRecipeInformation200ResponseTaste) SetFattiness(v float32) {
	o.Fattiness = &v
}

// GetSpiciness returns the Spiciness field value if set, zero value otherwise.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSpiciness() int32 {
	if o == nil || IsNil(o.Spiciness) {
		var ret int32
		return ret
	}
	return *o.Spiciness
}

// GetSpicinessOk returns a tuple with the Spiciness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSpicinessOk() (*int32, bool) {
	if o == nil || IsNil(o.Spiciness) {
		return nil, false
	}
	return o.Spiciness, true
}

// HasSpiciness returns a boolean if a field has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) HasSpiciness() bool {
	if o != nil && !IsNil(o.Spiciness) {
		return true
	}

	return false
}

// SetSpiciness gets a reference to the given int32 and assigns it to the Spiciness field.
func (o *RetrieveRecipeInformation200ResponseTaste) SetSpiciness(v int32) {
	o.Spiciness = &v
}

// GetSaltiness returns the Saltiness field value if set, zero value otherwise.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSaltiness() int32 {
	if o == nil || IsNil(o.Saltiness) {
		var ret int32
		return ret
	}
	return *o.Saltiness
}

// GetSaltinessOk returns a tuple with the Saltiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSaltinessOk() (*int32, bool) {
	if o == nil || IsNil(o.Saltiness) {
		return nil, false
	}
	return o.Saltiness, true
}

// HasSaltiness returns a boolean if a field has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) HasSaltiness() bool {
	if o != nil && !IsNil(o.Saltiness) {
		return true
	}

	return false
}

// SetSaltiness gets a reference to the given int32 and assigns it to the Saltiness field.
func (o *RetrieveRecipeInformation200ResponseTaste) SetSaltiness(v int32) {
	o.Saltiness = &v
}

// GetBitterness returns the Bitterness field value if set, zero value otherwise.
func (o *RetrieveRecipeInformation200ResponseTaste) GetBitterness() float32 {
	if o == nil || IsNil(o.Bitterness) {
		var ret float32
		return ret
	}
	return *o.Bitterness
}

// GetBitternessOk returns a tuple with the Bitterness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) GetBitternessOk() (*float32, bool) {
	if o == nil || IsNil(o.Bitterness) {
		return nil, false
	}
	return o.Bitterness, true
}

// HasBitterness returns a boolean if a field has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) HasBitterness() bool {
	if o != nil && !IsNil(o.Bitterness) {
		return true
	}

	return false
}

// SetBitterness gets a reference to the given float32 and assigns it to the Bitterness field.
func (o *RetrieveRecipeInformation200ResponseTaste) SetBitterness(v float32) {
	o.Bitterness = &v
}

// GetSavoriness returns the Savoriness field value if set, zero value otherwise.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSavoriness() float32 {
	if o == nil || IsNil(o.Savoriness) {
		var ret float32
		return ret
	}
	return *o.Savoriness
}

// GetSavorinessOk returns a tuple with the Savoriness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSavorinessOk() (*float32, bool) {
	if o == nil || IsNil(o.Savoriness) {
		return nil, false
	}
	return o.Savoriness, true
}

// HasSavoriness returns a boolean if a field has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) HasSavoriness() bool {
	if o != nil && !IsNil(o.Savoriness) {
		return true
	}

	return false
}

// SetSavoriness gets a reference to the given float32 and assigns it to the Savoriness field.
func (o *RetrieveRecipeInformation200ResponseTaste) SetSavoriness(v float32) {
	o.Savoriness = &v
}

// GetSweetness returns the Sweetness field value if set, zero value otherwise.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSweetness() float32 {
	if o == nil || IsNil(o.Sweetness) {
		var ret float32
		return ret
	}
	return *o.Sweetness
}

// GetSweetnessOk returns a tuple with the Sweetness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSweetnessOk() (*float32, bool) {
	if o == nil || IsNil(o.Sweetness) {
		return nil, false
	}
	return o.Sweetness, true
}

// HasSweetness returns a boolean if a field has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) HasSweetness() bool {
	if o != nil && !IsNil(o.Sweetness) {
		return true
	}

	return false
}

// SetSweetness gets a reference to the given float32 and assigns it to the Sweetness field.
func (o *RetrieveRecipeInformation200ResponseTaste) SetSweetness(v float32) {
	o.Sweetness = &v
}

// GetSourness returns the Sourness field value if set, zero value otherwise.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSourness() float32 {
	if o == nil || IsNil(o.Sourness) {
		var ret float32
		return ret
	}
	return *o.Sourness
}

// GetSournessOk returns a tuple with the Sourness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) GetSournessOk() (*float32, bool) {
	if o == nil || IsNil(o.Sourness) {
		return nil, false
	}
	return o.Sourness, true
}

// HasSourness returns a boolean if a field has been set.
func (o *RetrieveRecipeInformation200ResponseTaste) HasSourness() bool {
	if o != nil && !IsNil(o.Sourness) {
		return true
	}

	return false
}

// SetSourness gets a reference to the given float32 and assigns it to the Sourness field.
func (o *RetrieveRecipeInformation200ResponseTaste) SetSourness(v float32) {
	o.Sourness = &v
}

func (o RetrieveRecipeInformation200ResponseTaste) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RetrieveRecipeInformation200ResponseTaste) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fattiness) {
		toSerialize["fattiness"] = o.Fattiness
	}
	if !IsNil(o.Spiciness) {
		toSerialize["spiciness"] = o.Spiciness
	}
	if !IsNil(o.Saltiness) {
		toSerialize["saltiness"] = o.Saltiness
	}
	if !IsNil(o.Bitterness) {
		toSerialize["bitterness"] = o.Bitterness
	}
	if !IsNil(o.Savoriness) {
		toSerialize["savoriness"] = o.Savoriness
	}
	if !IsNil(o.Sweetness) {
		toSerialize["sweetness"] = o.Sweetness
	}
	if !IsNil(o.Sourness) {
		toSerialize["sourness"] = o.Sourness
	}
	return toSerialize, nil
}

type NullableRetrieveRecipeInformation200ResponseTaste struct {
	value *RetrieveRecipeInformation200ResponseTaste
	isSet bool
}

func (v NullableRetrieveRecipeInformation200ResponseTaste) Get() *RetrieveRecipeInformation200ResponseTaste {
	return v.value
}

func (v *NullableRetrieveRecipeInformation200ResponseTaste) Set(val *RetrieveRecipeInformation200ResponseTaste) {
	v.value = val
	v.isSet = true
}

func (v NullableRetrieveRecipeInformation200ResponseTaste) IsSet() bool {
	return v.isSet
}

func (v *NullableRetrieveRecipeInformation200ResponseTaste) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetrieveRecipeInformation200ResponseTaste(val *RetrieveRecipeInformation200ResponseTaste) *NullableRetrieveRecipeInformation200ResponseTaste {
	return &NullableRetrieveRecipeInformation200ResponseTaste{value: val, isSet: true}
}

func (v NullableRetrieveRecipeInformation200ResponseTaste) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetrieveRecipeInformation200ResponseTaste) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


