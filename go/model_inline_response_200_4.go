/*
API League

API League is a Hub for World Class APIs.

API version: 1.0
Contact: mail@apileague.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineResponse2004 struct for InlineResponse2004
type InlineResponse2004 struct {
	Jokes []InlineResponse2004Jokes `json:"jokes,omitempty"`
	Available *int32 `json:"available,omitempty"`
}

// NewInlineResponse2004 instantiates a new InlineResponse2004 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineResponse2004() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// NewInlineResponse2004WithDefaults instantiates a new InlineResponse2004 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineResponse2004WithDefaults() *InlineResponse2004 {
	this := InlineResponse2004{}
	return &this
}

// GetJokes returns the Jokes field value if set, zero value otherwise.
func (o *InlineResponse2004) GetJokes() []InlineResponse2004Jokes {
	if o == nil || o.Jokes == nil {
		var ret []InlineResponse2004Jokes
		return ret
	}
	return o.Jokes
}

// GetJokesOk returns a tuple with the Jokes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetJokesOk() ([]InlineResponse2004Jokes, bool) {
	if o == nil || o.Jokes == nil {
		return nil, false
	}
	return o.Jokes, true
}

// HasJokes returns a boolean if a field has been set.
func (o *InlineResponse2004) HasJokes() bool {
	if o != nil && o.Jokes != nil {
		return true
	}

	return false
}

// SetJokes gets a reference to the given []InlineResponse2004Jokes and assigns it to the Jokes field.
func (o *InlineResponse2004) SetJokes(v []InlineResponse2004Jokes) {
	o.Jokes = v
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *InlineResponse2004) GetAvailable() int32 {
	if o == nil || o.Available == nil {
		var ret int32
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineResponse2004) GetAvailableOk() (*int32, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *InlineResponse2004) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given int32 and assigns it to the Available field.
func (o *InlineResponse2004) SetAvailable(v int32) {
	o.Available = &v
}

func (o InlineResponse2004) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Jokes != nil {
		toSerialize["jokes"] = o.Jokes
	}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	return json.Marshal(toSerialize)
}

type NullableInlineResponse2004 struct {
	value *InlineResponse2004
	isSet bool
}

func (v NullableInlineResponse2004) Get() *InlineResponse2004 {
	return v.value
}

func (v *NullableInlineResponse2004) Set(val *InlineResponse2004) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineResponse2004) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineResponse2004) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineResponse2004(val *InlineResponse2004) *NullableInlineResponse2004 {
	return &NullableInlineResponse2004{value: val, isSet: true}
}

func (v NullableInlineResponse2004) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineResponse2004) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


