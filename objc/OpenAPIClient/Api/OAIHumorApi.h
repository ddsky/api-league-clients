#import <Foundation/Foundation.h>
#import "OAIGenerateNonsenseWord200Response.h"
#import "OAIRandomMeme200Response.h"
#import "OAISearchGifs200Response.h"
#import "OAISearchJokes200Response.h"
#import "OAISearchJokes200ResponseJokesInner.h"
#import "OAISearchMemes200Response.h"
#import "OAIApi.h"

/**
* API League
* API League is a Hub for World Class APIs.
*
* The version of the OpenAPI document: 1.0.0
* Contact: mail@apileague.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIHumorApi: NSObject <OAIApi>

extern NSString* kOAIHumorApiErrorDomain;
extern NSInteger kOAIHumorApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Generate Nonsense Word
/// Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
///
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:406 message:"Not Acceptable",
///  code:429 message:"Too Many Requests"
///
/// @return OAIGenerateNonsenseWord200Response*
-(NSURLSessionTask*) generateNonsenseWordWithCompletionHandler: 
    (void (^)(OAIGenerateNonsenseWord200Response* output, NSError* error)) handler;


/// Random Joke
/// This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \"nsfw\" or \"religious\".
///
/// @param includeTags A comma-separated list of tags the jokes should have. (optional)
/// @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
/// @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
/// @param maxLength The maximum length of the joke in letters. (optional)
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:406 message:"Not Acceptable",
///  code:429 message:"Too Many Requests"
///
/// @return OAISearchJokes200ResponseJokesInner*
-(NSURLSessionTask*) randomJokeWithIncludeTags: (NSString*) includeTags
    excludeTags: (NSString*) excludeTags
    minRating: (NSNumber*) minRating
    maxLength: (NSNumber*) maxLength
    completionHandler: (void (^)(OAISearchJokes200ResponseJokesInner* output, NSError* error)) handler;


/// Random Meme
/// Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
///
/// @param keywords A comma-separated list of words that must occur in the meme. (optional)
/// @param keywordsInImage Whether the keywords must occur in the image. (optional)
/// @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
/// @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
/// @param maxAgeDays The maximum age of the meme in days. (optional)
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:406 message:"Not Acceptable",
///  code:429 message:"Too Many Requests"
///
/// @return OAIRandomMeme200Response*
-(NSURLSessionTask*) randomMemeWithKeywords: (NSString*) keywords
    keywordsInImage: (NSNumber*) keywordsInImage
    mediaType: (NSString*) mediaType
    minRating: (NSNumber*) minRating
    maxAgeDays: (NSNumber*) maxAgeDays
    completionHandler: (void (^)(OAIRandomMeme200Response* output, NSError* error)) handler;


/// Search Gifs
/// Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
///
/// @param query The search query.
/// @param number The number of gifs to return in range [1,10] (optional)
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:406 message:"Not Acceptable",
///  code:429 message:"Too Many Requests"
///
/// @return OAISearchGifs200Response*
-(NSURLSessionTask*) searchGifsWithQuery: (NSString*) query
    number: (NSNumber*) number
    completionHandler: (void (^)(OAISearchGifs200Response* output, NSError* error)) handler;


/// Search Jokes
/// With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
///
/// @param keywords A comma-separated list of words that must occur in the joke. (optional)
/// @param includeTags A comma-separated list of tags the jokes should have. (optional)
/// @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
/// @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
/// @param maxLength The maximum length of the joke in letters. (optional)
/// @param offset The number of jokes to skip, between 0 and 1000. (optional)
/// @param number The number of jokes, between 1 and 10. (optional)
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:406 message:"Not Acceptable",
///  code:429 message:"Too Many Requests"
///
/// @return OAISearchJokes200Response*
-(NSURLSessionTask*) searchJokesWithKeywords: (NSString*) keywords
    includeTags: (NSString*) includeTags
    excludeTags: (NSString*) excludeTags
    minRating: (NSNumber*) minRating
    maxLength: (NSNumber*) maxLength
    offset: (NSNumber*) offset
    number: (NSNumber*) number
    completionHandler: (void (^)(OAISearchJokes200Response* output, NSError* error)) handler;


/// Search Memes
/// With over 200,000 memes, you'll surely find something funny. You can even search for text within memes and filter by user ratings.
///
/// @param keywords A comma-separated list of words that must occur in the meme. (optional)
/// @param keywordsInImage Whether the keywords must occur in the image. (optional)
/// @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
/// @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
/// @param maxAgeDays The maximum age of the meme in days. (optional)
/// @param offset The number of memes to skip, between 0 and 1000. (optional)
/// @param number The number of memes, between 1 and 10. (optional)
/// 
///  code:200 message:"Success",
///  code:401 message:"Unauthorized",
///  code:402 message:"Payment Required",
///  code:403 message:"Forbidden",
///  code:404 message:"Not Found",
///  code:406 message:"Not Acceptable",
///  code:429 message:"Too Many Requests"
///
/// @return OAISearchMemes200Response*
-(NSURLSessionTask*) searchMemesWithKeywords: (NSString*) keywords
    keywordsInImage: (NSNumber*) keywordsInImage
    mediaType: (NSString*) mediaType
    minRating: (NSNumber*) minRating
    maxAgeDays: (NSNumber*) maxAgeDays
    offset: (NSNumber*) offset
    number: (NSNumber*) number
    completionHandler: (void (^)(OAISearchMemes200Response* output, NSError* error)) handler;



@end
