"""
    API League

    API League is a Hub for World Class APIs.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@apileague.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.inline_response20010 import InlineResponse20010
from openapi_client.model.inline_response2009 import InlineResponse2009


class KnowledgeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.random_quote_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20010,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/retrieve-random-quote',
                'operation_id': 'random_quote',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'min_length',
                    'max_length',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'min_length',
                    'max_length',
                ]
            },
            root_map={
                'validations': {
                    ('min_length',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 1,
                    },
                    ('max_length',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'min_length':
                        (int,),
                    'max_length':
                        (int,),
                },
                'attribute_map': {
                    'min_length': 'min-length',
                    'max_length': 'max-length',
                },
                'location_map': {
                    'min_length': 'query',
                    'max_length': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.random_trivia_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2009,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/retrieve-random-trivia',
                'operation_id': 'random_trivia',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'max_length',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'max_length',
                ]
            },
            root_map={
                'validations': {
                    ('max_length',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'max_length':
                        (int,),
                },
                'attribute_map': {
                    'max_length': 'max-length',
                },
                'location_map': {
                    'max_length': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def random_quote(
        self,
        **kwargs
    ):
        """Random Quote  # noqa: E501

        This API returns a random quote from a collection of quotes. The quotes are from famous people and are in English.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.random_quote(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            min_length (int): The minimum length of the quote in letters.. [optional]
            max_length (int): The maximum length of the quote in letters.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20010
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.random_quote_endpoint.call_with_http_info(**kwargs)

    def random_trivia(
        self,
        **kwargs
    ):
        """Random Trivia  # noqa: E501

        This endpoint returns a random piece of trivia.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.random_trivia(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            max_length (int): The maximum length of the trivia in letters.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2009
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.random_trivia_endpoint.call_with_http_info(**kwargs)

