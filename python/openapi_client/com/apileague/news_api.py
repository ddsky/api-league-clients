"""
    API League

    API League is a Hub for World Class APIs.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@apileague.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.inline_response2002 import InlineResponse2002
from openapi_client.model.inline_response2003 import InlineResponse2003


class NewsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.extract_news_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2003,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/extract-news',
                'operation_id': 'extract_news',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'url',
                    'analyze',
                ],
                'required': [
                    'url',
                    'analyze',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'url',
                ]
            },
            root_map={
                'validations': {
                    ('url',): {
                        'max_length': 1000,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'url':
                        (str,),
                    'analyze':
                        (bool,),
                },
                'attribute_map': {
                    'url': 'url',
                    'analyze': 'analyze',
                },
                'location_map': {
                    'url': 'query',
                    'analyze': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_news_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2002,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/search-news',
                'operation_id': 'search_news',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'text',
                    'source_countries',
                    'language',
                    'min_sentiment',
                    'max_sentiment',
                    'earliest_publish_date',
                    'latest_publish_date',
                    'news_sources',
                    'authors',
                    'entities',
                    'location_filter',
                    'sort',
                    'sort_direction',
                    'offset',
                    'number',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'text',
                    'source_countries',
                    'language',
                    'min_sentiment',
                    'max_sentiment',
                    'earliest_publish_date',
                    'latest_publish_date',
                    'news_sources',
                    'authors',
                    'entities',
                    'location_filter',
                    'sort',
                    'sort_direction',
                    'offset',
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('text',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('source_countries',): {
                        'max_length': 100,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('language',): {
                        'max_length': 2,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('min_sentiment',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': -1,
                    },
                    ('max_sentiment',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': -1,
                    },
                    ('earliest_publish_date',): {
                        'max_length': 100,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('latest_publish_date',): {
                        'max_length': 100,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('news_sources',): {
                        'max_length': 10000,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('authors',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('entities',): {
                        'max_length': 10000,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('location_filter',): {
                        'max_length': 100,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('sort',): {
                        'max_length': 100,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('sort_direction',): {
                        'max_length': 4,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('offset',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 0,
                    },
                    ('number',): {

                        'inclusive_maximum': 100,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'text':
                        (str,),
                    'source_countries':
                        (str,),
                    'language':
                        (str,),
                    'min_sentiment':
                        (float,),
                    'max_sentiment':
                        (float,),
                    'earliest_publish_date':
                        (str,),
                    'latest_publish_date':
                        (str,),
                    'news_sources':
                        (str,),
                    'authors':
                        (str,),
                    'entities':
                        (str,),
                    'location_filter':
                        (str,),
                    'sort':
                        (str,),
                    'sort_direction':
                        (str,),
                    'offset':
                        (int,),
                    'number':
                        (int,),
                },
                'attribute_map': {
                    'text': 'text',
                    'source_countries': 'source-countries',
                    'language': 'language',
                    'min_sentiment': 'min-sentiment',
                    'max_sentiment': 'max-sentiment',
                    'earliest_publish_date': 'earliest-publish-date',
                    'latest_publish_date': 'latest-publish-date',
                    'news_sources': 'news-sources',
                    'authors': 'authors',
                    'entities': 'entities',
                    'location_filter': 'location-filter',
                    'sort': 'sort',
                    'sort_direction': 'sort-direction',
                    'offset': 'offset',
                    'number': 'number',
                },
                'location_map': {
                    'text': 'query',
                    'source_countries': 'query',
                    'language': 'query',
                    'min_sentiment': 'query',
                    'max_sentiment': 'query',
                    'earliest_publish_date': 'query',
                    'latest_publish_date': 'query',
                    'news_sources': 'query',
                    'authors': 'query',
                    'entities': 'query',
                    'location_filter': 'query',
                    'sort': 'query',
                    'sort_direction': 'query',
                    'offset': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def extract_news(
        self,
        url,
        analyze,
        **kwargs
    ):
        """Extract News  # noqa: E501

        Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.extract_news(url, analyze, async_req=True)
        >>> result = thread.get()

        Args:
            url (str): The url of the news.
            analyze (bool): Whether to analyze the news (extract entities etc.)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2003
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['url'] = \
            url
        kwargs['analyze'] = \
            analyze
        return self.extract_news_endpoint.call_with_http_info(**kwargs)

    def search_news(
        self,
        **kwargs
    ):
        """Search News  # noqa: E501

        Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_news(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            text (str): The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. [optional]
            source_countries (str): A comma-separated list of ISO 3166 country codes from which the news should originate.. [optional]
            language (str): The ISO 6391 language code of the news.. [optional]
            min_sentiment (float): The minimal sentiment of the news in range [-1,1].. [optional]
            max_sentiment (float): The maximal sentiment of the news in range [-1,1].. [optional]
            earliest_publish_date (str): The news must have been published after this date.. [optional]
            latest_publish_date (str): The news must have been published before this date.. [optional]
            news_sources (str): A comma-separated list of news sources from which the news should originate.. [optional]
            authors (str): A comma-separated list of author names. Only news from any of the given authors will be returned.. [optional]
            entities (str): Filter news by entities (see semantic types).. [optional]
            location_filter (str): Filter news by radius around a certain location. Format is \"latitude,longitude,radius in kilometers\". [optional]
            sort (str): The sorting criteria (publish-time or sentiment).. [optional]
            sort_direction (str): Whether to sort ascending or descending (ASC or DESC).. [optional]
            offset (int): The number of news to skip in range [0,10000]. [optional]
            number (int): The number of news to return in range [1,100]. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2002
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.search_news_endpoint.call_with_http_info(**kwargs)

