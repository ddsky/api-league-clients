"""
    API League

    API League is a Hub for World Class APIs.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@apileague.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.inline_response20011 import InlineResponse20011


class ArtApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.image_to_ascii_art_by_url_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/convert-image-to-ascii-txt',
                'operation_id': 'image_to_ascii_art_by_url',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'url',
                    'width',
                    'height',
                ],
                'required': [
                    'url',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'url',
                    'width',
                    'height',
                ]
            },
            root_map={
                'validations': {
                    ('url',): {
                        'max_length': 1000,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('width',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 1,
                    },
                    ('height',): {

                        'inclusive_maximum': 500,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'url':
                        (str,),
                    'width':
                        (int,),
                    'height':
                        (int,),
                },
                'attribute_map': {
                    'url': 'url',
                    'width': 'width',
                    'height': 'height',
                },
                'location_map': {
                    'url': 'query',
                    'width': 'query',
                    'height': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.random_poem_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20011,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/retrieve-random-poem',
                'operation_id': 'random_poem',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'min_lines',
                    'max_lines',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'min_lines',
                    'max_lines',
                ]
            },
            root_map={
                'validations': {
                    ('min_lines',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                    ('max_lines',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'min_lines':
                        (int,),
                    'max_lines':
                        (int,),
                },
                'attribute_map': {
                    'min_lines': 'min-lines',
                    'max_lines': 'max-lines',
                },
                'location_map': {
                    'min_lines': 'query',
                    'max_lines': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def image_to_ascii_art_by_url(
        self,
        url,
        **kwargs
    ):
        """Image to Ascii Art by URL  # noqa: E501

        Convert an image to ASCII art. You can pass the image URL as a query parameter. The API returns the ASCII art as plain text. This endpoint is using the GET method and an image URL as a query parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.image_to_ascii_art_by_url(url, async_req=True)
        >>> result = thread.get()

        Args:
            url (str): The URL to the image.

        Keyword Args:
            width (int): The maximum width of the image (default 400, max. 500).. [optional]
            height (int): The maximum height of the image (default 400, max. 500).. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['url'] = \
            url
        return self.image_to_ascii_art_by_url_endpoint.call_with_http_info(**kwargs)

    def random_poem(
        self,
        **kwargs
    ):
        """Random Poem  # noqa: E501

        Retrieve a random poem by many famous authors. You can filter poem's by length (number of lines).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.random_poem(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            min_lines (int): The minimum number of lines of the poem.. [optional]
            max_lines (int): The maximum number of lines of the poem.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20011
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.random_poem_endpoint.call_with_http_info(**kwargs)

