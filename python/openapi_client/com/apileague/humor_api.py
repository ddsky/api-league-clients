"""
    API League

    API League is a Hub for World Class APIs.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@apileague.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.inline_response2004 import InlineResponse2004
from openapi_client.model.inline_response2004_jokes import InlineResponse2004Jokes
from openapi_client.model.inline_response2005 import InlineResponse2005
from openapi_client.model.inline_response2006 import InlineResponse2006
from openapi_client.model.inline_response2007 import InlineResponse2007
from openapi_client.model.inline_response2008 import InlineResponse2008


class HumorApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.generate_nonsense_word_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2008,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/generate-nonsense-word',
                'operation_id': 'generate_nonsense_word',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.random_joke_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2004Jokes,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/retrieve-random-joke',
                'operation_id': 'random_joke',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'include_tags',
                    'exclude_tags',
                    'min_rating',
                    'max_length',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'include_tags',
                    'exclude_tags',
                    'min_rating',
                    'max_length',
                ]
            },
            root_map={
                'validations': {
                    ('include_tags',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('exclude_tags',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('min_rating',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': 0,
                    },
                    ('max_length',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'include_tags':
                        (str,),
                    'exclude_tags':
                        (str,),
                    'min_rating':
                        (float,),
                    'max_length':
                        (int,),
                },
                'attribute_map': {
                    'include_tags': 'include-tags',
                    'exclude_tags': 'exclude-tags',
                    'min_rating': 'min-rating',
                    'max_length': 'max-length',
                },
                'location_map': {
                    'include_tags': 'query',
                    'exclude_tags': 'query',
                    'min_rating': 'query',
                    'max_length': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.random_meme_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2006,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/retrieve-random-meme',
                'operation_id': 'random_meme',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'keywords',
                    'keywords_in_image',
                    'media_type',
                    'min_rating',
                    'max_age_days',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'keywords',
                    'media_type',
                    'min_rating',
                    'max_age_days',
                ]
            },
            root_map={
                'validations': {
                    ('keywords',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('media_type',): {
                        'max_length': 10,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('min_rating',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': 0,
                    },
                    ('max_age_days',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'keywords':
                        (str,),
                    'keywords_in_image':
                        (bool,),
                    'media_type':
                        (str,),
                    'min_rating':
                        (float,),
                    'max_age_days':
                        (int,),
                },
                'attribute_map': {
                    'keywords': 'keywords',
                    'keywords_in_image': 'keywords-in-image',
                    'media_type': 'media-type',
                    'min_rating': 'min-rating',
                    'max_age_days': 'max-age-days',
                },
                'location_map': {
                    'keywords': 'query',
                    'keywords_in_image': 'query',
                    'media_type': 'query',
                    'min_rating': 'query',
                    'max_age_days': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_gifs_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2007,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/search-gifs',
                'operation_id': 'search_gifs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'query',
                    'number',
                ],
                'required': [
                    'query',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'query',
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('query',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('number',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'query':
                        (str,),
                    'number':
                        (int,),
                },
                'attribute_map': {
                    'query': 'query',
                    'number': 'number',
                },
                'location_map': {
                    'query': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_jokes_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2004,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/search-jokes',
                'operation_id': 'search_jokes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'keywords',
                    'include_tags',
                    'exclude_tags',
                    'min_rating',
                    'max_length',
                    'offset',
                    'number',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'keywords',
                    'include_tags',
                    'exclude_tags',
                    'min_rating',
                    'max_length',
                    'offset',
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('keywords',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('include_tags',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('exclude_tags',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('min_rating',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': 0,
                    },
                    ('max_length',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                    ('number',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'keywords':
                        (str,),
                    'include_tags':
                        (str,),
                    'exclude_tags':
                        (str,),
                    'min_rating':
                        (float,),
                    'max_length':
                        (float,),
                    'offset':
                        (int,),
                    'number':
                        (int,),
                },
                'attribute_map': {
                    'keywords': 'keywords',
                    'include_tags': 'include-tags',
                    'exclude_tags': 'exclude-tags',
                    'min_rating': 'min-rating',
                    'max_length': 'max-length',
                    'offset': 'offset',
                    'number': 'number',
                },
                'location_map': {
                    'keywords': 'query',
                    'include_tags': 'query',
                    'exclude_tags': 'query',
                    'min_rating': 'query',
                    'max_length': 'query',
                    'offset': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.search_memes_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse2005,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/search-memes',
                'operation_id': 'search_memes',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'keywords',
                    'keywords_in_image',
                    'media_type',
                    'min_rating',
                    'max_age_days',
                    'offset',
                    'number',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'keywords',
                    'media_type',
                    'min_rating',
                    'max_age_days',
                    'offset',
                    'number',
                ]
            },
            root_map={
                'validations': {
                    ('keywords',): {
                        'max_length': 300,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('media_type',): {
                        'max_length': 10,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('min_rating',): {

                        'inclusive_maximum': 1,
                        'inclusive_minimum': 0,
                    },
                    ('max_age_days',): {

                        'inclusive_maximum': 10000,
                        'inclusive_minimum': 0,
                    },
                    ('offset',): {

                        'inclusive_maximum': 1000,
                        'inclusive_minimum': 0,
                    },
                    ('number',): {

                        'inclusive_maximum': 10,
                        'inclusive_minimum': 0,
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'keywords':
                        (str,),
                    'keywords_in_image':
                        (bool,),
                    'media_type':
                        (str,),
                    'min_rating':
                        (float,),
                    'max_age_days':
                        (int,),
                    'offset':
                        (int,),
                    'number':
                        (int,),
                },
                'attribute_map': {
                    'keywords': 'keywords',
                    'keywords_in_image': 'keywords-in-image',
                    'media_type': 'media-type',
                    'min_rating': 'min-rating',
                    'max_age_days': 'max-age-days',
                    'offset': 'offset',
                    'number': 'number',
                },
                'location_map': {
                    'keywords': 'query',
                    'keywords_in_image': 'query',
                    'media_type': 'query',
                    'min_rating': 'query',
                    'max_age_days': 'query',
                    'offset': 'query',
                    'number': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def generate_nonsense_word(
        self,
        **kwargs
    ):
        """Generate Nonsense Word  # noqa: E501

        Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.generate_nonsense_word(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2008
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.generate_nonsense_word_endpoint.call_with_http_info(**kwargs)

    def random_joke(
        self,
        **kwargs
    ):
        """Random Joke  # noqa: E501

        This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \"nsfw\" or \"religious\".  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.random_joke(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            include_tags (str): A comma-separated list of tags the jokes should have.. [optional]
            exclude_tags (str): A comma-separated list of tags the jokes must not have.. [optional]
            min_rating (float): The minimum rating in range [0.0,1.0] of the jokes.. [optional]
            max_length (int): The maximum length of the joke in letters.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2004Jokes
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.random_joke_endpoint.call_with_http_info(**kwargs)

    def random_meme(
        self,
        **kwargs
    ):
        """Random Meme  # noqa: E501

        Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.random_meme(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            keywords (str): A comma-separated list of words that must occur in the meme.. [optional]
            keywords_in_image (bool): Whether the keywords must occur in the image.. [optional]
            media_type (str): The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').. [optional]
            min_rating (float): The minimum rating in range [0.0-1.0] of the meme.. [optional]
            max_age_days (int): The maximum age of the meme in days.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2006
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.random_meme_endpoint.call_with_http_info(**kwargs)

    def search_gifs(
        self,
        query,
        **kwargs
    ):
        """Search Gifs  # noqa: E501

        Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_gifs(query, async_req=True)
        >>> result = thread.get()

        Args:
            query (str): The search query.

        Keyword Args:
            number (int): The number of gifs to return in range [1,10]. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2007
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['query'] = \
            query
        return self.search_gifs_endpoint.call_with_http_info(**kwargs)

    def search_jokes(
        self,
        **kwargs
    ):
        """Search Jokes  # noqa: E501

        With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_jokes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            keywords (str): A comma-separated list of words that must occur in the joke.. [optional]
            include_tags (str): A comma-separated list of tags the jokes should have.. [optional]
            exclude_tags (str): A comma-separated list of tags the jokes must not have.. [optional]
            min_rating (float): The minimum rating (0-10) of the jokes.. [optional]
            max_length (float): The maximum length of the joke in letters.. [optional]
            offset (int): The number of jokes to skip, between 0 and 1000.. [optional]
            number (int): The number of jokes, between 1 and 10.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2004
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.search_jokes_endpoint.call_with_http_info(**kwargs)

    def search_memes(
        self,
        **kwargs
    ):
        """Search Memes  # noqa: E501

        With over 200,000 memes, you'll surely find something funny. You can even search for text within memes and filter by user ratings.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.search_memes(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            keywords (str): A comma-separated list of words that must occur in the meme.. [optional]
            keywords_in_image (bool): Whether the keywords must occur in the image.. [optional]
            media_type (str): The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').. [optional]
            min_rating (float): The minimum rating in range [0.0,1.0] of the meme.. [optional]
            max_age_days (int): The maximum age of the meme in days.. [optional]
            offset (int): The number of memes to skip, between 0 and 1000.. [optional]
            number (int): The number of memes, between 0 and 10.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse2005
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.search_memes_endpoint.call_with_http_info(**kwargs)

