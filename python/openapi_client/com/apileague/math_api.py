"""
    API League

    API League is a Hub for World Class APIs.  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: mail@apileague.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.inline_response20030 import InlineResponse20030


class MathApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.convert_units_endpoint = _Endpoint(
            settings={
                'response_type': (InlineResponse20030,),
                'auth': [
                    'apiKey',
                    'headerApiKey'
                ],
                'endpoint_path': '/convert-units',
                'operation_id': 'convert_units',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'source_amount',
                    'source_unit',
                    'target_unit',
                    'food_name',
                ],
                'required': [
                    'source_amount',
                    'source_unit',
                    'target_unit',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'source_amount',
                    'source_unit',
                    'target_unit',
                    'food_name',
                ]
            },
            root_map={
                'validations': {
                    ('source_amount',): {

                        'inclusive_maximum': 99999999,
                        'inclusive_minimum': 0,
                    },
                    ('source_unit',): {
                        'max_length': 100,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('target_unit',): {
                        'max_length': 100,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                    ('food_name',): {
                        'max_length': 200,
                        'regex': {
                            'pattern': r'.',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'source_amount':
                        (float,),
                    'source_unit':
                        (str,),
                    'target_unit':
                        (str,),
                    'food_name':
                        (str,),
                },
                'attribute_map': {
                    'source_amount': 'source-amount',
                    'source_unit': 'source-unit',
                    'target_unit': 'target-unit',
                    'food_name': 'food-name',
                },
                'location_map': {
                    'source_amount': 'query',
                    'source_unit': 'query',
                    'target_unit': 'query',
                    'food_name': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def convert_units(
        self,
        source_amount,
        source_unit,
        target_unit,
        **kwargs
    ):
        """Convert Units  # noqa: E501

        Convert units from one to another. The API returns the amount and the unit of the target unit.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.convert_units(source_amount, source_unit, target_unit, async_req=True)
        >>> result = thread.get()

        Args:
            source_amount (float): The source amount.
            source_unit (str): The source unit.
            target_unit (str): The unit to which should be converted.

        Keyword Args:
            food_name (str): An optional food name. For converting foods the food is relevant as they have different densities.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            InlineResponse20030
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['source_amount'] = \
            source_amount
        kwargs['source_unit'] = \
            source_unit
        kwargs['target_unit'] = \
            target_unit
        return self.convert_units_endpoint.call_with_http_info(**kwargs)

