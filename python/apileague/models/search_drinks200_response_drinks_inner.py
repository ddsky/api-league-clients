# coding: utf-8

"""
    API League

    API League is a Hub for World Class APIs.

    The version of the OpenAPI document: 1.5.0
    Contact: mail@apileague.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from apileague.models.search_drinks200_response_drinks_inner_credits import SearchDrinks200ResponseDrinksInnerCredits
from apileague.models.search_drinks200_response_drinks_inner_ingredients_inner import SearchDrinks200ResponseDrinksInnerIngredientsInner
from apileague.models.search_drinks200_response_drinks_inner_instructions_inner import SearchDrinks200ResponseDrinksInnerInstructionsInner
from apileague.models.search_drinks200_response_drinks_inner_nutrition import SearchDrinks200ResponseDrinksInnerNutrition
from typing import Optional, Set
from typing_extensions import Self

class SearchDrinks200ResponseDrinksInner(BaseModel):
    """
    SearchDrinks200ResponseDrinksInner
    """ # noqa: E501
    flavors: Optional[List[Optional[StrictStr]]] = None
    instructions: Optional[List[SearchDrinks200ResponseDrinksInnerInstructionsInner]] = None
    images: Optional[List[Optional[StrictStr]]] = None
    nutrition: Optional[SearchDrinks200ResponseDrinksInnerNutrition] = None
    glass_type: Optional[StrictStr] = None
    credits: Optional[SearchDrinks200ResponseDrinksInnerCredits] = None
    price_per_serving: Optional[Union[StrictFloat, StrictInt]] = None
    description: Optional[StrictStr] = None
    ingredients: Optional[List[SearchDrinks200ResponseDrinksInnerIngredientsInner]] = None
    id: Optional[StrictInt] = None
    title: Optional[StrictStr] = None
    cuisines: Optional[List[Optional[StrictStr]]] = None
    __properties: ClassVar[List[str]] = ["flavors", "instructions", "images", "nutrition", "glass_type", "credits", "price_per_serving", "description", "ingredients", "id", "title", "cuisines"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchDrinks200ResponseDrinksInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in instructions (list)
        _items = []
        if self.instructions:
            for _item in self.instructions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['instructions'] = _items
        # override the default output from pydantic by calling `to_dict()` of nutrition
        if self.nutrition:
            _dict['nutrition'] = self.nutrition.to_dict()
        # override the default output from pydantic by calling `to_dict()` of credits
        if self.credits:
            _dict['credits'] = self.credits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in ingredients (list)
        _items = []
        if self.ingredients:
            for _item in self.ingredients:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ingredients'] = _items
        # set to None if glass_type (nullable) is None
        # and model_fields_set contains the field
        if self.glass_type is None and "glass_type" in self.model_fields_set:
            _dict['glass_type'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchDrinks200ResponseDrinksInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "flavors": obj.get("flavors"),
            "instructions": [SearchDrinks200ResponseDrinksInnerInstructionsInner.from_dict(_item) for _item in obj["instructions"]] if obj.get("instructions") is not None else None,
            "images": obj.get("images"),
            "nutrition": SearchDrinks200ResponseDrinksInnerNutrition.from_dict(obj["nutrition"]) if obj.get("nutrition") is not None else None,
            "glass_type": obj.get("glass_type"),
            "credits": SearchDrinks200ResponseDrinksInnerCredits.from_dict(obj["credits"]) if obj.get("credits") is not None else None,
            "price_per_serving": obj.get("price_per_serving"),
            "description": obj.get("description"),
            "ingredients": [SearchDrinks200ResponseDrinksInnerIngredientsInner.from_dict(_item) for _item in obj["ingredients"]] if obj.get("ingredients") is not None else None,
            "id": obj.get("id"),
            "title": obj.get("title"),
            "cuisines": obj.get("cuisines")
        })
        return _obj


