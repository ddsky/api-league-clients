# coding: utf-8

"""
    API League

    API League is a Hub for World Class APIs.

    The version of the OpenAPI document: 1.6.3
    Contact: mail@apileague.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SearchRestaurants200ResponseRestaurantsInnerAddress(BaseModel):
    """
    SearchRestaurants200ResponseRestaurantsInnerAddress
    """ # noqa: E501
    zipcode: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    latitude: Optional[Union[StrictFloat, StrictInt]] = None
    lon: Optional[Union[StrictFloat, StrictInt]] = None
    street_addr_2: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    street_addr: Optional[StrictStr] = None
    lat: Optional[Union[StrictFloat, StrictInt]] = None
    longitude: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["zipcode", "country", "city", "latitude", "lon", "street_addr_2", "state", "street_addr", "lat", "longitude"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRestaurants200ResponseRestaurantsInnerAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if zipcode (nullable) is None
        # and model_fields_set contains the field
        if self.zipcode is None and "zipcode" in self.model_fields_set:
            _dict['zipcode'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if street_addr_2 (nullable) is None
        # and model_fields_set contains the field
        if self.street_addr_2 is None and "street_addr_2" in self.model_fields_set:
            _dict['street_addr_2'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if street_addr (nullable) is None
        # and model_fields_set contains the field
        if self.street_addr is None and "street_addr" in self.model_fields_set:
            _dict['street_addr'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRestaurants200ResponseRestaurantsInnerAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "zipcode": obj.get("zipcode"),
            "country": obj.get("country"),
            "city": obj.get("city"),
            "latitude": obj.get("latitude"),
            "lon": obj.get("lon"),
            "street_addr_2": obj.get("street_addr_2"),
            "state": obj.get("state"),
            "street_addr": obj.get("street_addr"),
            "lat": obj.get("lat"),
            "longitude": obj.get("longitude")
        })
        return _obj


