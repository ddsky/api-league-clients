# coding: utf-8

"""
    API League

    API League is a Hub for World Class APIs.

    The version of the OpenAPI document: 1.6.4
    Contact: mail@apileague.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from apileague.models.search_restaurants_api200_response_restaurants_inner_local_hours_operational import SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational
from typing import Optional, Set
from typing_extensions import Self

class SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours(BaseModel):
    """
    SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours
    """ # noqa: E501
    operational: Optional[SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational] = None
    delivery: Optional[SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational] = None
    pickup: Optional[SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational] = None
    dine_in: Optional[SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational] = None
    __properties: ClassVar[List[str]] = ["operational", "delivery", "pickup", "dine_in"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of operational
        if self.operational:
            _dict['operational'] = self.operational.to_dict()
        # override the default output from pydantic by calling `to_dict()` of delivery
        if self.delivery:
            _dict['delivery'] = self.delivery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pickup
        if self.pickup:
            _dict['pickup'] = self.pickup.to_dict()
        # override the default output from pydantic by calling `to_dict()` of dine_in
        if self.dine_in:
            _dict['dine_in'] = self.dine_in.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHours from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "operational": SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational.from_dict(obj["operational"]) if obj.get("operational") is not None else None,
            "delivery": SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational.from_dict(obj["delivery"]) if obj.get("delivery") is not None else None,
            "pickup": SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational.from_dict(obj["pickup"]) if obj.get("pickup") is not None else None,
            "dine_in": SearchRestaurantsAPI200ResponseRestaurantsInnerLocalHoursOperational.from_dict(obj["dine_in"]) if obj.get("dine_in") is not None else None
        })
        return _obj


