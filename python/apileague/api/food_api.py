# coding: utf-8

"""
    API League

    API League is a Hub for World Class APIs.

    The version of the OpenAPI document: 1.6.2
    Contact: mail@apileague.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from apileague.models.compute_nutrition200_response import ComputeNutrition200Response
from apileague.models.retrieve_recipe_information200_response import RetrieveRecipeInformation200Response
from apileague.models.search_drinks200_response import SearchDrinks200Response
from apileague.models.search_recipes200_response import SearchRecipes200Response
from apileague.models.search_restaurants200_response import SearchRestaurants200Response

from apileague.api_client import ApiClient, RequestSerialized
from apileague.api_response import ApiResponse
from apileague.rest import RESTResponseType


class FoodApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def compute_nutrition(
        self,
        ingredients: Annotated[str, Field(strict=True, max_length=1000, description="A comma-separated list of the ingredients of the recipe.")],
        servings: Annotated[Optional[Annotated[int, Field(le=999, strict=True, ge=1)]], Field(description="The number of servings the ingredients make. Nutrition is computed per serving.")] = None,
        reduce_oils: Annotated[Optional[StrictBool], Field(description="If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ComputeNutrition200Response:
        """Compute Nutrition

        Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.

        :param ingredients: A comma-separated list of the ingredients of the recipe. (required)
        :type ingredients: str
        :param servings: The number of servings the ingredients make. Nutrition is computed per serving.
        :type servings: int
        :param reduce_oils: If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.
        :type reduce_oils: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compute_nutrition_serialize(
            ingredients=ingredients,
            servings=servings,
            reduce_oils=reduce_oils,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComputeNutrition200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def compute_nutrition_with_http_info(
        self,
        ingredients: Annotated[str, Field(strict=True, max_length=1000, description="A comma-separated list of the ingredients of the recipe.")],
        servings: Annotated[Optional[Annotated[int, Field(le=999, strict=True, ge=1)]], Field(description="The number of servings the ingredients make. Nutrition is computed per serving.")] = None,
        reduce_oils: Annotated[Optional[StrictBool], Field(description="If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ComputeNutrition200Response]:
        """Compute Nutrition

        Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.

        :param ingredients: A comma-separated list of the ingredients of the recipe. (required)
        :type ingredients: str
        :param servings: The number of servings the ingredients make. Nutrition is computed per serving.
        :type servings: int
        :param reduce_oils: If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.
        :type reduce_oils: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compute_nutrition_serialize(
            ingredients=ingredients,
            servings=servings,
            reduce_oils=reduce_oils,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComputeNutrition200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def compute_nutrition_without_preload_content(
        self,
        ingredients: Annotated[str, Field(strict=True, max_length=1000, description="A comma-separated list of the ingredients of the recipe.")],
        servings: Annotated[Optional[Annotated[int, Field(le=999, strict=True, ge=1)]], Field(description="The number of servings the ingredients make. Nutrition is computed per serving.")] = None,
        reduce_oils: Annotated[Optional[StrictBool], Field(description="If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Compute Nutrition

        Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.

        :param ingredients: A comma-separated list of the ingredients of the recipe. (required)
        :type ingredients: str
        :param servings: The number of servings the ingredients make. Nutrition is computed per serving.
        :type servings: int
        :param reduce_oils: If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.
        :type reduce_oils: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._compute_nutrition_serialize(
            ingredients=ingredients,
            servings=servings,
            reduce_oils=reduce_oils,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ComputeNutrition200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _compute_nutrition_serialize(
        self,
        ingredients,
        servings,
        reduce_oils,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if ingredients is not None:
            
            _query_params.append(('ingredients', ingredients))
            
        if servings is not None:
            
            _query_params.append(('servings', servings))
            
        if reduce_oils is not None:
            
            _query_params.append(('reduce-oils', reduce_oils))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/compute-nutrition',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def retrieve_recipe_information(
        self,
        id: Annotated[int, Field(le=1410065407, strict=True, ge=0, description="The id of the recipe to retrieve.")],
        add_wine_pairing: Annotated[Optional[StrictBool], Field(description="Whether to pair a wine to the recipe.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RetrieveRecipeInformation200Response:
        """Retrieve Recipe Information

        Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.

        :param id: The id of the recipe to retrieve. (required)
        :type id: int
        :param add_wine_pairing: Whether to pair a wine to the recipe.
        :type add_wine_pairing: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_recipe_information_serialize(
            id=id,
            add_wine_pairing=add_wine_pairing,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RetrieveRecipeInformation200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retrieve_recipe_information_with_http_info(
        self,
        id: Annotated[int, Field(le=1410065407, strict=True, ge=0, description="The id of the recipe to retrieve.")],
        add_wine_pairing: Annotated[Optional[StrictBool], Field(description="Whether to pair a wine to the recipe.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RetrieveRecipeInformation200Response]:
        """Retrieve Recipe Information

        Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.

        :param id: The id of the recipe to retrieve. (required)
        :type id: int
        :param add_wine_pairing: Whether to pair a wine to the recipe.
        :type add_wine_pairing: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_recipe_information_serialize(
            id=id,
            add_wine_pairing=add_wine_pairing,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RetrieveRecipeInformation200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retrieve_recipe_information_without_preload_content(
        self,
        id: Annotated[int, Field(le=1410065407, strict=True, ge=0, description="The id of the recipe to retrieve.")],
        add_wine_pairing: Annotated[Optional[StrictBool], Field(description="Whether to pair a wine to the recipe.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Retrieve Recipe Information

        Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.

        :param id: The id of the recipe to retrieve. (required)
        :type id: int
        :param add_wine_pairing: Whether to pair a wine to the recipe.
        :type add_wine_pairing: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_recipe_information_serialize(
            id=id,
            add_wine_pairing=add_wine_pairing,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RetrieveRecipeInformation200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retrieve_recipe_information_serialize(
        self,
        id,
        add_wine_pairing,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if id is not None:
            
            _query_params.append(('id', id))
            
        if add_wine_pairing is not None:
            
            _query_params.append(('add-wine-pairing', add_wine_pairing))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/retrieve-recipe',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_drinks(
        self,
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        glass_types: Annotated[Optional[Annotated[str, Field(strict=True, max_length=200)]], Field(description="A comma-separated list (interpreted as OR) of glass types that the drink should be served in.")] = None,
        flavors: Annotated[Optional[Annotated[str, Field(strict=True, max_length=200)]], Field(description="A comma-separated list (interpreted as AND) of dominant flavors in the drink.")] = None,
        diet: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian.")] = None,
        include_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients that should/must be used in the drinks.")] = None,
        exclude_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients or ingredient types that the drinks must not contain.")] = None,
        min_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calories the drink must have per serving.")] = None,
        max_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calories the drink can have per serving.")] = None,
        min_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of carbohydrates in grams the drink must have per serving.")] = None,
        max_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of carbohydrates in grams the drink can have per serving.")] = None,
        min_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of protein in grams the drink must have per serving.")] = None,
        max_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of protein in grams the drink can have per serving.")] = None,
        min_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fat in grams the drink must have per serving.")] = None,
        max_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fat in grams the drink can have per serving.")] = None,
        min_alcohol_percent: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum alcohol percentage the drink must have.")] = None,
        max_alcohol_percent: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum alcohol percentage the drink can have.")] = None,
        min_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of caffeine in milligrams the drink must have per serving.")] = None,
        max_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of caffeine in milligrams the drink can have per serving.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=100)]], Field(description="The attribute by which to sort the drinks.")] = None,
        sort_direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4)]], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=90, strict=True, ge=0)]], Field(description="The number of drinks to skip, between 0 and 90.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of drinks, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchDrinks200Response:
        """Search Drinks

        Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.

        :param query: The search query.
        :type query: str
        :param glass_types: A comma-separated list (interpreted as OR) of glass types that the drink should be served in.
        :type glass_types: str
        :param flavors: A comma-separated list (interpreted as AND) of dominant flavors in the drink.
        :type flavors: str
        :param diet: The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian.
        :type diet: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the drinks.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the drinks must not contain.
        :type exclude_ingredients: str
        :param min_calories: The minimum amount of calories the drink must have per serving.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the drink can have per serving.
        :type max_calories: float
        :param min_carbs: The minimum amount of carbohydrates in grams the drink must have per serving.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the drink can have per serving.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the drink must have per serving.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the drink can have per serving.
        :type max_protein: float
        :param min_fat: The minimum amount of fat in grams the drink must have per serving.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the drink can have per serving.
        :type max_fat: float
        :param min_alcohol_percent: The minimum alcohol percentage the drink must have.
        :type min_alcohol_percent: float
        :param max_alcohol_percent: The maximum alcohol percentage the drink can have.
        :type max_alcohol_percent: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the drink must have per serving.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the drink can have per serving.
        :type max_caffeine: float
        :param sort: The attribute by which to sort the drinks.
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param offset: The number of drinks to skip, between 0 and 90.
        :type offset: int
        :param number: The number of drinks, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_drinks_serialize(
            query=query,
            glass_types=glass_types,
            flavors=flavors,
            diet=diet,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            min_calories=min_calories,
            max_calories=max_calories,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol_percent=min_alcohol_percent,
            max_alcohol_percent=max_alcohol_percent,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            sort=sort,
            sort_direction=sort_direction,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchDrinks200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_drinks_with_http_info(
        self,
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        glass_types: Annotated[Optional[Annotated[str, Field(strict=True, max_length=200)]], Field(description="A comma-separated list (interpreted as OR) of glass types that the drink should be served in.")] = None,
        flavors: Annotated[Optional[Annotated[str, Field(strict=True, max_length=200)]], Field(description="A comma-separated list (interpreted as AND) of dominant flavors in the drink.")] = None,
        diet: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian.")] = None,
        include_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients that should/must be used in the drinks.")] = None,
        exclude_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients or ingredient types that the drinks must not contain.")] = None,
        min_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calories the drink must have per serving.")] = None,
        max_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calories the drink can have per serving.")] = None,
        min_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of carbohydrates in grams the drink must have per serving.")] = None,
        max_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of carbohydrates in grams the drink can have per serving.")] = None,
        min_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of protein in grams the drink must have per serving.")] = None,
        max_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of protein in grams the drink can have per serving.")] = None,
        min_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fat in grams the drink must have per serving.")] = None,
        max_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fat in grams the drink can have per serving.")] = None,
        min_alcohol_percent: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum alcohol percentage the drink must have.")] = None,
        max_alcohol_percent: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum alcohol percentage the drink can have.")] = None,
        min_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of caffeine in milligrams the drink must have per serving.")] = None,
        max_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of caffeine in milligrams the drink can have per serving.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=100)]], Field(description="The attribute by which to sort the drinks.")] = None,
        sort_direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4)]], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=90, strict=True, ge=0)]], Field(description="The number of drinks to skip, between 0 and 90.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of drinks, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchDrinks200Response]:
        """Search Drinks

        Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.

        :param query: The search query.
        :type query: str
        :param glass_types: A comma-separated list (interpreted as OR) of glass types that the drink should be served in.
        :type glass_types: str
        :param flavors: A comma-separated list (interpreted as AND) of dominant flavors in the drink.
        :type flavors: str
        :param diet: The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian.
        :type diet: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the drinks.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the drinks must not contain.
        :type exclude_ingredients: str
        :param min_calories: The minimum amount of calories the drink must have per serving.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the drink can have per serving.
        :type max_calories: float
        :param min_carbs: The minimum amount of carbohydrates in grams the drink must have per serving.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the drink can have per serving.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the drink must have per serving.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the drink can have per serving.
        :type max_protein: float
        :param min_fat: The minimum amount of fat in grams the drink must have per serving.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the drink can have per serving.
        :type max_fat: float
        :param min_alcohol_percent: The minimum alcohol percentage the drink must have.
        :type min_alcohol_percent: float
        :param max_alcohol_percent: The maximum alcohol percentage the drink can have.
        :type max_alcohol_percent: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the drink must have per serving.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the drink can have per serving.
        :type max_caffeine: float
        :param sort: The attribute by which to sort the drinks.
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param offset: The number of drinks to skip, between 0 and 90.
        :type offset: int
        :param number: The number of drinks, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_drinks_serialize(
            query=query,
            glass_types=glass_types,
            flavors=flavors,
            diet=diet,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            min_calories=min_calories,
            max_calories=max_calories,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol_percent=min_alcohol_percent,
            max_alcohol_percent=max_alcohol_percent,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            sort=sort,
            sort_direction=sort_direction,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchDrinks200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_drinks_without_preload_content(
        self,
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        glass_types: Annotated[Optional[Annotated[str, Field(strict=True, max_length=200)]], Field(description="A comma-separated list (interpreted as OR) of glass types that the drink should be served in.")] = None,
        flavors: Annotated[Optional[Annotated[str, Field(strict=True, max_length=200)]], Field(description="A comma-separated list (interpreted as AND) of dominant flavors in the drink.")] = None,
        diet: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian.")] = None,
        include_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients that should/must be used in the drinks.")] = None,
        exclude_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients or ingredient types that the drinks must not contain.")] = None,
        min_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calories the drink must have per serving.")] = None,
        max_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calories the drink can have per serving.")] = None,
        min_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of carbohydrates in grams the drink must have per serving.")] = None,
        max_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of carbohydrates in grams the drink can have per serving.")] = None,
        min_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of protein in grams the drink must have per serving.")] = None,
        max_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of protein in grams the drink can have per serving.")] = None,
        min_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fat in grams the drink must have per serving.")] = None,
        max_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fat in grams the drink can have per serving.")] = None,
        min_alcohol_percent: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum alcohol percentage the drink must have.")] = None,
        max_alcohol_percent: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum alcohol percentage the drink can have.")] = None,
        min_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of caffeine in milligrams the drink must have per serving.")] = None,
        max_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of caffeine in milligrams the drink can have per serving.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=100)]], Field(description="The attribute by which to sort the drinks.")] = None,
        sort_direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4)]], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=90, strict=True, ge=0)]], Field(description="The number of drinks to skip, between 0 and 90.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of drinks, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Drinks

        Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.

        :param query: The search query.
        :type query: str
        :param glass_types: A comma-separated list (interpreted as OR) of glass types that the drink should be served in.
        :type glass_types: str
        :param flavors: A comma-separated list (interpreted as AND) of dominant flavors in the drink.
        :type flavors: str
        :param diet: The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian.
        :type diet: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the drinks.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the drinks must not contain.
        :type exclude_ingredients: str
        :param min_calories: The minimum amount of calories the drink must have per serving.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the drink can have per serving.
        :type max_calories: float
        :param min_carbs: The minimum amount of carbohydrates in grams the drink must have per serving.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the drink can have per serving.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the drink must have per serving.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the drink can have per serving.
        :type max_protein: float
        :param min_fat: The minimum amount of fat in grams the drink must have per serving.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the drink can have per serving.
        :type max_fat: float
        :param min_alcohol_percent: The minimum alcohol percentage the drink must have.
        :type min_alcohol_percent: float
        :param max_alcohol_percent: The maximum alcohol percentage the drink can have.
        :type max_alcohol_percent: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the drink must have per serving.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the drink can have per serving.
        :type max_caffeine: float
        :param sort: The attribute by which to sort the drinks.
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param offset: The number of drinks to skip, between 0 and 90.
        :type offset: int
        :param number: The number of drinks, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_drinks_serialize(
            query=query,
            glass_types=glass_types,
            flavors=flavors,
            diet=diet,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            min_calories=min_calories,
            max_calories=max_calories,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_fat=min_fat,
            max_fat=max_fat,
            min_alcohol_percent=min_alcohol_percent,
            max_alcohol_percent=max_alcohol_percent,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            sort=sort,
            sort_direction=sort_direction,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchDrinks200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_drinks_serialize(
        self,
        query,
        glass_types,
        flavors,
        diet,
        include_ingredients,
        exclude_ingredients,
        min_calories,
        max_calories,
        min_carbs,
        max_carbs,
        min_protein,
        max_protein,
        min_fat,
        max_fat,
        min_alcohol_percent,
        max_alcohol_percent,
        min_caffeine,
        max_caffeine,
        sort,
        sort_direction,
        offset,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if glass_types is not None:
            
            _query_params.append(('glass-types', glass_types))
            
        if flavors is not None:
            
            _query_params.append(('flavors', flavors))
            
        if diet is not None:
            
            _query_params.append(('diet', diet))
            
        if include_ingredients is not None:
            
            _query_params.append(('include-ingredients', include_ingredients))
            
        if exclude_ingredients is not None:
            
            _query_params.append(('exclude-ingredients', exclude_ingredients))
            
        if min_calories is not None:
            
            _query_params.append(('min-calories', min_calories))
            
        if max_calories is not None:
            
            _query_params.append(('max-calories', max_calories))
            
        if min_carbs is not None:
            
            _query_params.append(('min-carbs', min_carbs))
            
        if max_carbs is not None:
            
            _query_params.append(('max-carbs', max_carbs))
            
        if min_protein is not None:
            
            _query_params.append(('min-protein', min_protein))
            
        if max_protein is not None:
            
            _query_params.append(('max-protein', max_protein))
            
        if min_fat is not None:
            
            _query_params.append(('min-fat', min_fat))
            
        if max_fat is not None:
            
            _query_params.append(('max-fat', max_fat))
            
        if min_alcohol_percent is not None:
            
            _query_params.append(('min-alcohol-percent', min_alcohol_percent))
            
        if max_alcohol_percent is not None:
            
            _query_params.append(('max-alcohol-percent', max_alcohol_percent))
            
        if min_caffeine is not None:
            
            _query_params.append(('min-caffeine', min_caffeine))
            
        if max_caffeine is not None:
            
            _query_params.append(('max-caffeine', max_caffeine))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if sort_direction is not None:
            
            _query_params.append(('sort-direction', sort_direction))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search-drinks',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_recipes(
        self,
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        cuisines: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as 'OR').")] = None,
        exclude_cuisines: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as 'AND').")] = None,
        meal_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.")] = None,
        diet: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.")] = None,
        intolerances: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.")] = None,
        equipment: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The equipment required. Multiple values will be interpreted as 'OR'.")] = None,
        include_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients that should/must be used in the recipes.")] = None,
        exclude_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients or ingredient types that the recipes must not contain.")] = None,
        fill_ingredients: Annotated[Optional[StrictBool], Field(description="Add information about the ingredients and whether they are used or missing in relation to the query.")] = None,
        add_recipe_information: Annotated[Optional[StrictBool], Field(description="If set to true, you get more information about the recipes returned.")] = None,
        max_time: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum time in minutes it should take to prepare and cook the recipe.")] = None,
        min_servings: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The minimum amount of servings the recipe is for.")] = None,
        max_servings: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum amount of servings the recipe is for.")] = None,
        min_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calories the recipe must have per serving.")] = None,
        max_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calories the recipe can have per serving.")] = None,
        min_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of carbohydrates in grams the recipe must have per serving.")] = None,
        max_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of carbohydrates in grams the recipe can have per serving.")] = None,
        min_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of protein in grams the recipe must have per serving.")] = None,
        max_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of protein in grams the recipe can have per serving.")] = None,
        min_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fat in grams the recipe must have per serving.")] = None,
        max_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fat in grams the recipe can have per serving.")] = None,
        min_sugar: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of sugar in grams the recipe must have per serving.")] = None,
        max_sugar: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of sugar in grams the recipe can have per serving.")] = None,
        min_fiber: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fiber in grams the recipe must have per serving.")] = None,
        max_fiber: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fiber in grams the recipe can have per serving.")] = None,
        min_folate: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of folate in micrograms the recipe must have per serving.")] = None,
        max_folate: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of folate in micrograms the recipe can have per serving.")] = None,
        min_folic_acid: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of folic acid in micrograms the recipe must have per serving.")] = None,
        max_folic_acid: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of folic acid in micrograms the recipe can have per serving.")] = None,
        min_iodine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of iodine in micrograms the recipe must have per serving.")] = None,
        max_iodine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of iodine in micrograms the recipe can have per serving.")] = None,
        min_iron: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of iron in milligrams the recipe must have per serving.")] = None,
        max_iron: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of iron in milligrams the recipe can have per serving.")] = None,
        min_zinc: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of zinc in milligrams the recipe must have per serving.")] = None,
        max_zinc: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of zinc in milligrams the recipe can have per serving.")] = None,
        min_magnesium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of magnesium in milligrams the recipe must have per serving.")] = None,
        max_magnesium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of magnesium in milligrams the recipe can have per serving.")] = None,
        min_manganese: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of manganese in milligrams the recipe must have per serving.")] = None,
        max_manganese: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of manganese in milligrams the recipe can have per serving.")] = None,
        min_phosphorus: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have per serving.")] = None,
        max_phosphorus: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have per serving.")] = None,
        min_potassium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of potassium in milligrams the recipe must have per serving.")] = None,
        max_potassium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of potassium in milligrams the recipe can have per serving.")] = None,
        min_sodium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of sodium in milligrams the recipe must have per serving.")] = None,
        max_sodium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of sodium in milligrams the recipe can have per serving.")] = None,
        min_selenium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of selenium in micrograms the recipe must have per serving.")] = None,
        max_selenium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of selenium in micrograms the recipe can have per serving.")] = None,
        min_copper: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of copper in milligrams the recipe must have per serving.")] = None,
        max_copper: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of copper in milligrams the recipe can have per serving.")] = None,
        min_calcium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calcium in milligrams the recipe must have per serving.")] = None,
        max_calcium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calcium in milligrams the recipe can have per serving.")] = None,
        min_choline: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of choline in milligrams the recipe must have per serving.")] = None,
        max_choline: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of choline in milligrams the recipe can have per serving.")] = None,
        min_cholesterol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have per serving.")] = None,
        max_cholesterol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have per serving.")] = None,
        min_fluoride: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fluoride in milligrams the recipe must have per serving.")] = None,
        max_fluoride: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fluoride in milligrams the recipe can have per serving.")] = None,
        min_alcohol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of alcohol in grams the recipe must have per serving.")] = None,
        max_alcohol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of alcohol in grams the recipe can have per serving.")] = None,
        min_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of caffeine in milligrams the recipe must have per serving.")] = None,
        max_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of caffeine in milligrams the recipe can have per serving.")] = None,
        min_saturated_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of saturated fat in grams the recipe must have per serving.")] = None,
        max_saturated_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of saturated fat in grams the recipe can have per serving.")] = None,
        min_vitamin_a: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin A in IU the recipe must have per serving.")] = None,
        max_vitamin_a: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin A in IU the recipe can have per serving.")] = None,
        min_vitamin_c: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin C in milligrams the recipe must have per serving.")] = None,
        max_vitamin_c: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have per serving.")] = None,
        min_vitamin_d: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have per serving.")] = None,
        max_vitamin_d: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have per serving.")] = None,
        min_vitamin_e: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have per serving.")] = None,
        max_vitamin_e: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have per serving.")] = None,
        min_vitamin_k: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have per serving.")] = None,
        max_vitamin_k: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have per serving.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=100)]], Field(description="The strategy to sort recipes by.")] = None,
        sort_direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4)]], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of recipes to skip, between 0 and 900.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of recipes, between 1 and 100.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchRecipes200Response:
        """Search Recipes

        Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.

        :param query: The search query.
        :type query: str
        :param cuisines: The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as 'OR').
        :type cuisines: str
        :param exclude_cuisines: The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as 'AND').
        :type exclude_cuisines: str
        :param meal_type: The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.
        :type meal_type: str
        :param diet: The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.
        :type diet: str
        :param intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.
        :type intolerances: str
        :param equipment: The equipment required. Multiple values will be interpreted as 'OR'.
        :type equipment: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the recipes.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
        :type exclude_ingredients: str
        :param fill_ingredients: Add information about the ingredients and whether they are used or missing in relation to the query.
        :type fill_ingredients: bool
        :param add_recipe_information: If set to true, you get more information about the recipes returned.
        :type add_recipe_information: bool
        :param max_time: The maximum time in minutes it should take to prepare and cook the recipe.
        :type max_time: int
        :param min_servings: The minimum amount of servings the recipe is for.
        :type min_servings: int
        :param max_servings: The maximum amount of servings the recipe is for.
        :type max_servings: int
        :param min_calories: The minimum amount of calories the recipe must have per serving.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have per serving.
        :type max_calories: float
        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have per serving.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have per serving.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have per serving.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have per serving.
        :type max_protein: float
        :param min_fat: The minimum amount of fat in grams the recipe must have per serving.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have per serving.
        :type max_fat: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have per serving.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have per serving.
        :type max_sugar: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have per serving.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have per serving.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have per serving.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have per serving.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have per serving.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have per serving.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have per serving.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have per serving.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have per serving.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have per serving.
        :type max_iron: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have per serving.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have per serving.
        :type max_zinc: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have per serving.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have per serving.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have per serving.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have per serving.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have per serving.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have per serving.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have per serving.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have per serving.
        :type max_potassium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have per serving.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have per serving.
        :type max_sodium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have per serving.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have per serving.
        :type max_selenium: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have per serving.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have per serving.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have per serving.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have per serving.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have per serving.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have per serving.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have per serving.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have per serving.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have per serving.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have per serving.
        :type max_fluoride: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have per serving.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have per serving.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have per serving.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have per serving.
        :type max_caffeine: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have per serving.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have per serving.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have per serving.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have per serving.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C in milligrams the recipe must have per serving.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have per serving.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have per serving.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have per serving.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have per serving.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have per serving.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have per serving.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have per serving.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.
        :type max_vitamin_b2: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.
        :type max_vitamin_b3: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.
        :type max_vitamin_b5: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.
        :type max_vitamin_b12: float
        :param sort: The strategy to sort recipes by.
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param offset: The number of recipes to skip, between 0 and 900.
        :type offset: int
        :param number: The number of recipes, between 1 and 100.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_serialize(
            query=query,
            cuisines=cuisines,
            exclude_cuisines=exclude_cuisines,
            meal_type=meal_type,
            diet=diet,
            intolerances=intolerances,
            equipment=equipment,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            fill_ingredients=fill_ingredients,
            add_recipe_information=add_recipe_information,
            max_time=max_time,
            min_servings=min_servings,
            max_servings=max_servings,
            min_calories=min_calories,
            max_calories=max_calories,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_fat=min_fat,
            max_fat=max_fat,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            sort=sort,
            sort_direction=sort_direction,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRecipes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_recipes_with_http_info(
        self,
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        cuisines: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as 'OR').")] = None,
        exclude_cuisines: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as 'AND').")] = None,
        meal_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.")] = None,
        diet: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.")] = None,
        intolerances: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.")] = None,
        equipment: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The equipment required. Multiple values will be interpreted as 'OR'.")] = None,
        include_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients that should/must be used in the recipes.")] = None,
        exclude_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients or ingredient types that the recipes must not contain.")] = None,
        fill_ingredients: Annotated[Optional[StrictBool], Field(description="Add information about the ingredients and whether they are used or missing in relation to the query.")] = None,
        add_recipe_information: Annotated[Optional[StrictBool], Field(description="If set to true, you get more information about the recipes returned.")] = None,
        max_time: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum time in minutes it should take to prepare and cook the recipe.")] = None,
        min_servings: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The minimum amount of servings the recipe is for.")] = None,
        max_servings: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum amount of servings the recipe is for.")] = None,
        min_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calories the recipe must have per serving.")] = None,
        max_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calories the recipe can have per serving.")] = None,
        min_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of carbohydrates in grams the recipe must have per serving.")] = None,
        max_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of carbohydrates in grams the recipe can have per serving.")] = None,
        min_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of protein in grams the recipe must have per serving.")] = None,
        max_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of protein in grams the recipe can have per serving.")] = None,
        min_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fat in grams the recipe must have per serving.")] = None,
        max_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fat in grams the recipe can have per serving.")] = None,
        min_sugar: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of sugar in grams the recipe must have per serving.")] = None,
        max_sugar: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of sugar in grams the recipe can have per serving.")] = None,
        min_fiber: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fiber in grams the recipe must have per serving.")] = None,
        max_fiber: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fiber in grams the recipe can have per serving.")] = None,
        min_folate: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of folate in micrograms the recipe must have per serving.")] = None,
        max_folate: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of folate in micrograms the recipe can have per serving.")] = None,
        min_folic_acid: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of folic acid in micrograms the recipe must have per serving.")] = None,
        max_folic_acid: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of folic acid in micrograms the recipe can have per serving.")] = None,
        min_iodine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of iodine in micrograms the recipe must have per serving.")] = None,
        max_iodine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of iodine in micrograms the recipe can have per serving.")] = None,
        min_iron: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of iron in milligrams the recipe must have per serving.")] = None,
        max_iron: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of iron in milligrams the recipe can have per serving.")] = None,
        min_zinc: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of zinc in milligrams the recipe must have per serving.")] = None,
        max_zinc: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of zinc in milligrams the recipe can have per serving.")] = None,
        min_magnesium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of magnesium in milligrams the recipe must have per serving.")] = None,
        max_magnesium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of magnesium in milligrams the recipe can have per serving.")] = None,
        min_manganese: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of manganese in milligrams the recipe must have per serving.")] = None,
        max_manganese: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of manganese in milligrams the recipe can have per serving.")] = None,
        min_phosphorus: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have per serving.")] = None,
        max_phosphorus: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have per serving.")] = None,
        min_potassium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of potassium in milligrams the recipe must have per serving.")] = None,
        max_potassium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of potassium in milligrams the recipe can have per serving.")] = None,
        min_sodium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of sodium in milligrams the recipe must have per serving.")] = None,
        max_sodium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of sodium in milligrams the recipe can have per serving.")] = None,
        min_selenium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of selenium in micrograms the recipe must have per serving.")] = None,
        max_selenium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of selenium in micrograms the recipe can have per serving.")] = None,
        min_copper: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of copper in milligrams the recipe must have per serving.")] = None,
        max_copper: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of copper in milligrams the recipe can have per serving.")] = None,
        min_calcium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calcium in milligrams the recipe must have per serving.")] = None,
        max_calcium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calcium in milligrams the recipe can have per serving.")] = None,
        min_choline: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of choline in milligrams the recipe must have per serving.")] = None,
        max_choline: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of choline in milligrams the recipe can have per serving.")] = None,
        min_cholesterol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have per serving.")] = None,
        max_cholesterol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have per serving.")] = None,
        min_fluoride: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fluoride in milligrams the recipe must have per serving.")] = None,
        max_fluoride: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fluoride in milligrams the recipe can have per serving.")] = None,
        min_alcohol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of alcohol in grams the recipe must have per serving.")] = None,
        max_alcohol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of alcohol in grams the recipe can have per serving.")] = None,
        min_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of caffeine in milligrams the recipe must have per serving.")] = None,
        max_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of caffeine in milligrams the recipe can have per serving.")] = None,
        min_saturated_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of saturated fat in grams the recipe must have per serving.")] = None,
        max_saturated_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of saturated fat in grams the recipe can have per serving.")] = None,
        min_vitamin_a: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin A in IU the recipe must have per serving.")] = None,
        max_vitamin_a: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin A in IU the recipe can have per serving.")] = None,
        min_vitamin_c: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin C in milligrams the recipe must have per serving.")] = None,
        max_vitamin_c: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have per serving.")] = None,
        min_vitamin_d: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have per serving.")] = None,
        max_vitamin_d: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have per serving.")] = None,
        min_vitamin_e: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have per serving.")] = None,
        max_vitamin_e: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have per serving.")] = None,
        min_vitamin_k: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have per serving.")] = None,
        max_vitamin_k: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have per serving.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=100)]], Field(description="The strategy to sort recipes by.")] = None,
        sort_direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4)]], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of recipes to skip, between 0 and 900.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of recipes, between 1 and 100.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchRecipes200Response]:
        """Search Recipes

        Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.

        :param query: The search query.
        :type query: str
        :param cuisines: The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as 'OR').
        :type cuisines: str
        :param exclude_cuisines: The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as 'AND').
        :type exclude_cuisines: str
        :param meal_type: The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.
        :type meal_type: str
        :param diet: The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.
        :type diet: str
        :param intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.
        :type intolerances: str
        :param equipment: The equipment required. Multiple values will be interpreted as 'OR'.
        :type equipment: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the recipes.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
        :type exclude_ingredients: str
        :param fill_ingredients: Add information about the ingredients and whether they are used or missing in relation to the query.
        :type fill_ingredients: bool
        :param add_recipe_information: If set to true, you get more information about the recipes returned.
        :type add_recipe_information: bool
        :param max_time: The maximum time in minutes it should take to prepare and cook the recipe.
        :type max_time: int
        :param min_servings: The minimum amount of servings the recipe is for.
        :type min_servings: int
        :param max_servings: The maximum amount of servings the recipe is for.
        :type max_servings: int
        :param min_calories: The minimum amount of calories the recipe must have per serving.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have per serving.
        :type max_calories: float
        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have per serving.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have per serving.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have per serving.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have per serving.
        :type max_protein: float
        :param min_fat: The minimum amount of fat in grams the recipe must have per serving.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have per serving.
        :type max_fat: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have per serving.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have per serving.
        :type max_sugar: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have per serving.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have per serving.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have per serving.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have per serving.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have per serving.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have per serving.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have per serving.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have per serving.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have per serving.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have per serving.
        :type max_iron: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have per serving.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have per serving.
        :type max_zinc: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have per serving.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have per serving.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have per serving.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have per serving.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have per serving.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have per serving.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have per serving.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have per serving.
        :type max_potassium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have per serving.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have per serving.
        :type max_sodium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have per serving.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have per serving.
        :type max_selenium: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have per serving.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have per serving.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have per serving.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have per serving.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have per serving.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have per serving.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have per serving.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have per serving.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have per serving.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have per serving.
        :type max_fluoride: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have per serving.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have per serving.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have per serving.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have per serving.
        :type max_caffeine: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have per serving.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have per serving.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have per serving.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have per serving.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C in milligrams the recipe must have per serving.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have per serving.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have per serving.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have per serving.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have per serving.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have per serving.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have per serving.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have per serving.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.
        :type max_vitamin_b2: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.
        :type max_vitamin_b3: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.
        :type max_vitamin_b5: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.
        :type max_vitamin_b12: float
        :param sort: The strategy to sort recipes by.
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param offset: The number of recipes to skip, between 0 and 900.
        :type offset: int
        :param number: The number of recipes, between 1 and 100.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_serialize(
            query=query,
            cuisines=cuisines,
            exclude_cuisines=exclude_cuisines,
            meal_type=meal_type,
            diet=diet,
            intolerances=intolerances,
            equipment=equipment,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            fill_ingredients=fill_ingredients,
            add_recipe_information=add_recipe_information,
            max_time=max_time,
            min_servings=min_servings,
            max_servings=max_servings,
            min_calories=min_calories,
            max_calories=max_calories,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_fat=min_fat,
            max_fat=max_fat,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            sort=sort,
            sort_direction=sort_direction,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRecipes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_recipes_without_preload_content(
        self,
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        cuisines: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as 'OR').")] = None,
        exclude_cuisines: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as 'AND').")] = None,
        meal_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.")] = None,
        diet: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.")] = None,
        intolerances: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.")] = None,
        equipment: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The equipment required. Multiple values will be interpreted as 'OR'.")] = None,
        include_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients that should/must be used in the recipes.")] = None,
        exclude_ingredients: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of ingredients or ingredient types that the recipes must not contain.")] = None,
        fill_ingredients: Annotated[Optional[StrictBool], Field(description="Add information about the ingredients and whether they are used or missing in relation to the query.")] = None,
        add_recipe_information: Annotated[Optional[StrictBool], Field(description="If set to true, you get more information about the recipes returned.")] = None,
        max_time: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum time in minutes it should take to prepare and cook the recipe.")] = None,
        min_servings: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The minimum amount of servings the recipe is for.")] = None,
        max_servings: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The maximum amount of servings the recipe is for.")] = None,
        min_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calories the recipe must have per serving.")] = None,
        max_calories: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calories the recipe can have per serving.")] = None,
        min_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of carbohydrates in grams the recipe must have per serving.")] = None,
        max_carbs: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of carbohydrates in grams the recipe can have per serving.")] = None,
        min_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of protein in grams the recipe must have per serving.")] = None,
        max_protein: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of protein in grams the recipe can have per serving.")] = None,
        min_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fat in grams the recipe must have per serving.")] = None,
        max_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fat in grams the recipe can have per serving.")] = None,
        min_sugar: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of sugar in grams the recipe must have per serving.")] = None,
        max_sugar: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of sugar in grams the recipe can have per serving.")] = None,
        min_fiber: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fiber in grams the recipe must have per serving.")] = None,
        max_fiber: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fiber in grams the recipe can have per serving.")] = None,
        min_folate: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of folate in micrograms the recipe must have per serving.")] = None,
        max_folate: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of folate in micrograms the recipe can have per serving.")] = None,
        min_folic_acid: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of folic acid in micrograms the recipe must have per serving.")] = None,
        max_folic_acid: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of folic acid in micrograms the recipe can have per serving.")] = None,
        min_iodine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of iodine in micrograms the recipe must have per serving.")] = None,
        max_iodine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of iodine in micrograms the recipe can have per serving.")] = None,
        min_iron: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of iron in milligrams the recipe must have per serving.")] = None,
        max_iron: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of iron in milligrams the recipe can have per serving.")] = None,
        min_zinc: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of zinc in milligrams the recipe must have per serving.")] = None,
        max_zinc: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of zinc in milligrams the recipe can have per serving.")] = None,
        min_magnesium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of magnesium in milligrams the recipe must have per serving.")] = None,
        max_magnesium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of magnesium in milligrams the recipe can have per serving.")] = None,
        min_manganese: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of manganese in milligrams the recipe must have per serving.")] = None,
        max_manganese: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of manganese in milligrams the recipe can have per serving.")] = None,
        min_phosphorus: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of phosphorus in milligrams the recipe must have per serving.")] = None,
        max_phosphorus: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of phosphorus in milligrams the recipe can have per serving.")] = None,
        min_potassium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of potassium in milligrams the recipe must have per serving.")] = None,
        max_potassium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of potassium in milligrams the recipe can have per serving.")] = None,
        min_sodium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of sodium in milligrams the recipe must have per serving.")] = None,
        max_sodium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of sodium in milligrams the recipe can have per serving.")] = None,
        min_selenium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of selenium in micrograms the recipe must have per serving.")] = None,
        max_selenium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of selenium in micrograms the recipe can have per serving.")] = None,
        min_copper: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of copper in milligrams the recipe must have per serving.")] = None,
        max_copper: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of copper in milligrams the recipe can have per serving.")] = None,
        min_calcium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of calcium in milligrams the recipe must have per serving.")] = None,
        max_calcium: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of calcium in milligrams the recipe can have per serving.")] = None,
        min_choline: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of choline in milligrams the recipe must have per serving.")] = None,
        max_choline: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of choline in milligrams the recipe can have per serving.")] = None,
        min_cholesterol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of cholesterol in milligrams the recipe must have per serving.")] = None,
        max_cholesterol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of cholesterol in milligrams the recipe can have per serving.")] = None,
        min_fluoride: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of fluoride in milligrams the recipe must have per serving.")] = None,
        max_fluoride: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of fluoride in milligrams the recipe can have per serving.")] = None,
        min_alcohol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of alcohol in grams the recipe must have per serving.")] = None,
        max_alcohol: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of alcohol in grams the recipe can have per serving.")] = None,
        min_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of caffeine in milligrams the recipe must have per serving.")] = None,
        max_caffeine: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of caffeine in milligrams the recipe can have per serving.")] = None,
        min_saturated_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of saturated fat in grams the recipe must have per serving.")] = None,
        max_saturated_fat: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of saturated fat in grams the recipe can have per serving.")] = None,
        min_vitamin_a: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin A in IU the recipe must have per serving.")] = None,
        max_vitamin_a: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin A in IU the recipe can have per serving.")] = None,
        min_vitamin_c: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin C in milligrams the recipe must have per serving.")] = None,
        max_vitamin_c: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin C in milligrams the recipe can have per serving.")] = None,
        min_vitamin_d: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin D in micrograms the recipe must have per serving.")] = None,
        max_vitamin_d: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin D in micrograms the recipe can have per serving.")] = None,
        min_vitamin_e: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin E in milligrams the recipe must have per serving.")] = None,
        max_vitamin_e: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin E in milligrams the recipe can have per serving.")] = None,
        min_vitamin_k: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin K in micrograms the recipe must have per serving.")] = None,
        max_vitamin_k: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin K in micrograms the recipe can have per serving.")] = None,
        min_vitamin_b1: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b1: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b2: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b2: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b3: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b3: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b5: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b5: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b6: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b6: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.")] = None,
        min_vitamin_b12: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.")] = None,
        max_vitamin_b12: Annotated[Optional[Union[Annotated[float, Field(le=99999, strict=True, ge=0)], Annotated[int, Field(le=99999, strict=True, ge=0)]]], Field(description="The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=100)]], Field(description="The strategy to sort recipes by.")] = None,
        sort_direction: Annotated[Optional[Annotated[str, Field(strict=True, max_length=4)]], Field(description="Whether to sort ascending or descending (ASC or DESC).")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=900, strict=True, ge=0)]], Field(description="The number of recipes to skip, between 0 and 900.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=100, strict=True, ge=1)]], Field(description="The number of recipes, between 1 and 100.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Recipes

        Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.

        :param query: The search query.
        :type query: str
        :param cuisines: The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as 'OR').
        :type cuisines: str
        :param exclude_cuisines: The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as 'AND').
        :type exclude_cuisines: str
        :param meal_type: The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.
        :type meal_type: str
        :param diet: The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.
        :type diet: str
        :param intolerances: A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.
        :type intolerances: str
        :param equipment: The equipment required. Multiple values will be interpreted as 'OR'.
        :type equipment: str
        :param include_ingredients: A comma-separated list of ingredients that should/must be used in the recipes.
        :type include_ingredients: str
        :param exclude_ingredients: A comma-separated list of ingredients or ingredient types that the recipes must not contain.
        :type exclude_ingredients: str
        :param fill_ingredients: Add information about the ingredients and whether they are used or missing in relation to the query.
        :type fill_ingredients: bool
        :param add_recipe_information: If set to true, you get more information about the recipes returned.
        :type add_recipe_information: bool
        :param max_time: The maximum time in minutes it should take to prepare and cook the recipe.
        :type max_time: int
        :param min_servings: The minimum amount of servings the recipe is for.
        :type min_servings: int
        :param max_servings: The maximum amount of servings the recipe is for.
        :type max_servings: int
        :param min_calories: The minimum amount of calories the recipe must have per serving.
        :type min_calories: float
        :param max_calories: The maximum amount of calories the recipe can have per serving.
        :type max_calories: float
        :param min_carbs: The minimum amount of carbohydrates in grams the recipe must have per serving.
        :type min_carbs: float
        :param max_carbs: The maximum amount of carbohydrates in grams the recipe can have per serving.
        :type max_carbs: float
        :param min_protein: The minimum amount of protein in grams the recipe must have per serving.
        :type min_protein: float
        :param max_protein: The maximum amount of protein in grams the recipe can have per serving.
        :type max_protein: float
        :param min_fat: The minimum amount of fat in grams the recipe must have per serving.
        :type min_fat: float
        :param max_fat: The maximum amount of fat in grams the recipe can have per serving.
        :type max_fat: float
        :param min_sugar: The minimum amount of sugar in grams the recipe must have per serving.
        :type min_sugar: float
        :param max_sugar: The maximum amount of sugar in grams the recipe can have per serving.
        :type max_sugar: float
        :param min_fiber: The minimum amount of fiber in grams the recipe must have per serving.
        :type min_fiber: float
        :param max_fiber: The maximum amount of fiber in grams the recipe can have per serving.
        :type max_fiber: float
        :param min_folate: The minimum amount of folate in micrograms the recipe must have per serving.
        :type min_folate: float
        :param max_folate: The maximum amount of folate in micrograms the recipe can have per serving.
        :type max_folate: float
        :param min_folic_acid: The minimum amount of folic acid in micrograms the recipe must have per serving.
        :type min_folic_acid: float
        :param max_folic_acid: The maximum amount of folic acid in micrograms the recipe can have per serving.
        :type max_folic_acid: float
        :param min_iodine: The minimum amount of iodine in micrograms the recipe must have per serving.
        :type min_iodine: float
        :param max_iodine: The maximum amount of iodine in micrograms the recipe can have per serving.
        :type max_iodine: float
        :param min_iron: The minimum amount of iron in milligrams the recipe must have per serving.
        :type min_iron: float
        :param max_iron: The maximum amount of iron in milligrams the recipe can have per serving.
        :type max_iron: float
        :param min_zinc: The minimum amount of zinc in milligrams the recipe must have per serving.
        :type min_zinc: float
        :param max_zinc: The maximum amount of zinc in milligrams the recipe can have per serving.
        :type max_zinc: float
        :param min_magnesium: The minimum amount of magnesium in milligrams the recipe must have per serving.
        :type min_magnesium: float
        :param max_magnesium: The maximum amount of magnesium in milligrams the recipe can have per serving.
        :type max_magnesium: float
        :param min_manganese: The minimum amount of manganese in milligrams the recipe must have per serving.
        :type min_manganese: float
        :param max_manganese: The maximum amount of manganese in milligrams the recipe can have per serving.
        :type max_manganese: float
        :param min_phosphorus: The minimum amount of phosphorus in milligrams the recipe must have per serving.
        :type min_phosphorus: float
        :param max_phosphorus: The maximum amount of phosphorus in milligrams the recipe can have per serving.
        :type max_phosphorus: float
        :param min_potassium: The minimum amount of potassium in milligrams the recipe must have per serving.
        :type min_potassium: float
        :param max_potassium: The maximum amount of potassium in milligrams the recipe can have per serving.
        :type max_potassium: float
        :param min_sodium: The minimum amount of sodium in milligrams the recipe must have per serving.
        :type min_sodium: float
        :param max_sodium: The maximum amount of sodium in milligrams the recipe can have per serving.
        :type max_sodium: float
        :param min_selenium: The minimum amount of selenium in micrograms the recipe must have per serving.
        :type min_selenium: float
        :param max_selenium: The maximum amount of selenium in micrograms the recipe can have per serving.
        :type max_selenium: float
        :param min_copper: The minimum amount of copper in milligrams the recipe must have per serving.
        :type min_copper: float
        :param max_copper: The maximum amount of copper in milligrams the recipe can have per serving.
        :type max_copper: float
        :param min_calcium: The minimum amount of calcium in milligrams the recipe must have per serving.
        :type min_calcium: float
        :param max_calcium: The maximum amount of calcium in milligrams the recipe can have per serving.
        :type max_calcium: float
        :param min_choline: The minimum amount of choline in milligrams the recipe must have per serving.
        :type min_choline: float
        :param max_choline: The maximum amount of choline in milligrams the recipe can have per serving.
        :type max_choline: float
        :param min_cholesterol: The minimum amount of cholesterol in milligrams the recipe must have per serving.
        :type min_cholesterol: float
        :param max_cholesterol: The maximum amount of cholesterol in milligrams the recipe can have per serving.
        :type max_cholesterol: float
        :param min_fluoride: The minimum amount of fluoride in milligrams the recipe must have per serving.
        :type min_fluoride: float
        :param max_fluoride: The maximum amount of fluoride in milligrams the recipe can have per serving.
        :type max_fluoride: float
        :param min_alcohol: The minimum amount of alcohol in grams the recipe must have per serving.
        :type min_alcohol: float
        :param max_alcohol: The maximum amount of alcohol in grams the recipe can have per serving.
        :type max_alcohol: float
        :param min_caffeine: The minimum amount of caffeine in milligrams the recipe must have per serving.
        :type min_caffeine: float
        :param max_caffeine: The maximum amount of caffeine in milligrams the recipe can have per serving.
        :type max_caffeine: float
        :param min_saturated_fat: The minimum amount of saturated fat in grams the recipe must have per serving.
        :type min_saturated_fat: float
        :param max_saturated_fat: The maximum amount of saturated fat in grams the recipe can have per serving.
        :type max_saturated_fat: float
        :param min_vitamin_a: The minimum amount of Vitamin A in IU the recipe must have per serving.
        :type min_vitamin_a: float
        :param max_vitamin_a: The maximum amount of Vitamin A in IU the recipe can have per serving.
        :type max_vitamin_a: float
        :param min_vitamin_c: The minimum amount of Vitamin C in milligrams the recipe must have per serving.
        :type min_vitamin_c: float
        :param max_vitamin_c: The maximum amount of Vitamin C in milligrams the recipe can have per serving.
        :type max_vitamin_c: float
        :param min_vitamin_d: The minimum amount of Vitamin D in micrograms the recipe must have per serving.
        :type min_vitamin_d: float
        :param max_vitamin_d: The maximum amount of Vitamin D in micrograms the recipe can have per serving.
        :type max_vitamin_d: float
        :param min_vitamin_e: The minimum amount of Vitamin E in milligrams the recipe must have per serving.
        :type min_vitamin_e: float
        :param max_vitamin_e: The maximum amount of Vitamin E in milligrams the recipe can have per serving.
        :type max_vitamin_e: float
        :param min_vitamin_k: The minimum amount of Vitamin K in micrograms the recipe must have per serving.
        :type min_vitamin_k: float
        :param max_vitamin_k: The maximum amount of Vitamin K in micrograms the recipe can have per serving.
        :type max_vitamin_k: float
        :param min_vitamin_b1: The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.
        :type min_vitamin_b1: float
        :param max_vitamin_b1: The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.
        :type max_vitamin_b1: float
        :param min_vitamin_b2: The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.
        :type min_vitamin_b2: float
        :param max_vitamin_b2: The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.
        :type max_vitamin_b2: float
        :param min_vitamin_b3: The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.
        :type min_vitamin_b3: float
        :param max_vitamin_b3: The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.
        :type max_vitamin_b3: float
        :param min_vitamin_b5: The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.
        :type min_vitamin_b5: float
        :param max_vitamin_b5: The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.
        :type max_vitamin_b5: float
        :param min_vitamin_b6: The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.
        :type min_vitamin_b6: float
        :param max_vitamin_b6: The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.
        :type max_vitamin_b6: float
        :param min_vitamin_b12: The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.
        :type min_vitamin_b12: float
        :param max_vitamin_b12: The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.
        :type max_vitamin_b12: float
        :param sort: The strategy to sort recipes by.
        :type sort: str
        :param sort_direction: Whether to sort ascending or descending (ASC or DESC).
        :type sort_direction: str
        :param offset: The number of recipes to skip, between 0 and 900.
        :type offset: int
        :param number: The number of recipes, between 1 and 100.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_recipes_serialize(
            query=query,
            cuisines=cuisines,
            exclude_cuisines=exclude_cuisines,
            meal_type=meal_type,
            diet=diet,
            intolerances=intolerances,
            equipment=equipment,
            include_ingredients=include_ingredients,
            exclude_ingredients=exclude_ingredients,
            fill_ingredients=fill_ingredients,
            add_recipe_information=add_recipe_information,
            max_time=max_time,
            min_servings=min_servings,
            max_servings=max_servings,
            min_calories=min_calories,
            max_calories=max_calories,
            min_carbs=min_carbs,
            max_carbs=max_carbs,
            min_protein=min_protein,
            max_protein=max_protein,
            min_fat=min_fat,
            max_fat=max_fat,
            min_sugar=min_sugar,
            max_sugar=max_sugar,
            min_fiber=min_fiber,
            max_fiber=max_fiber,
            min_folate=min_folate,
            max_folate=max_folate,
            min_folic_acid=min_folic_acid,
            max_folic_acid=max_folic_acid,
            min_iodine=min_iodine,
            max_iodine=max_iodine,
            min_iron=min_iron,
            max_iron=max_iron,
            min_zinc=min_zinc,
            max_zinc=max_zinc,
            min_magnesium=min_magnesium,
            max_magnesium=max_magnesium,
            min_manganese=min_manganese,
            max_manganese=max_manganese,
            min_phosphorus=min_phosphorus,
            max_phosphorus=max_phosphorus,
            min_potassium=min_potassium,
            max_potassium=max_potassium,
            min_sodium=min_sodium,
            max_sodium=max_sodium,
            min_selenium=min_selenium,
            max_selenium=max_selenium,
            min_copper=min_copper,
            max_copper=max_copper,
            min_calcium=min_calcium,
            max_calcium=max_calcium,
            min_choline=min_choline,
            max_choline=max_choline,
            min_cholesterol=min_cholesterol,
            max_cholesterol=max_cholesterol,
            min_fluoride=min_fluoride,
            max_fluoride=max_fluoride,
            min_alcohol=min_alcohol,
            max_alcohol=max_alcohol,
            min_caffeine=min_caffeine,
            max_caffeine=max_caffeine,
            min_saturated_fat=min_saturated_fat,
            max_saturated_fat=max_saturated_fat,
            min_vitamin_a=min_vitamin_a,
            max_vitamin_a=max_vitamin_a,
            min_vitamin_c=min_vitamin_c,
            max_vitamin_c=max_vitamin_c,
            min_vitamin_d=min_vitamin_d,
            max_vitamin_d=max_vitamin_d,
            min_vitamin_e=min_vitamin_e,
            max_vitamin_e=max_vitamin_e,
            min_vitamin_k=min_vitamin_k,
            max_vitamin_k=max_vitamin_k,
            min_vitamin_b1=min_vitamin_b1,
            max_vitamin_b1=max_vitamin_b1,
            min_vitamin_b2=min_vitamin_b2,
            max_vitamin_b2=max_vitamin_b2,
            min_vitamin_b3=min_vitamin_b3,
            max_vitamin_b3=max_vitamin_b3,
            min_vitamin_b5=min_vitamin_b5,
            max_vitamin_b5=max_vitamin_b5,
            min_vitamin_b6=min_vitamin_b6,
            max_vitamin_b6=max_vitamin_b6,
            min_vitamin_b12=min_vitamin_b12,
            max_vitamin_b12=max_vitamin_b12,
            sort=sort,
            sort_direction=sort_direction,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRecipes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_recipes_serialize(
        self,
        query,
        cuisines,
        exclude_cuisines,
        meal_type,
        diet,
        intolerances,
        equipment,
        include_ingredients,
        exclude_ingredients,
        fill_ingredients,
        add_recipe_information,
        max_time,
        min_servings,
        max_servings,
        min_calories,
        max_calories,
        min_carbs,
        max_carbs,
        min_protein,
        max_protein,
        min_fat,
        max_fat,
        min_sugar,
        max_sugar,
        min_fiber,
        max_fiber,
        min_folate,
        max_folate,
        min_folic_acid,
        max_folic_acid,
        min_iodine,
        max_iodine,
        min_iron,
        max_iron,
        min_zinc,
        max_zinc,
        min_magnesium,
        max_magnesium,
        min_manganese,
        max_manganese,
        min_phosphorus,
        max_phosphorus,
        min_potassium,
        max_potassium,
        min_sodium,
        max_sodium,
        min_selenium,
        max_selenium,
        min_copper,
        max_copper,
        min_calcium,
        max_calcium,
        min_choline,
        max_choline,
        min_cholesterol,
        max_cholesterol,
        min_fluoride,
        max_fluoride,
        min_alcohol,
        max_alcohol,
        min_caffeine,
        max_caffeine,
        min_saturated_fat,
        max_saturated_fat,
        min_vitamin_a,
        max_vitamin_a,
        min_vitamin_c,
        max_vitamin_c,
        min_vitamin_d,
        max_vitamin_d,
        min_vitamin_e,
        max_vitamin_e,
        min_vitamin_k,
        max_vitamin_k,
        min_vitamin_b1,
        max_vitamin_b1,
        min_vitamin_b2,
        max_vitamin_b2,
        min_vitamin_b3,
        max_vitamin_b3,
        min_vitamin_b5,
        max_vitamin_b5,
        min_vitamin_b6,
        max_vitamin_b6,
        min_vitamin_b12,
        max_vitamin_b12,
        sort,
        sort_direction,
        offset,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if cuisines is not None:
            
            _query_params.append(('cuisines', cuisines))
            
        if exclude_cuisines is not None:
            
            _query_params.append(('exclude-cuisines', exclude_cuisines))
            
        if meal_type is not None:
            
            _query_params.append(('meal-type', meal_type))
            
        if diet is not None:
            
            _query_params.append(('diet', diet))
            
        if intolerances is not None:
            
            _query_params.append(('intolerances', intolerances))
            
        if equipment is not None:
            
            _query_params.append(('equipment', equipment))
            
        if include_ingredients is not None:
            
            _query_params.append(('include-ingredients', include_ingredients))
            
        if exclude_ingredients is not None:
            
            _query_params.append(('exclude-ingredients', exclude_ingredients))
            
        if fill_ingredients is not None:
            
            _query_params.append(('fill-ingredients', fill_ingredients))
            
        if add_recipe_information is not None:
            
            _query_params.append(('add-recipe-information', add_recipe_information))
            
        if max_time is not None:
            
            _query_params.append(('max-time', max_time))
            
        if min_servings is not None:
            
            _query_params.append(('min-servings', min_servings))
            
        if max_servings is not None:
            
            _query_params.append(('max-servings', max_servings))
            
        if min_calories is not None:
            
            _query_params.append(('min-calories', min_calories))
            
        if max_calories is not None:
            
            _query_params.append(('max-calories', max_calories))
            
        if min_carbs is not None:
            
            _query_params.append(('min-carbs', min_carbs))
            
        if max_carbs is not None:
            
            _query_params.append(('max-carbs', max_carbs))
            
        if min_protein is not None:
            
            _query_params.append(('min-protein', min_protein))
            
        if max_protein is not None:
            
            _query_params.append(('max-protein', max_protein))
            
        if min_fat is not None:
            
            _query_params.append(('min-fat', min_fat))
            
        if max_fat is not None:
            
            _query_params.append(('max-fat', max_fat))
            
        if min_sugar is not None:
            
            _query_params.append(('min-sugar', min_sugar))
            
        if max_sugar is not None:
            
            _query_params.append(('max-sugar', max_sugar))
            
        if min_fiber is not None:
            
            _query_params.append(('min-fiber', min_fiber))
            
        if max_fiber is not None:
            
            _query_params.append(('max-fiber', max_fiber))
            
        if min_folate is not None:
            
            _query_params.append(('min-folate', min_folate))
            
        if max_folate is not None:
            
            _query_params.append(('max-folate', max_folate))
            
        if min_folic_acid is not None:
            
            _query_params.append(('min-folic-acid', min_folic_acid))
            
        if max_folic_acid is not None:
            
            _query_params.append(('max-folic-acid', max_folic_acid))
            
        if min_iodine is not None:
            
            _query_params.append(('min-iodine', min_iodine))
            
        if max_iodine is not None:
            
            _query_params.append(('max-iodine', max_iodine))
            
        if min_iron is not None:
            
            _query_params.append(('min-iron', min_iron))
            
        if max_iron is not None:
            
            _query_params.append(('max-iron', max_iron))
            
        if min_zinc is not None:
            
            _query_params.append(('min-zinc', min_zinc))
            
        if max_zinc is not None:
            
            _query_params.append(('max-zinc', max_zinc))
            
        if min_magnesium is not None:
            
            _query_params.append(('min-magnesium', min_magnesium))
            
        if max_magnesium is not None:
            
            _query_params.append(('max-magnesium', max_magnesium))
            
        if min_manganese is not None:
            
            _query_params.append(('min-manganese', min_manganese))
            
        if max_manganese is not None:
            
            _query_params.append(('max-manganese', max_manganese))
            
        if min_phosphorus is not None:
            
            _query_params.append(('min-phosphorus', min_phosphorus))
            
        if max_phosphorus is not None:
            
            _query_params.append(('max-phosphorus', max_phosphorus))
            
        if min_potassium is not None:
            
            _query_params.append(('min-potassium', min_potassium))
            
        if max_potassium is not None:
            
            _query_params.append(('max-potassium', max_potassium))
            
        if min_sodium is not None:
            
            _query_params.append(('min-sodium', min_sodium))
            
        if max_sodium is not None:
            
            _query_params.append(('max-sodium', max_sodium))
            
        if min_selenium is not None:
            
            _query_params.append(('min-selenium', min_selenium))
            
        if max_selenium is not None:
            
            _query_params.append(('max-selenium', max_selenium))
            
        if min_copper is not None:
            
            _query_params.append(('min-copper', min_copper))
            
        if max_copper is not None:
            
            _query_params.append(('max-copper', max_copper))
            
        if min_calcium is not None:
            
            _query_params.append(('min-calcium', min_calcium))
            
        if max_calcium is not None:
            
            _query_params.append(('max-calcium', max_calcium))
            
        if min_choline is not None:
            
            _query_params.append(('min-choline', min_choline))
            
        if max_choline is not None:
            
            _query_params.append(('max-choline', max_choline))
            
        if min_cholesterol is not None:
            
            _query_params.append(('min-cholesterol', min_cholesterol))
            
        if max_cholesterol is not None:
            
            _query_params.append(('max-cholesterol', max_cholesterol))
            
        if min_fluoride is not None:
            
            _query_params.append(('min-fluoride', min_fluoride))
            
        if max_fluoride is not None:
            
            _query_params.append(('max-fluoride', max_fluoride))
            
        if min_alcohol is not None:
            
            _query_params.append(('min-alcohol', min_alcohol))
            
        if max_alcohol is not None:
            
            _query_params.append(('max-alcohol', max_alcohol))
            
        if min_caffeine is not None:
            
            _query_params.append(('min-caffeine', min_caffeine))
            
        if max_caffeine is not None:
            
            _query_params.append(('max-caffeine', max_caffeine))
            
        if min_saturated_fat is not None:
            
            _query_params.append(('min-saturated-fat', min_saturated_fat))
            
        if max_saturated_fat is not None:
            
            _query_params.append(('max-saturated-fat', max_saturated_fat))
            
        if min_vitamin_a is not None:
            
            _query_params.append(('min-vitamin-a', min_vitamin_a))
            
        if max_vitamin_a is not None:
            
            _query_params.append(('max-vitamin-a', max_vitamin_a))
            
        if min_vitamin_c is not None:
            
            _query_params.append(('min-vitamin-c', min_vitamin_c))
            
        if max_vitamin_c is not None:
            
            _query_params.append(('max-vitamin-c', max_vitamin_c))
            
        if min_vitamin_d is not None:
            
            _query_params.append(('min-vitamin-d', min_vitamin_d))
            
        if max_vitamin_d is not None:
            
            _query_params.append(('max-vitamin-d', max_vitamin_d))
            
        if min_vitamin_e is not None:
            
            _query_params.append(('min-vitamin-e', min_vitamin_e))
            
        if max_vitamin_e is not None:
            
            _query_params.append(('max-vitamin-e', max_vitamin_e))
            
        if min_vitamin_k is not None:
            
            _query_params.append(('min-vitamin-k', min_vitamin_k))
            
        if max_vitamin_k is not None:
            
            _query_params.append(('max-vitamin-k', max_vitamin_k))
            
        if min_vitamin_b1 is not None:
            
            _query_params.append(('min-vitamin-b1', min_vitamin_b1))
            
        if max_vitamin_b1 is not None:
            
            _query_params.append(('max-vitamin-b1', max_vitamin_b1))
            
        if min_vitamin_b2 is not None:
            
            _query_params.append(('min-vitamin-b2', min_vitamin_b2))
            
        if max_vitamin_b2 is not None:
            
            _query_params.append(('max-vitamin-b2', max_vitamin_b2))
            
        if min_vitamin_b3 is not None:
            
            _query_params.append(('min-vitamin-b3', min_vitamin_b3))
            
        if max_vitamin_b3 is not None:
            
            _query_params.append(('max-vitamin-b3', max_vitamin_b3))
            
        if min_vitamin_b5 is not None:
            
            _query_params.append(('min-vitamin-b5', min_vitamin_b5))
            
        if max_vitamin_b5 is not None:
            
            _query_params.append(('max-vitamin-b5', max_vitamin_b5))
            
        if min_vitamin_b6 is not None:
            
            _query_params.append(('min-vitamin-b6', min_vitamin_b6))
            
        if max_vitamin_b6 is not None:
            
            _query_params.append(('max-vitamin-b6', max_vitamin_b6))
            
        if min_vitamin_b12 is not None:
            
            _query_params.append(('min-vitamin-b12', min_vitamin_b12))
            
        if max_vitamin_b12 is not None:
            
            _query_params.append(('max-vitamin-b12', max_vitamin_b12))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if sort_direction is not None:
            
            _query_params.append(('sort-direction', sort_direction))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search-recipes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_restaurants(
        self,
        lat: Annotated[Union[Annotated[float, Field(le=999, strict=True, ge=-999)], Annotated[int, Field(le=999, strict=True, ge=-999)]], Field(description="The latitude to search around.")],
        lon: Annotated[Union[Annotated[float, Field(le=999, strict=True, ge=-999)], Annotated[int, Field(le=999, strict=True, ge=-999)]], Field(description="The longitude to search around.")],
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        distance: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum distance of the restaurant in miles around the given location.")] = None,
        budget: Annotated[Optional[Union[Annotated[float, Field(le=9999, strict=True, ge=0)], Annotated[int, Field(le=9999, strict=True, ge=0)]]], Field(description="The budget in USD for the meal.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=5, strict=True, ge=0)], Annotated[int, Field(le=5, strict=True, ge=0)]]], Field(description="The minimum rating of the restaurants in range [0,5].")] = None,
        cuisine: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine that the restaurants should support.")] = None,
        is_open: Annotated[Optional[StrictBool], Field(description="Whether the restaurants have to be open now.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=9999, strict=True, ge=0)]], Field(description="The page of the results.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The sort parameter, one of: cheapest, fastest, rating, distance or relevance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchRestaurants200Response:
        """Search Restaurants

        Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.

        :param lat: The latitude to search around. (required)
        :type lat: float
        :param lon: The longitude to search around. (required)
        :type lon: float
        :param query: The search query.
        :type query: str
        :param distance: The maximum distance of the restaurant in miles around the given location.
        :type distance: int
        :param budget: The budget in USD for the meal.
        :type budget: float
        :param min_rating: The minimum rating of the restaurants in range [0,5].
        :type min_rating: float
        :param cuisine: The cuisine that the restaurants should support.
        :type cuisine: str
        :param is_open: Whether the restaurants have to be open now.
        :type is_open: bool
        :param page: The page of the results.
        :type page: int
        :param sort: The sort parameter, one of: cheapest, fastest, rating, distance or relevance.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_restaurants_serialize(
            lat=lat,
            lon=lon,
            query=query,
            distance=distance,
            budget=budget,
            min_rating=min_rating,
            cuisine=cuisine,
            is_open=is_open,
            page=page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRestaurants200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_restaurants_with_http_info(
        self,
        lat: Annotated[Union[Annotated[float, Field(le=999, strict=True, ge=-999)], Annotated[int, Field(le=999, strict=True, ge=-999)]], Field(description="The latitude to search around.")],
        lon: Annotated[Union[Annotated[float, Field(le=999, strict=True, ge=-999)], Annotated[int, Field(le=999, strict=True, ge=-999)]], Field(description="The longitude to search around.")],
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        distance: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum distance of the restaurant in miles around the given location.")] = None,
        budget: Annotated[Optional[Union[Annotated[float, Field(le=9999, strict=True, ge=0)], Annotated[int, Field(le=9999, strict=True, ge=0)]]], Field(description="The budget in USD for the meal.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=5, strict=True, ge=0)], Annotated[int, Field(le=5, strict=True, ge=0)]]], Field(description="The minimum rating of the restaurants in range [0,5].")] = None,
        cuisine: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine that the restaurants should support.")] = None,
        is_open: Annotated[Optional[StrictBool], Field(description="Whether the restaurants have to be open now.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=9999, strict=True, ge=0)]], Field(description="The page of the results.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The sort parameter, one of: cheapest, fastest, rating, distance or relevance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchRestaurants200Response]:
        """Search Restaurants

        Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.

        :param lat: The latitude to search around. (required)
        :type lat: float
        :param lon: The longitude to search around. (required)
        :type lon: float
        :param query: The search query.
        :type query: str
        :param distance: The maximum distance of the restaurant in miles around the given location.
        :type distance: int
        :param budget: The budget in USD for the meal.
        :type budget: float
        :param min_rating: The minimum rating of the restaurants in range [0,5].
        :type min_rating: float
        :param cuisine: The cuisine that the restaurants should support.
        :type cuisine: str
        :param is_open: Whether the restaurants have to be open now.
        :type is_open: bool
        :param page: The page of the results.
        :type page: int
        :param sort: The sort parameter, one of: cheapest, fastest, rating, distance or relevance.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_restaurants_serialize(
            lat=lat,
            lon=lon,
            query=query,
            distance=distance,
            budget=budget,
            min_rating=min_rating,
            cuisine=cuisine,
            is_open=is_open,
            page=page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRestaurants200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_restaurants_without_preload_content(
        self,
        lat: Annotated[Union[Annotated[float, Field(le=999, strict=True, ge=-999)], Annotated[int, Field(le=999, strict=True, ge=-999)]], Field(description="The latitude to search around.")],
        lon: Annotated[Union[Annotated[float, Field(le=999, strict=True, ge=-999)], Annotated[int, Field(le=999, strict=True, ge=-999)]], Field(description="The longitude to search around.")],
        query: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The search query.")] = None,
        distance: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum distance of the restaurant in miles around the given location.")] = None,
        budget: Annotated[Optional[Union[Annotated[float, Field(le=9999, strict=True, ge=0)], Annotated[int, Field(le=9999, strict=True, ge=0)]]], Field(description="The budget in USD for the meal.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=5, strict=True, ge=0)], Annotated[int, Field(le=5, strict=True, ge=0)]]], Field(description="The minimum rating of the restaurants in range [0,5].")] = None,
        cuisine: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="The cuisine that the restaurants should support.")] = None,
        is_open: Annotated[Optional[StrictBool], Field(description="Whether the restaurants have to be open now.")] = None,
        page: Annotated[Optional[Annotated[int, Field(le=9999, strict=True, ge=0)]], Field(description="The page of the results.")] = None,
        sort: Annotated[Optional[Annotated[str, Field(strict=True, max_length=30)]], Field(description="The sort parameter, one of: cheapest, fastest, rating, distance or relevance.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Restaurants

        Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.

        :param lat: The latitude to search around. (required)
        :type lat: float
        :param lon: The longitude to search around. (required)
        :type lon: float
        :param query: The search query.
        :type query: str
        :param distance: The maximum distance of the restaurant in miles around the given location.
        :type distance: int
        :param budget: The budget in USD for the meal.
        :type budget: float
        :param min_rating: The minimum rating of the restaurants in range [0,5].
        :type min_rating: float
        :param cuisine: The cuisine that the restaurants should support.
        :type cuisine: str
        :param is_open: Whether the restaurants have to be open now.
        :type is_open: bool
        :param page: The page of the results.
        :type page: int
        :param sort: The sort parameter, one of: cheapest, fastest, rating, distance or relevance.
        :type sort: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_restaurants_serialize(
            lat=lat,
            lon=lon,
            query=query,
            distance=distance,
            budget=budget,
            min_rating=min_rating,
            cuisine=cuisine,
            is_open=is_open,
            page=page,
            sort=sort,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchRestaurants200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_restaurants_serialize(
        self,
        lat,
        lon,
        query,
        distance,
        budget,
        min_rating,
        cuisine,
        is_open,
        page,
        sort,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if lat is not None:
            
            _query_params.append(('lat', lat))
            
        if lon is not None:
            
            _query_params.append(('lon', lon))
            
        if distance is not None:
            
            _query_params.append(('distance', distance))
            
        if budget is not None:
            
            _query_params.append(('budget', budget))
            
        if min_rating is not None:
            
            _query_params.append(('min-rating', min_rating))
            
        if cuisine is not None:
            
            _query_params.append(('cuisine', cuisine))
            
        if is_open is not None:
            
            _query_params.append(('is-open', is_open))
            
        if page is not None:
            
            _query_params.append(('page', page))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search-restaurants',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


