# coding: utf-8

"""
    API League

    API League is a Hub for World Class APIs.

    The version of the OpenAPI document: 1.3.0
    Contact: mail@apileague.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, field_validator
from typing import Optional, Union
from typing_extensions import Annotated
from apileague.models.generate_nonsense_word200_response import GenerateNonsenseWord200Response
from apileague.models.random_meme200_response import RandomMeme200Response
from apileague.models.search_gifs200_response import SearchGifs200Response
from apileague.models.search_jokes200_response import SearchJokes200Response
from apileague.models.search_jokes200_response_jokes_inner import SearchJokes200ResponseJokesInner
from apileague.models.search_memes200_response import SearchMemes200Response

from apileague.api_client import ApiClient, RequestSerialized
from apileague.api_response import ApiResponse
from apileague.rest import RESTResponseType


class HumorApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def generate_nonsense_word(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> GenerateNonsenseWord200Response:
        """Generate Nonsense Word

        Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_nonsense_word_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenerateNonsenseWord200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def generate_nonsense_word_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[GenerateNonsenseWord200Response]:
        """Generate Nonsense Word

        Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_nonsense_word_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenerateNonsenseWord200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def generate_nonsense_word_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Generate Nonsense Word

        Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._generate_nonsense_word_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "GenerateNonsenseWord200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _generate_nonsense_word_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/generate-nonsense-word',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def random_joke(
        self,
        include_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes should have.")] = None,
        exclude_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes must not have.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the jokes.")] = None,
        max_length: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="The maximum length of the joke in letters.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchJokes200ResponseJokesInner:
        """Random Joke

        This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \"nsfw\" or \"religious\".

        :param include_tags: A comma-separated list of tags the jokes should have.
        :type include_tags: str
        :param exclude_tags: A comma-separated list of tags the jokes must not have.
        :type exclude_tags: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the jokes.
        :type min_rating: float
        :param max_length: The maximum length of the joke in letters.
        :type max_length: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_joke_serialize(
            include_tags=include_tags,
            exclude_tags=exclude_tags,
            min_rating=min_rating,
            max_length=max_length,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchJokes200ResponseJokesInner",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def random_joke_with_http_info(
        self,
        include_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes should have.")] = None,
        exclude_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes must not have.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the jokes.")] = None,
        max_length: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="The maximum length of the joke in letters.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchJokes200ResponseJokesInner]:
        """Random Joke

        This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \"nsfw\" or \"religious\".

        :param include_tags: A comma-separated list of tags the jokes should have.
        :type include_tags: str
        :param exclude_tags: A comma-separated list of tags the jokes must not have.
        :type exclude_tags: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the jokes.
        :type min_rating: float
        :param max_length: The maximum length of the joke in letters.
        :type max_length: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_joke_serialize(
            include_tags=include_tags,
            exclude_tags=exclude_tags,
            min_rating=min_rating,
            max_length=max_length,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchJokes200ResponseJokesInner",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def random_joke_without_preload_content(
        self,
        include_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes should have.")] = None,
        exclude_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes must not have.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the jokes.")] = None,
        max_length: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=1)]], Field(description="The maximum length of the joke in letters.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Random Joke

        This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \"nsfw\" or \"religious\".

        :param include_tags: A comma-separated list of tags the jokes should have.
        :type include_tags: str
        :param exclude_tags: A comma-separated list of tags the jokes must not have.
        :type exclude_tags: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the jokes.
        :type min_rating: float
        :param max_length: The maximum length of the joke in letters.
        :type max_length: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_joke_serialize(
            include_tags=include_tags,
            exclude_tags=exclude_tags,
            min_rating=min_rating,
            max_length=max_length,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchJokes200ResponseJokesInner",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _random_joke_serialize(
        self,
        include_tags,
        exclude_tags,
        min_rating,
        max_length,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if include_tags is not None:
            
            _query_params.append(('include-tags', include_tags))
            
        if exclude_tags is not None:
            
            _query_params.append(('exclude-tags', exclude_tags))
            
        if min_rating is not None:
            
            _query_params.append(('min-rating', min_rating))
            
        if max_length is not None:
            
            _query_params.append(('max-length', max_length))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/retrieve-random-joke',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def random_meme(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the meme.")] = None,
        keywords_in_image: Annotated[Optional[StrictBool], Field(description="Whether the keywords must occur in the image.")] = None,
        media_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=10)]], Field(description="The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the meme.")] = None,
        max_age_days: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The maximum age of the meme in days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RandomMeme200Response:
        """Random Meme

        Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.

        :param keywords: A comma-separated list of words that must occur in the meme.
        :type keywords: str
        :param keywords_in_image: Whether the keywords must occur in the image.
        :type keywords_in_image: bool
        :param media_type: The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').
        :type media_type: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the meme.
        :type min_rating: float
        :param max_age_days: The maximum age of the meme in days.
        :type max_age_days: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_meme_serialize(
            keywords=keywords,
            keywords_in_image=keywords_in_image,
            media_type=media_type,
            min_rating=min_rating,
            max_age_days=max_age_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RandomMeme200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def random_meme_with_http_info(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the meme.")] = None,
        keywords_in_image: Annotated[Optional[StrictBool], Field(description="Whether the keywords must occur in the image.")] = None,
        media_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=10)]], Field(description="The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the meme.")] = None,
        max_age_days: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The maximum age of the meme in days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[RandomMeme200Response]:
        """Random Meme

        Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.

        :param keywords: A comma-separated list of words that must occur in the meme.
        :type keywords: str
        :param keywords_in_image: Whether the keywords must occur in the image.
        :type keywords_in_image: bool
        :param media_type: The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').
        :type media_type: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the meme.
        :type min_rating: float
        :param max_age_days: The maximum age of the meme in days.
        :type max_age_days: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_meme_serialize(
            keywords=keywords,
            keywords_in_image=keywords_in_image,
            media_type=media_type,
            min_rating=min_rating,
            max_age_days=max_age_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RandomMeme200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def random_meme_without_preload_content(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the meme.")] = None,
        keywords_in_image: Annotated[Optional[StrictBool], Field(description="Whether the keywords must occur in the image.")] = None,
        media_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=10)]], Field(description="The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the meme.")] = None,
        max_age_days: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The maximum age of the meme in days.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Random Meme

        Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.

        :param keywords: A comma-separated list of words that must occur in the meme.
        :type keywords: str
        :param keywords_in_image: Whether the keywords must occur in the image.
        :type keywords_in_image: bool
        :param media_type: The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').
        :type media_type: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the meme.
        :type min_rating: float
        :param max_age_days: The maximum age of the meme in days.
        :type max_age_days: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._random_meme_serialize(
            keywords=keywords,
            keywords_in_image=keywords_in_image,
            media_type=media_type,
            min_rating=min_rating,
            max_age_days=max_age_days,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RandomMeme200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _random_meme_serialize(
        self,
        keywords,
        keywords_in_image,
        media_type,
        min_rating,
        max_age_days,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        if keywords_in_image is not None:
            
            _query_params.append(('keywords-in-image', keywords_in_image))
            
        if media_type is not None:
            
            _query_params.append(('media-type', media_type))
            
        if min_rating is not None:
            
            _query_params.append(('min-rating', min_rating))
            
        if max_age_days is not None:
            
            _query_params.append(('max-age-days', max_age_days))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/retrieve-random-meme',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_gifs(
        self,
        query: Annotated[str, Field(strict=True, max_length=300, description="The search query.")],
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of gifs to return in range [1,10]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchGifs200Response:
        """Search Gifs

        Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.

        :param query: The search query. (required)
        :type query: str
        :param number: The number of gifs to return in range [1,10]
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_gifs_serialize(
            query=query,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchGifs200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_gifs_with_http_info(
        self,
        query: Annotated[str, Field(strict=True, max_length=300, description="The search query.")],
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of gifs to return in range [1,10]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchGifs200Response]:
        """Search Gifs

        Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.

        :param query: The search query. (required)
        :type query: str
        :param number: The number of gifs to return in range [1,10]
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_gifs_serialize(
            query=query,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchGifs200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_gifs_without_preload_content(
        self,
        query: Annotated[str, Field(strict=True, max_length=300, description="The search query.")],
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of gifs to return in range [1,10]")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Gifs

        Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.

        :param query: The search query. (required)
        :type query: str
        :param number: The number of gifs to return in range [1,10]
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_gifs_serialize(
            query=query,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchGifs200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_gifs_serialize(
        self,
        query,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if query is not None:
            
            _query_params.append(('query', query))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search-gifs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_jokes(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the joke.")] = None,
        include_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes should have.")] = None,
        exclude_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes must not have.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the jokes.")] = None,
        max_length: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The maximum length of the joke in letters.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The number of jokes to skip, between 0 and 1000.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of jokes, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchJokes200Response:
        """Search Jokes

        With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.

        :param keywords: A comma-separated list of words that must occur in the joke.
        :type keywords: str
        :param include_tags: A comma-separated list of tags the jokes should have.
        :type include_tags: str
        :param exclude_tags: A comma-separated list of tags the jokes must not have.
        :type exclude_tags: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the jokes.
        :type min_rating: float
        :param max_length: The maximum length of the joke in letters.
        :type max_length: float
        :param offset: The number of jokes to skip, between 0 and 1000.
        :type offset: int
        :param number: The number of jokes, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_jokes_serialize(
            keywords=keywords,
            include_tags=include_tags,
            exclude_tags=exclude_tags,
            min_rating=min_rating,
            max_length=max_length,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchJokes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_jokes_with_http_info(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the joke.")] = None,
        include_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes should have.")] = None,
        exclude_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes must not have.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the jokes.")] = None,
        max_length: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The maximum length of the joke in letters.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The number of jokes to skip, between 0 and 1000.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of jokes, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchJokes200Response]:
        """Search Jokes

        With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.

        :param keywords: A comma-separated list of words that must occur in the joke.
        :type keywords: str
        :param include_tags: A comma-separated list of tags the jokes should have.
        :type include_tags: str
        :param exclude_tags: A comma-separated list of tags the jokes must not have.
        :type exclude_tags: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the jokes.
        :type min_rating: float
        :param max_length: The maximum length of the joke in letters.
        :type max_length: float
        :param offset: The number of jokes to skip, between 0 and 1000.
        :type offset: int
        :param number: The number of jokes, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_jokes_serialize(
            keywords=keywords,
            include_tags=include_tags,
            exclude_tags=exclude_tags,
            min_rating=min_rating,
            max_length=max_length,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchJokes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_jokes_without_preload_content(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the joke.")] = None,
        include_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes should have.")] = None,
        exclude_tags: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of tags the jokes must not have.")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the jokes.")] = None,
        max_length: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The maximum length of the joke in letters.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The number of jokes to skip, between 0 and 1000.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of jokes, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Jokes

        With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.

        :param keywords: A comma-separated list of words that must occur in the joke.
        :type keywords: str
        :param include_tags: A comma-separated list of tags the jokes should have.
        :type include_tags: str
        :param exclude_tags: A comma-separated list of tags the jokes must not have.
        :type exclude_tags: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the jokes.
        :type min_rating: float
        :param max_length: The maximum length of the joke in letters.
        :type max_length: float
        :param offset: The number of jokes to skip, between 0 and 1000.
        :type offset: int
        :param number: The number of jokes, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_jokes_serialize(
            keywords=keywords,
            include_tags=include_tags,
            exclude_tags=exclude_tags,
            min_rating=min_rating,
            max_length=max_length,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchJokes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_jokes_serialize(
        self,
        keywords,
        include_tags,
        exclude_tags,
        min_rating,
        max_length,
        offset,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        if include_tags is not None:
            
            _query_params.append(('include-tags', include_tags))
            
        if exclude_tags is not None:
            
            _query_params.append(('exclude-tags', exclude_tags))
            
        if min_rating is not None:
            
            _query_params.append(('min-rating', min_rating))
            
        if max_length is not None:
            
            _query_params.append(('max-length', max_length))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search-jokes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def search_memes(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the meme.")] = None,
        keywords_in_image: Annotated[Optional[StrictBool], Field(description="Whether the keywords must occur in the image.")] = None,
        media_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=10)]], Field(description="The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the meme.")] = None,
        max_age_days: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum age of the meme in days.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The number of memes to skip, between 0 and 1000.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of memes, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SearchMemes200Response:
        """Search Memes

        With over 200,000 memes, you'll surely find something funny. You can even search for text within memes and filter by user ratings.

        :param keywords: A comma-separated list of words that must occur in the meme.
        :type keywords: str
        :param keywords_in_image: Whether the keywords must occur in the image.
        :type keywords_in_image: bool
        :param media_type: The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').
        :type media_type: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the meme.
        :type min_rating: float
        :param max_age_days: The maximum age of the meme in days.
        :type max_age_days: int
        :param offset: The number of memes to skip, between 0 and 1000.
        :type offset: int
        :param number: The number of memes, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_memes_serialize(
            keywords=keywords,
            keywords_in_image=keywords_in_image,
            media_type=media_type,
            min_rating=min_rating,
            max_age_days=max_age_days,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchMemes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def search_memes_with_http_info(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the meme.")] = None,
        keywords_in_image: Annotated[Optional[StrictBool], Field(description="Whether the keywords must occur in the image.")] = None,
        media_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=10)]], Field(description="The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the meme.")] = None,
        max_age_days: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum age of the meme in days.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The number of memes to skip, between 0 and 1000.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of memes, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SearchMemes200Response]:
        """Search Memes

        With over 200,000 memes, you'll surely find something funny. You can even search for text within memes and filter by user ratings.

        :param keywords: A comma-separated list of words that must occur in the meme.
        :type keywords: str
        :param keywords_in_image: Whether the keywords must occur in the image.
        :type keywords_in_image: bool
        :param media_type: The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').
        :type media_type: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the meme.
        :type min_rating: float
        :param max_age_days: The maximum age of the meme in days.
        :type max_age_days: int
        :param offset: The number of memes to skip, between 0 and 1000.
        :type offset: int
        :param number: The number of memes, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_memes_serialize(
            keywords=keywords,
            keywords_in_image=keywords_in_image,
            media_type=media_type,
            min_rating=min_rating,
            max_age_days=max_age_days,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchMemes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def search_memes_without_preload_content(
        self,
        keywords: Annotated[Optional[Annotated[str, Field(strict=True, max_length=300)]], Field(description="A comma-separated list of words that must occur in the meme.")] = None,
        keywords_in_image: Annotated[Optional[StrictBool], Field(description="Whether the keywords must occur in the image.")] = None,
        media_type: Annotated[Optional[Annotated[str, Field(strict=True, max_length=10)]], Field(description="The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').")] = None,
        min_rating: Annotated[Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]], Field(description="The minimum rating in range [0.0,1.0] of the meme.")] = None,
        max_age_days: Annotated[Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]], Field(description="The maximum age of the meme in days.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(le=1000, strict=True, ge=0)]], Field(description="The number of memes to skip, between 0 and 1000.")] = None,
        number: Annotated[Optional[Annotated[int, Field(le=10, strict=True, ge=1)]], Field(description="The number of memes, between 1 and 10.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search Memes

        With over 200,000 memes, you'll surely find something funny. You can even search for text within memes and filter by user ratings.

        :param keywords: A comma-separated list of words that must occur in the meme.
        :type keywords: str
        :param keywords_in_image: Whether the keywords must occur in the image.
        :type keywords_in_image: bool
        :param media_type: The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').
        :type media_type: str
        :param min_rating: The minimum rating in range [0.0,1.0] of the meme.
        :type min_rating: float
        :param max_age_days: The maximum age of the meme in days.
        :type max_age_days: int
        :param offset: The number of memes to skip, between 0 and 1000.
        :type offset: int
        :param number: The number of memes, between 1 and 10.
        :type number: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._search_memes_serialize(
            keywords=keywords,
            keywords_in_image=keywords_in_image,
            media_type=media_type,
            min_rating=min_rating,
            max_age_days=max_age_days,
            offset=offset,
            number=number,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "SearchMemes200Response",
            '401': None,
            '402': None,
            '403': None,
            '404': None,
            '406': None,
            '429': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _search_memes_serialize(
        self,
        keywords,
        keywords_in_image,
        media_type,
        min_rating,
        max_age_days,
        offset,
        number,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if keywords is not None:
            
            _query_params.append(('keywords', keywords))
            
        if keywords_in_image is not None:
            
            _query_params.append(('keywords-in-image', keywords_in_image))
            
        if media_type is not None:
            
            _query_params.append(('media-type', media_type))
            
        if min_rating is not None:
            
            _query_params.append(('min-rating', min_rating))
            
        if max_age_days is not None:
            
            _query_params.append(('max-age-days', max_age_days))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if number is not None:
            
            _query_params.append(('number', number))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            [
                'application/json'
            ]
        )


        # authentication setting
        _auth_settings: List[str] = [
            'apiKey', 
            'headerApiKey'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/search-memes',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


