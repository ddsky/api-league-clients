=begin comment

API League

API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.6.4
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::TextApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# correct_spelling_api
#
# Correct Spelling API
#
# @param string $text The text to be corrected. (required)
# @param string $language The language of the text, one of en, de, es, fr, or it. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text to be corrected.',
        required => '1',
    },
    'language' => {
        data_type => 'string',
        description => 'The language of the text, one of en, de, es, fr, or it.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'correct_spelling_api' } = {
        summary => 'Correct Spelling API',
        params => $params,
        returns => 'CorrectSpellingAPI200Response',
        };
}
# @return CorrectSpellingAPI200Response
#
sub correct_spelling_api {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling correct_spelling_api");
    }

    # verify the required parameter 'language' is set
    unless (exists $args{'language'}) {
      croak("Missing the required parameter 'language' when calling correct_spelling_api");
    }

    # parse inputs
    my $_resource_path = '/correct-spelling';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    # query params
    if ( exists $args{'language'}) {
        $query_params->{'language'} = $self->{api_client}->to_query_value($args{'language'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CorrectSpellingAPI200Response', $response);
    return $_response_object;
}

#
# detect_gender_by_name_api
#
# Detect Gender by Name API
#
# @param string $name The name of the perso for which the sentiment should be detected. (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'The name of the perso for which the sentiment should be detected.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'detect_gender_by_name_api' } = {
        summary => 'Detect Gender by Name API',
        params => $params,
        returns => 'DetectGenderByNameAPI200Response',
        };
}
# @return DetectGenderByNameAPI200Response
#
sub detect_gender_by_name_api {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling detect_gender_by_name_api");
    }

    # parse inputs
    my $_resource_path = '/detect-gender';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DetectGenderByNameAPI200Response', $response);
    return $_response_object;
}

#
# detect_language_api
#
# Detect Language API
#
# @param string $text The text for which the language should be detected. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text for which the language should be detected.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'detect_language_api' } = {
        summary => 'Detect Language API',
        params => $params,
        returns => 'ARRAY[DetectLanguageAPI200ResponseInner]',
        };
}
# @return ARRAY[DetectLanguageAPI200ResponseInner]
#
sub detect_language_api {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling detect_language_api");
    }

    # parse inputs
    my $_resource_path = '/detect-language';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[DetectLanguageAPI200ResponseInner]', $response);
    return $_response_object;
}

#
# detect_sentiment_api
#
# Detect Sentiment API
#
# @param string $text The text for which the sentiment should be detected. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text for which the sentiment should be detected.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'detect_sentiment_api' } = {
        summary => 'Detect Sentiment API',
        params => $params,
        returns => 'DetectSentimentAPI200Response',
        };
}
# @return DetectSentimentAPI200Response
#
sub detect_sentiment_api {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling detect_sentiment_api");
    }

    # parse inputs
    my $_resource_path = '/detect-sentiment';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('DetectSentimentAPI200Response', $response);
    return $_response_object;
}

#
# extract_dates_api
#
# Extract Dates API
#
# @param string $text The text from which dates should be extracted. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text from which dates should be extracted.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_dates_api' } = {
        summary => 'Extract Dates API',
        params => $params,
        returns => 'ExtractDatesAPI200Response',
        };
}
# @return ExtractDatesAPI200Response
#
sub extract_dates_api {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling extract_dates_api");
    }

    # parse inputs
    my $_resource_path = '/extract-dates';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtractDatesAPI200Response', $response);
    return $_response_object;
}

#
# extract_entities_api
#
# Extract Entities API
#
# @param string $text The text from which entities should be extracted. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text from which entities should be extracted.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_entities_api' } = {
        summary => 'Extract Entities API',
        params => $params,
        returns => 'ExtractEntitiesAPI200Response',
        };
}
# @return ExtractEntitiesAPI200Response
#
sub extract_entities_api {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling extract_entities_api");
    }

    # parse inputs
    my $_resource_path = '/extract-entities';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtractEntitiesAPI200Response', $response);
    return $_response_object;
}

#
# list_word_synonyms_api
#
# List Word Synonyms API
#
# @param string $word The (noun) word for which a list of synonyms should be returned. (required)
{
    my $params = {
    'word' => {
        data_type => 'string',
        description => 'The (noun) word for which a list of synonyms should be returned.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'list_word_synonyms_api' } = {
        summary => 'List Word Synonyms API',
        params => $params,
        returns => 'ListWordSynonymsAPI200Response',
        };
}
# @return ListWordSynonymsAPI200Response
#
sub list_word_synonyms_api {
    my ($self, %args) = @_;

    # verify the required parameter 'word' is set
    unless (exists $args{'word'}) {
      croak("Missing the required parameter 'word' when calling list_word_synonyms_api");
    }

    # parse inputs
    my $_resource_path = '/list-synonyms';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'word'}) {
        $query_params->{'word'} = $self->{api_client}->to_query_value($args{'word'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ListWordSynonymsAPI200Response', $response);
    return $_response_object;
}

#
# pluralize_word_api
#
# Pluralize Word API
#
# @param string $word The (noun) word for which the plural form should be found. (required)
{
    my $params = {
    'word' => {
        data_type => 'string',
        description => 'The (noun) word for which the plural form should be found.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pluralize_word_api' } = {
        summary => 'Pluralize Word API',
        params => $params,
        returns => 'PluralizeWordAPI200Response',
        };
}
# @return PluralizeWordAPI200Response
#
sub pluralize_word_api {
    my ($self, %args) = @_;

    # verify the required parameter 'word' is set
    unless (exists $args{'word'}) {
      croak("Missing the required parameter 'word' when calling pluralize_word_api");
    }

    # parse inputs
    my $_resource_path = '/pluralize-word';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'word'}) {
        $query_params->{'word'} = $self->{api_client}->to_query_value($args{'word'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PluralizeWordAPI200Response', $response);
    return $_response_object;
}

#
# score_readability_api
#
# Score Readability API
#
# @param string $text The text to score for readability. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text to score for readability.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'score_readability_api' } = {
        summary => 'Score Readability API',
        params => $params,
        returns => 'ScoreReadabilityAPI200Response',
        };
}
# @return ScoreReadabilityAPI200Response
#
sub score_readability_api {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling score_readability_api");
    }

    # parse inputs
    my $_resource_path = '/score-readability';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ScoreReadabilityAPI200Response', $response);
    return $_response_object;
}

#
# score_text_api
#
# Score Text API
#
# @param string $title The title of the text to score. (required)
# @param string $text The text to score for multiple metrics. (required)
{
    my $params = {
    'title' => {
        data_type => 'string',
        description => 'The title of the text to score.',
        required => '1',
    },
    'text' => {
        data_type => 'string',
        description => 'The text to score for multiple metrics.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'score_text_api' } = {
        summary => 'Score Text API',
        params => $params,
        returns => 'ScoreTextAPI200Response',
        };
}
# @return ScoreTextAPI200Response
#
sub score_text_api {
    my ($self, %args) = @_;

    # verify the required parameter 'title' is set
    unless (exists $args{'title'}) {
      croak("Missing the required parameter 'title' when calling score_text_api");
    }

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling score_text_api");
    }

    # parse inputs
    my $_resource_path = '/score-text';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'title'}) {
        $query_params->{'title'} = $self->{api_client}->to_query_value($args{'title'});
    }

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ScoreTextAPI200Response', $response);
    return $_response_object;
}

#
# singularize_word_api
#
# Singularize Word API
#
# @param string $word The (noun) word for which the singular form should be found. (required)
{
    my $params = {
    'word' => {
        data_type => 'string',
        description => 'The (noun) word for which the singular form should be found.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'singularize_word_api' } = {
        summary => 'Singularize Word API',
        params => $params,
        returns => 'SingularizeWordAPI200Response',
        };
}
# @return SingularizeWordAPI200Response
#
sub singularize_word_api {
    my ($self, %args) = @_;

    # verify the required parameter 'word' is set
    unless (exists $args{'word'}) {
      croak("Missing the required parameter 'word' when calling singularize_word_api");
    }

    # parse inputs
    my $_resource_path = '/singularize-word';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'word'}) {
        $query_params->{'word'} = $self->{api_client}->to_query_value($args{'word'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SingularizeWordAPI200Response', $response);
    return $_response_object;
}

#
# stem_text_api
#
# Stem Text API
#
# @param string $text The text to be stemmed. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text to be stemmed.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'stem_text_api' } = {
        summary => 'Stem Text API',
        params => $params,
        returns => 'StemTextAPI200Response',
        };
}
# @return StemTextAPI200Response
#
sub stem_text_api {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling stem_text_api");
    }

    # parse inputs
    my $_resource_path = '/stem-text';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('StemTextAPI200Response', $response);
    return $_response_object;
}

#
# tag_part_of_speech_api
#
# Tag Part of Speech API
#
# @param string $text The text to tag the part of speech. (required)
{
    my $params = {
    'text' => {
        data_type => 'string',
        description => 'The text to tag the part of speech.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'tag_part_of_speech_api' } = {
        summary => 'Tag Part of Speech API',
        params => $params,
        returns => 'TagPartOfSpeechAPI200Response',
        };
}
# @return TagPartOfSpeechAPI200Response
#
sub tag_part_of_speech_api {
    my ($self, %args) = @_;

    # verify the required parameter 'text' is set
    unless (exists $args{'text'}) {
      croak("Missing the required parameter 'text' when calling tag_part_of_speech_api");
    }

    # parse inputs
    my $_resource_path = '/tag-pos';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'text'}) {
        $query_params->{'text'} = $self->{api_client}->to_query_value($args{'text'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TagPartOfSpeechAPI200Response', $response);
    return $_response_object;
}

1;
