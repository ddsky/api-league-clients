=begin comment

API League

API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.0.0
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::WebApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# extract_authors
#
# Extract Authors
#
# @param string $url The url with the article from which authors should be extracted. (required)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The url with the article from which authors should be extracted.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_authors' } = {
        summary => 'Extract Authors',
        params => $params,
        returns => 'ExtractAuthors200Response',
        };
}
# @return ExtractAuthors200Response
#
sub extract_authors {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling extract_authors");
    }

    # parse inputs
    my $_resource_path = '/extract-authors';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtractAuthors200Response', $response);
    return $_response_object;
}

#
# extract_content_from_a_web_page
#
# Extract Content from a Web Page
#
# @param string $url The url for which the content will be extracted. (required)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The url for which the content will be extracted.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_content_from_a_web_page' } = {
        summary => 'Extract Content from a Web Page',
        params => $params,
        returns => 'ExtractContentFromAWebPage200Response',
        };
}
# @return ExtractContentFromAWebPage200Response
#
sub extract_content_from_a_web_page {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling extract_content_from_a_web_page");
    }

    # parse inputs
    my $_resource_path = '/extract-content';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtractContentFromAWebPage200Response', $response);
    return $_response_object;
}

#
# extract_publish_date
#
# Extract Publish Date
#
# @param string $url The url for which the publish date should be extracted. (required)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The url for which the publish date should be extracted.',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'extract_publish_date' } = {
        summary => 'Extract Publish Date',
        params => $params,
        returns => 'ExtractPublishDate200Response',
        };
}
# @return ExtractPublishDate200Response
#
sub extract_publish_date {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling extract_publish_date");
    }

    # parse inputs
    my $_resource_path = '/extract-publish-date';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ExtractPublishDate200Response', $response);
    return $_response_object;
}

#
# search_web
#
# Search Web
#
# @param string $query The search query. (required)
# @param int $number The number of results to return in range [1,50] (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '1',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of results to return in range [1,50]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_web' } = {
        summary => 'Search Web',
        params => $params,
        returns => 'SearchWeb200Response',
        };
}
# @return SearchWeb200Response
#
sub search_web {
    my ($self, %args) = @_;

    # verify the required parameter 'query' is set
    unless (exists $args{'query'}) {
      croak("Missing the required parameter 'query' when calling search_web");
    }

    # parse inputs
    my $_resource_path = '/search-web';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchWeb200Response', $response);
    return $_response_object;
}

1;
