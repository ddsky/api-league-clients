=begin comment

API League

API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.5.0
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::StorageApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# read_key_value_from_store
#
# Read Key Value from Store
#
# @param string $key The key for which the value is stored (max length 255 characters). (required)
{
    my $params = {
    'key' => {
        data_type => 'string',
        description => 'The key for which the value is stored (max length 255 characters).',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'read_key_value_from_store' } = {
        summary => 'Read Key Value from Store',
        params => $params,
        returns => 'ReadKeyValueFromStore200Response',
        };
}
# @return ReadKeyValueFromStore200Response
#
sub read_key_value_from_store {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling read_key_value_from_store");
    }

    # parse inputs
    my $_resource_path = '/read-key-value';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ReadKeyValueFromStore200Response', $response);
    return $_response_object;
}

#
# store_key_value_get
#
# Store Key Value (GET)
#
# @param string $key The key for which the value is stored (max length 255 characters). (required)
# @param string $value The value that is supposed to be stored (max length 10,000 characters). (required)
{
    my $params = {
    'key' => {
        data_type => 'string',
        description => 'The key for which the value is stored (max length 255 characters).',
        required => '1',
    },
    'value' => {
        data_type => 'string',
        description => 'The value that is supposed to be stored (max length 10,000 characters).',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'store_key_value_get' } = {
        summary => 'Store Key Value (GET)',
        params => $params,
        returns => 'StoreKeyValueGET200Response',
        };
}
# @return StoreKeyValueGET200Response
#
sub store_key_value_get {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling store_key_value_get");
    }

    # verify the required parameter 'value' is set
    unless (exists $args{'value'}) {
      croak("Missing the required parameter 'value' when calling store_key_value_get");
    }

    # parse inputs
    my $_resource_path = '/store-key-value';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'key'}) {
        $query_params->{'key'} = $self->{api_client}->to_query_value($args{'key'});
    }

    # query params
    if ( exists $args{'value'}) {
        $query_params->{'value'} = $self->{api_client}->to_query_value($args{'value'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('StoreKeyValueGET200Response', $response);
    return $_response_object;
}

1;
