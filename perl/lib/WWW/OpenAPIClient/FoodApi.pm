=begin comment

API League

API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.2.0
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::FoodApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# compute_nutrition
#
# Compute Nutrition
#
# @param string $ingredients A comma-separated list of the ingredients of the recipe. (required)
# @param int $servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
# @param boolean $reduce_oils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
{
    my $params = {
    'ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of the ingredients of the recipe.',
        required => '1',
    },
    'servings' => {
        data_type => 'int',
        description => 'The number of servings the ingredients make. Nutrition is computed per serving.',
        required => '0',
    },
    'reduce_oils' => {
        data_type => 'boolean',
        description => 'If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'compute_nutrition' } = {
        summary => 'Compute Nutrition',
        params => $params,
        returns => 'ComputeNutrition200Response',
        };
}
# @return ComputeNutrition200Response
#
sub compute_nutrition {
    my ($self, %args) = @_;

    # verify the required parameter 'ingredients' is set
    unless (exists $args{'ingredients'}) {
      croak("Missing the required parameter 'ingredients' when calling compute_nutrition");
    }

    # parse inputs
    my $_resource_path = '/compute-nutrition';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ingredients'}) {
        $query_params->{'ingredients'} = $self->{api_client}->to_query_value($args{'ingredients'});
    }

    # query params
    if ( exists $args{'servings'}) {
        $query_params->{'servings'} = $self->{api_client}->to_query_value($args{'servings'});
    }

    # query params
    if ( exists $args{'reduce_oils'}) {
        $query_params->{'reduce-oils'} = $self->{api_client}->to_query_value($args{'reduce_oils'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComputeNutrition200Response', $response);
    return $_response_object;
}

#
# retrieve_recipe_information
#
# Retrieve Recipe Information
#
# @param int $id The id of the recipe to retrieve. (required)
# @param boolean $add_wine_pairing Whether to pair a wine to the recipe. (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the recipe to retrieve.',
        required => '1',
    },
    'add_wine_pairing' => {
        data_type => 'boolean',
        description => 'Whether to pair a wine to the recipe.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'retrieve_recipe_information' } = {
        summary => 'Retrieve Recipe Information',
        params => $params,
        returns => 'RetrieveRecipeInformation200Response',
        };
}
# @return RetrieveRecipeInformation200Response
#
sub retrieve_recipe_information {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling retrieve_recipe_information");
    }

    # parse inputs
    my $_resource_path = '/retrieve-recipe';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'add_wine_pairing'}) {
        $query_params->{'add-wine-pairing'} = $self->{api_client}->to_query_value($args{'add_wine_pairing'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RetrieveRecipeInformation200Response', $response);
    return $_response_object;
}

#
# search_recipes
#
# Search Recipes
#
# @param string $query The search query. (optional)
# @param string $cuisines The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). (optional)
# @param string $exclude_cuisines The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). (optional)
# @param string $meal_type The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
# @param string $diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
# @param string $intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
# @param string $equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
# @param string $include_ingredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
# @param string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
# @param boolean $fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
# @param boolean $add_recipe_information If set to true, you get more information about the recipes returned. (optional)
# @param int $max_time The maximum time in minutes it should take to prepare and cook the recipe. (optional)
# @param int $min_servings The minimum amount of servings the recipe is for. (optional)
# @param int $max_servings The maximum amount of servings the recipe is for. (optional)
# @param double $min_calories The minimum amount of calories the recipe must have per serving. (optional)
# @param double $max_calories The maximum amount of calories the recipe can have per serving. (optional)
# @param double $min_carbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
# @param double $max_carbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
# @param double $min_protein The minimum amount of protein in grams the recipe must have per serving. (optional)
# @param double $max_protein The maximum amount of protein in grams the recipe can have per serving. (optional)
# @param double $min_fat The minimum amount of fat in grams the recipe must have per serving. (optional)
# @param double $max_fat The maximum amount of fat in grams the recipe can have per serving. (optional)
# @param double $min_sugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
# @param double $max_sugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
# @param double $min_fiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
# @param double $max_fiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
# @param double $min_folate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
# @param double $max_folate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
# @param double $min_folic_acid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
# @param double $max_folic_acid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
# @param double $min_iodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
# @param double $max_iodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
# @param double $min_iron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
# @param double $max_iron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
# @param double $min_zinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
# @param double $max_zinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
# @param double $min_magnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
# @param double $max_magnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
# @param double $min_manganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
# @param double $max_manganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
# @param double $min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
# @param double $max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
# @param double $min_potassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
# @param double $max_potassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
# @param double $min_sodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
# @param double $max_sodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
# @param double $min_selenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
# @param double $max_selenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
# @param double $min_copper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
# @param double $max_copper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
# @param double $min_calcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
# @param double $max_calcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
# @param double $min_choline The minimum amount of choline in milligrams the recipe must have per serving. (optional)
# @param double $max_choline The maximum amount of choline in milligrams the recipe can have per serving. (optional)
# @param double $min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
# @param double $max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
# @param double $min_fluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
# @param double $max_fluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
# @param double $min_alcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
# @param double $max_alcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
# @param double $min_caffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
# @param double $max_caffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
# @param double $min_saturated_fat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
# @param double $max_saturated_fat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
# @param double $min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
# @param double $max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
# @param double $min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
# @param double $max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
# @param double $min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
# @param double $max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
# @param double $min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
# @param double $max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
# @param double $min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
# @param double $max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
# @param double $min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
# @param double $max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
# @param double $min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
# @param double $max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
# @param double $min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
# @param double $max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
# @param double $min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
# @param double $max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
# @param double $min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
# @param double $max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
# @param double $min_vitamin_b12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
# @param double $max_vitamin_b12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
# @param string $sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
# @param string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
# @param int $offset The number of recipes to skip, between 0 and 900. (optional)
# @param int $number The number of recipes, between 1 and 100. (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '0',
    },
    'cuisines' => {
        data_type => 'string',
        description => 'The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;).',
        required => '0',
    },
    'exclude_cuisines' => {
        data_type => 'string',
        description => 'The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;).',
        required => '0',
    },
    'meal_type' => {
        data_type => 'string',
        description => 'The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.',
        required => '0',
    },
    'diet' => {
        data_type => 'string',
        description => 'The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.',
        required => '0',
    },
    'intolerances' => {
        data_type => 'string',
        description => 'A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.',
        required => '0',
    },
    'equipment' => {
        data_type => 'string',
        description => 'The equipment required. Multiple values will be interpreted as &#39;OR&#39;.',
        required => '0',
    },
    'include_ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients that should/must be used in the recipes.',
        required => '0',
    },
    'exclude_ingredients' => {
        data_type => 'string',
        description => 'A comma-separated list of ingredients or ingredient types that the recipes must not contain.',
        required => '0',
    },
    'fill_ingredients' => {
        data_type => 'boolean',
        description => 'Add information about the ingredients and whether they are used or missing in relation to the query.',
        required => '0',
    },
    'add_recipe_information' => {
        data_type => 'boolean',
        description => 'If set to true, you get more information about the recipes returned.',
        required => '0',
    },
    'max_time' => {
        data_type => 'int',
        description => 'The maximum time in minutes it should take to prepare and cook the recipe.',
        required => '0',
    },
    'min_servings' => {
        data_type => 'int',
        description => 'The minimum amount of servings the recipe is for.',
        required => '0',
    },
    'max_servings' => {
        data_type => 'int',
        description => 'The maximum amount of servings the recipe is for.',
        required => '0',
    },
    'min_calories' => {
        data_type => 'double',
        description => 'The minimum amount of calories the recipe must have per serving.',
        required => '0',
    },
    'max_calories' => {
        data_type => 'double',
        description => 'The maximum amount of calories the recipe can have per serving.',
        required => '0',
    },
    'min_carbs' => {
        data_type => 'double',
        description => 'The minimum amount of carbohydrates in grams the recipe must have per serving.',
        required => '0',
    },
    'max_carbs' => {
        data_type => 'double',
        description => 'The maximum amount of carbohydrates in grams the recipe can have per serving.',
        required => '0',
    },
    'min_protein' => {
        data_type => 'double',
        description => 'The minimum amount of protein in grams the recipe must have per serving.',
        required => '0',
    },
    'max_protein' => {
        data_type => 'double',
        description => 'The maximum amount of protein in grams the recipe can have per serving.',
        required => '0',
    },
    'min_fat' => {
        data_type => 'double',
        description => 'The minimum amount of fat in grams the recipe must have per serving.',
        required => '0',
    },
    'max_fat' => {
        data_type => 'double',
        description => 'The maximum amount of fat in grams the recipe can have per serving.',
        required => '0',
    },
    'min_sugar' => {
        data_type => 'double',
        description => 'The minimum amount of sugar in grams the recipe must have per serving.',
        required => '0',
    },
    'max_sugar' => {
        data_type => 'double',
        description => 'The maximum amount of sugar in grams the recipe can have per serving.',
        required => '0',
    },
    'min_fiber' => {
        data_type => 'double',
        description => 'The minimum amount of fiber in grams the recipe must have per serving.',
        required => '0',
    },
    'max_fiber' => {
        data_type => 'double',
        description => 'The maximum amount of fiber in grams the recipe can have per serving.',
        required => '0',
    },
    'min_folate' => {
        data_type => 'double',
        description => 'The minimum amount of folate in micrograms the recipe must have per serving.',
        required => '0',
    },
    'max_folate' => {
        data_type => 'double',
        description => 'The maximum amount of folate in micrograms the recipe can have per serving.',
        required => '0',
    },
    'min_folic_acid' => {
        data_type => 'double',
        description => 'The minimum amount of folic acid in micrograms the recipe must have per serving.',
        required => '0',
    },
    'max_folic_acid' => {
        data_type => 'double',
        description => 'The maximum amount of folic acid in micrograms the recipe can have per serving.',
        required => '0',
    },
    'min_iodine' => {
        data_type => 'double',
        description => 'The minimum amount of iodine in micrograms the recipe must have per serving.',
        required => '0',
    },
    'max_iodine' => {
        data_type => 'double',
        description => 'The maximum amount of iodine in micrograms the recipe can have per serving.',
        required => '0',
    },
    'min_iron' => {
        data_type => 'double',
        description => 'The minimum amount of iron in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_iron' => {
        data_type => 'double',
        description => 'The maximum amount of iron in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_zinc' => {
        data_type => 'double',
        description => 'The minimum amount of zinc in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_zinc' => {
        data_type => 'double',
        description => 'The maximum amount of zinc in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_magnesium' => {
        data_type => 'double',
        description => 'The minimum amount of magnesium in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_magnesium' => {
        data_type => 'double',
        description => 'The maximum amount of magnesium in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_manganese' => {
        data_type => 'double',
        description => 'The minimum amount of manganese in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_manganese' => {
        data_type => 'double',
        description => 'The maximum amount of manganese in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_phosphorus' => {
        data_type => 'double',
        description => 'The minimum amount of phosphorus in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_phosphorus' => {
        data_type => 'double',
        description => 'The maximum amount of phosphorus in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_potassium' => {
        data_type => 'double',
        description => 'The minimum amount of potassium in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_potassium' => {
        data_type => 'double',
        description => 'The maximum amount of potassium in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_sodium' => {
        data_type => 'double',
        description => 'The minimum amount of sodium in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_sodium' => {
        data_type => 'double',
        description => 'The maximum amount of sodium in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_selenium' => {
        data_type => 'double',
        description => 'The minimum amount of selenium in micrograms the recipe must have per serving.',
        required => '0',
    },
    'max_selenium' => {
        data_type => 'double',
        description => 'The maximum amount of selenium in micrograms the recipe can have per serving.',
        required => '0',
    },
    'min_copper' => {
        data_type => 'double',
        description => 'The minimum amount of copper in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_copper' => {
        data_type => 'double',
        description => 'The maximum amount of copper in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_calcium' => {
        data_type => 'double',
        description => 'The minimum amount of calcium in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_calcium' => {
        data_type => 'double',
        description => 'The maximum amount of calcium in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_choline' => {
        data_type => 'double',
        description => 'The minimum amount of choline in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_choline' => {
        data_type => 'double',
        description => 'The maximum amount of choline in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_cholesterol' => {
        data_type => 'double',
        description => 'The minimum amount of cholesterol in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_cholesterol' => {
        data_type => 'double',
        description => 'The maximum amount of cholesterol in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_fluoride' => {
        data_type => 'double',
        description => 'The minimum amount of fluoride in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_fluoride' => {
        data_type => 'double',
        description => 'The maximum amount of fluoride in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_alcohol' => {
        data_type => 'double',
        description => 'The minimum amount of alcohol in grams the recipe must have per serving.',
        required => '0',
    },
    'max_alcohol' => {
        data_type => 'double',
        description => 'The maximum amount of alcohol in grams the recipe can have per serving.',
        required => '0',
    },
    'min_caffeine' => {
        data_type => 'double',
        description => 'The minimum amount of caffeine in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_caffeine' => {
        data_type => 'double',
        description => 'The maximum amount of caffeine in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_saturated_fat' => {
        data_type => 'double',
        description => 'The minimum amount of saturated fat in grams the recipe must have per serving.',
        required => '0',
    },
    'max_saturated_fat' => {
        data_type => 'double',
        description => 'The maximum amount of saturated fat in grams the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_a' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin A in IU the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_a' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin A in IU the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_c' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin C in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_c' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin C in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_d' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin D in micrograms the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_d' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin D in micrograms the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_e' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin E in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_e' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin E in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_k' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin K in micrograms the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_k' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin K in micrograms the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_b1' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_b1' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_b2' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_b2' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_b3' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_b3' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_b5' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_b5' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_b6' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_b6' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.',
        required => '0',
    },
    'min_vitamin_b12' => {
        data_type => 'double',
        description => 'The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.',
        required => '0',
    },
    'max_vitamin_b12' => {
        data_type => 'double',
        description => 'The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'The strategy to sort recipes by. See a full list of supported sorting options.',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'Whether to sort ascending or descending (ASC or DESC).',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of recipes to skip, between 0 and 900.',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of recipes, between 1 and 100.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_recipes' } = {
        summary => 'Search Recipes',
        params => $params,
        returns => 'SearchRecipes200Response',
        };
}
# @return SearchRecipes200Response
#
sub search_recipes {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/search-recipes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'cuisines'}) {
        $query_params->{'cuisines'} = $self->{api_client}->to_query_value($args{'cuisines'});
    }

    # query params
    if ( exists $args{'exclude_cuisines'}) {
        $query_params->{'exclude-cuisines'} = $self->{api_client}->to_query_value($args{'exclude_cuisines'});
    }

    # query params
    if ( exists $args{'meal_type'}) {
        $query_params->{'meal-type'} = $self->{api_client}->to_query_value($args{'meal_type'});
    }

    # query params
    if ( exists $args{'diet'}) {
        $query_params->{'diet'} = $self->{api_client}->to_query_value($args{'diet'});
    }

    # query params
    if ( exists $args{'intolerances'}) {
        $query_params->{'intolerances'} = $self->{api_client}->to_query_value($args{'intolerances'});
    }

    # query params
    if ( exists $args{'equipment'}) {
        $query_params->{'equipment'} = $self->{api_client}->to_query_value($args{'equipment'});
    }

    # query params
    if ( exists $args{'include_ingredients'}) {
        $query_params->{'include-ingredients'} = $self->{api_client}->to_query_value($args{'include_ingredients'});
    }

    # query params
    if ( exists $args{'exclude_ingredients'}) {
        $query_params->{'exclude-ingredients'} = $self->{api_client}->to_query_value($args{'exclude_ingredients'});
    }

    # query params
    if ( exists $args{'fill_ingredients'}) {
        $query_params->{'fill-ingredients'} = $self->{api_client}->to_query_value($args{'fill_ingredients'});
    }

    # query params
    if ( exists $args{'add_recipe_information'}) {
        $query_params->{'add-recipe-information'} = $self->{api_client}->to_query_value($args{'add_recipe_information'});
    }

    # query params
    if ( exists $args{'max_time'}) {
        $query_params->{'max-time'} = $self->{api_client}->to_query_value($args{'max_time'});
    }

    # query params
    if ( exists $args{'min_servings'}) {
        $query_params->{'min-servings'} = $self->{api_client}->to_query_value($args{'min_servings'});
    }

    # query params
    if ( exists $args{'max_servings'}) {
        $query_params->{'max-servings'} = $self->{api_client}->to_query_value($args{'max_servings'});
    }

    # query params
    if ( exists $args{'min_calories'}) {
        $query_params->{'min-calories'} = $self->{api_client}->to_query_value($args{'min_calories'});
    }

    # query params
    if ( exists $args{'max_calories'}) {
        $query_params->{'max-calories'} = $self->{api_client}->to_query_value($args{'max_calories'});
    }

    # query params
    if ( exists $args{'min_carbs'}) {
        $query_params->{'min-carbs'} = $self->{api_client}->to_query_value($args{'min_carbs'});
    }

    # query params
    if ( exists $args{'max_carbs'}) {
        $query_params->{'max-carbs'} = $self->{api_client}->to_query_value($args{'max_carbs'});
    }

    # query params
    if ( exists $args{'min_protein'}) {
        $query_params->{'min-protein'} = $self->{api_client}->to_query_value($args{'min_protein'});
    }

    # query params
    if ( exists $args{'max_protein'}) {
        $query_params->{'max-protein'} = $self->{api_client}->to_query_value($args{'max_protein'});
    }

    # query params
    if ( exists $args{'min_fat'}) {
        $query_params->{'min-fat'} = $self->{api_client}->to_query_value($args{'min_fat'});
    }

    # query params
    if ( exists $args{'max_fat'}) {
        $query_params->{'max-fat'} = $self->{api_client}->to_query_value($args{'max_fat'});
    }

    # query params
    if ( exists $args{'min_sugar'}) {
        $query_params->{'min-sugar'} = $self->{api_client}->to_query_value($args{'min_sugar'});
    }

    # query params
    if ( exists $args{'max_sugar'}) {
        $query_params->{'max-sugar'} = $self->{api_client}->to_query_value($args{'max_sugar'});
    }

    # query params
    if ( exists $args{'min_fiber'}) {
        $query_params->{'min-fiber'} = $self->{api_client}->to_query_value($args{'min_fiber'});
    }

    # query params
    if ( exists $args{'max_fiber'}) {
        $query_params->{'max-fiber'} = $self->{api_client}->to_query_value($args{'max_fiber'});
    }

    # query params
    if ( exists $args{'min_folate'}) {
        $query_params->{'min-folate'} = $self->{api_client}->to_query_value($args{'min_folate'});
    }

    # query params
    if ( exists $args{'max_folate'}) {
        $query_params->{'max-folate'} = $self->{api_client}->to_query_value($args{'max_folate'});
    }

    # query params
    if ( exists $args{'min_folic_acid'}) {
        $query_params->{'min-folic-acid'} = $self->{api_client}->to_query_value($args{'min_folic_acid'});
    }

    # query params
    if ( exists $args{'max_folic_acid'}) {
        $query_params->{'max-folic-acid'} = $self->{api_client}->to_query_value($args{'max_folic_acid'});
    }

    # query params
    if ( exists $args{'min_iodine'}) {
        $query_params->{'min-iodine'} = $self->{api_client}->to_query_value($args{'min_iodine'});
    }

    # query params
    if ( exists $args{'max_iodine'}) {
        $query_params->{'max-iodine'} = $self->{api_client}->to_query_value($args{'max_iodine'});
    }

    # query params
    if ( exists $args{'min_iron'}) {
        $query_params->{'min-iron'} = $self->{api_client}->to_query_value($args{'min_iron'});
    }

    # query params
    if ( exists $args{'max_iron'}) {
        $query_params->{'max-iron'} = $self->{api_client}->to_query_value($args{'max_iron'});
    }

    # query params
    if ( exists $args{'min_zinc'}) {
        $query_params->{'min-zinc'} = $self->{api_client}->to_query_value($args{'min_zinc'});
    }

    # query params
    if ( exists $args{'max_zinc'}) {
        $query_params->{'max-zinc'} = $self->{api_client}->to_query_value($args{'max_zinc'});
    }

    # query params
    if ( exists $args{'min_magnesium'}) {
        $query_params->{'min-magnesium'} = $self->{api_client}->to_query_value($args{'min_magnesium'});
    }

    # query params
    if ( exists $args{'max_magnesium'}) {
        $query_params->{'max-magnesium'} = $self->{api_client}->to_query_value($args{'max_magnesium'});
    }

    # query params
    if ( exists $args{'min_manganese'}) {
        $query_params->{'min-manganese'} = $self->{api_client}->to_query_value($args{'min_manganese'});
    }

    # query params
    if ( exists $args{'max_manganese'}) {
        $query_params->{'max-manganese'} = $self->{api_client}->to_query_value($args{'max_manganese'});
    }

    # query params
    if ( exists $args{'min_phosphorus'}) {
        $query_params->{'min-phosphorus'} = $self->{api_client}->to_query_value($args{'min_phosphorus'});
    }

    # query params
    if ( exists $args{'max_phosphorus'}) {
        $query_params->{'max-phosphorus'} = $self->{api_client}->to_query_value($args{'max_phosphorus'});
    }

    # query params
    if ( exists $args{'min_potassium'}) {
        $query_params->{'min-potassium'} = $self->{api_client}->to_query_value($args{'min_potassium'});
    }

    # query params
    if ( exists $args{'max_potassium'}) {
        $query_params->{'max-potassium'} = $self->{api_client}->to_query_value($args{'max_potassium'});
    }

    # query params
    if ( exists $args{'min_sodium'}) {
        $query_params->{'min-sodium'} = $self->{api_client}->to_query_value($args{'min_sodium'});
    }

    # query params
    if ( exists $args{'max_sodium'}) {
        $query_params->{'max-sodium'} = $self->{api_client}->to_query_value($args{'max_sodium'});
    }

    # query params
    if ( exists $args{'min_selenium'}) {
        $query_params->{'min-selenium'} = $self->{api_client}->to_query_value($args{'min_selenium'});
    }

    # query params
    if ( exists $args{'max_selenium'}) {
        $query_params->{'max-selenium'} = $self->{api_client}->to_query_value($args{'max_selenium'});
    }

    # query params
    if ( exists $args{'min_copper'}) {
        $query_params->{'min-copper'} = $self->{api_client}->to_query_value($args{'min_copper'});
    }

    # query params
    if ( exists $args{'max_copper'}) {
        $query_params->{'max-copper'} = $self->{api_client}->to_query_value($args{'max_copper'});
    }

    # query params
    if ( exists $args{'min_calcium'}) {
        $query_params->{'min-calcium'} = $self->{api_client}->to_query_value($args{'min_calcium'});
    }

    # query params
    if ( exists $args{'max_calcium'}) {
        $query_params->{'max-calcium'} = $self->{api_client}->to_query_value($args{'max_calcium'});
    }

    # query params
    if ( exists $args{'min_choline'}) {
        $query_params->{'min-choline'} = $self->{api_client}->to_query_value($args{'min_choline'});
    }

    # query params
    if ( exists $args{'max_choline'}) {
        $query_params->{'max-choline'} = $self->{api_client}->to_query_value($args{'max_choline'});
    }

    # query params
    if ( exists $args{'min_cholesterol'}) {
        $query_params->{'min-cholesterol'} = $self->{api_client}->to_query_value($args{'min_cholesterol'});
    }

    # query params
    if ( exists $args{'max_cholesterol'}) {
        $query_params->{'max-cholesterol'} = $self->{api_client}->to_query_value($args{'max_cholesterol'});
    }

    # query params
    if ( exists $args{'min_fluoride'}) {
        $query_params->{'min-fluoride'} = $self->{api_client}->to_query_value($args{'min_fluoride'});
    }

    # query params
    if ( exists $args{'max_fluoride'}) {
        $query_params->{'max-fluoride'} = $self->{api_client}->to_query_value($args{'max_fluoride'});
    }

    # query params
    if ( exists $args{'min_alcohol'}) {
        $query_params->{'min-alcohol'} = $self->{api_client}->to_query_value($args{'min_alcohol'});
    }

    # query params
    if ( exists $args{'max_alcohol'}) {
        $query_params->{'max-alcohol'} = $self->{api_client}->to_query_value($args{'max_alcohol'});
    }

    # query params
    if ( exists $args{'min_caffeine'}) {
        $query_params->{'min-caffeine'} = $self->{api_client}->to_query_value($args{'min_caffeine'});
    }

    # query params
    if ( exists $args{'max_caffeine'}) {
        $query_params->{'max-caffeine'} = $self->{api_client}->to_query_value($args{'max_caffeine'});
    }

    # query params
    if ( exists $args{'min_saturated_fat'}) {
        $query_params->{'min-saturated-fat'} = $self->{api_client}->to_query_value($args{'min_saturated_fat'});
    }

    # query params
    if ( exists $args{'max_saturated_fat'}) {
        $query_params->{'max-saturated-fat'} = $self->{api_client}->to_query_value($args{'max_saturated_fat'});
    }

    # query params
    if ( exists $args{'min_vitamin_a'}) {
        $query_params->{'min-vitamin-a'} = $self->{api_client}->to_query_value($args{'min_vitamin_a'});
    }

    # query params
    if ( exists $args{'max_vitamin_a'}) {
        $query_params->{'max-vitamin-a'} = $self->{api_client}->to_query_value($args{'max_vitamin_a'});
    }

    # query params
    if ( exists $args{'min_vitamin_c'}) {
        $query_params->{'min-vitamin-c'} = $self->{api_client}->to_query_value($args{'min_vitamin_c'});
    }

    # query params
    if ( exists $args{'max_vitamin_c'}) {
        $query_params->{'max-vitamin-c'} = $self->{api_client}->to_query_value($args{'max_vitamin_c'});
    }

    # query params
    if ( exists $args{'min_vitamin_d'}) {
        $query_params->{'min-vitamin-d'} = $self->{api_client}->to_query_value($args{'min_vitamin_d'});
    }

    # query params
    if ( exists $args{'max_vitamin_d'}) {
        $query_params->{'max-vitamin-d'} = $self->{api_client}->to_query_value($args{'max_vitamin_d'});
    }

    # query params
    if ( exists $args{'min_vitamin_e'}) {
        $query_params->{'min-vitamin-e'} = $self->{api_client}->to_query_value($args{'min_vitamin_e'});
    }

    # query params
    if ( exists $args{'max_vitamin_e'}) {
        $query_params->{'max-vitamin-e'} = $self->{api_client}->to_query_value($args{'max_vitamin_e'});
    }

    # query params
    if ( exists $args{'min_vitamin_k'}) {
        $query_params->{'min-vitamin-k'} = $self->{api_client}->to_query_value($args{'min_vitamin_k'});
    }

    # query params
    if ( exists $args{'max_vitamin_k'}) {
        $query_params->{'max-vitamin-k'} = $self->{api_client}->to_query_value($args{'max_vitamin_k'});
    }

    # query params
    if ( exists $args{'min_vitamin_b1'}) {
        $query_params->{'min-vitamin-b1'} = $self->{api_client}->to_query_value($args{'min_vitamin_b1'});
    }

    # query params
    if ( exists $args{'max_vitamin_b1'}) {
        $query_params->{'max-vitamin-b1'} = $self->{api_client}->to_query_value($args{'max_vitamin_b1'});
    }

    # query params
    if ( exists $args{'min_vitamin_b2'}) {
        $query_params->{'min-vitamin-b2'} = $self->{api_client}->to_query_value($args{'min_vitamin_b2'});
    }

    # query params
    if ( exists $args{'max_vitamin_b2'}) {
        $query_params->{'max-vitamin-b2'} = $self->{api_client}->to_query_value($args{'max_vitamin_b2'});
    }

    # query params
    if ( exists $args{'min_vitamin_b3'}) {
        $query_params->{'min-vitamin-b3'} = $self->{api_client}->to_query_value($args{'min_vitamin_b3'});
    }

    # query params
    if ( exists $args{'max_vitamin_b3'}) {
        $query_params->{'max-vitamin-b3'} = $self->{api_client}->to_query_value($args{'max_vitamin_b3'});
    }

    # query params
    if ( exists $args{'min_vitamin_b5'}) {
        $query_params->{'min-vitamin-b5'} = $self->{api_client}->to_query_value($args{'min_vitamin_b5'});
    }

    # query params
    if ( exists $args{'max_vitamin_b5'}) {
        $query_params->{'max-vitamin-b5'} = $self->{api_client}->to_query_value($args{'max_vitamin_b5'});
    }

    # query params
    if ( exists $args{'min_vitamin_b6'}) {
        $query_params->{'min-vitamin-b6'} = $self->{api_client}->to_query_value($args{'min_vitamin_b6'});
    }

    # query params
    if ( exists $args{'max_vitamin_b6'}) {
        $query_params->{'max-vitamin-b6'} = $self->{api_client}->to_query_value($args{'max_vitamin_b6'});
    }

    # query params
    if ( exists $args{'min_vitamin_b12'}) {
        $query_params->{'min-vitamin-b12'} = $self->{api_client}->to_query_value($args{'min_vitamin_b12'});
    }

    # query params
    if ( exists $args{'max_vitamin_b12'}) {
        $query_params->{'max-vitamin-b12'} = $self->{api_client}->to_query_value($args{'max_vitamin_b12'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sort-direction'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchRecipes200Response', $response);
    return $_response_object;
}

#
# search_restaurants
#
# Search Restaurants
#
# @param double $lat The latitude to search around. (required)
# @param double $lon The longitude to search around. (required)
# @param string $query The search query. (optional)
# @param int $distance The maximum distance of the restaurant in miles around the given location. (optional)
# @param double $budget The budget in USD for the meal. (optional)
# @param double $min_rating The minimum rating of the restaurants in range [0,5]. (optional)
# @param string $cuisine The cuisine that the restaurants should support. (optional)
# @param boolean $is_open Whether the restaurants have to be open now. (optional)
# @param int $page The page of the results. (optional)
# @param string $sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
{
    my $params = {
    'lat' => {
        data_type => 'double',
        description => 'The latitude to search around.',
        required => '1',
    },
    'lon' => {
        data_type => 'double',
        description => 'The longitude to search around.',
        required => '1',
    },
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '0',
    },
    'distance' => {
        data_type => 'int',
        description => 'The maximum distance of the restaurant in miles around the given location.',
        required => '0',
    },
    'budget' => {
        data_type => 'double',
        description => 'The budget in USD for the meal.',
        required => '0',
    },
    'min_rating' => {
        data_type => 'double',
        description => 'The minimum rating of the restaurants in range [0,5].',
        required => '0',
    },
    'cuisine' => {
        data_type => 'string',
        description => 'The cuisine that the restaurants should support.',
        required => '0',
    },
    'is_open' => {
        data_type => 'boolean',
        description => 'Whether the restaurants have to be open now.',
        required => '0',
    },
    'page' => {
        data_type => 'int',
        description => 'The page of the results.',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'The sort parameter, one of: cheapest, fastest, rating, distance or relevance.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_restaurants' } = {
        summary => 'Search Restaurants',
        params => $params,
        returns => 'SearchRestaurants200Response',
        };
}
# @return SearchRestaurants200Response
#
sub search_restaurants {
    my ($self, %args) = @_;

    # verify the required parameter 'lat' is set
    unless (exists $args{'lat'}) {
      croak("Missing the required parameter 'lat' when calling search_restaurants");
    }

    # verify the required parameter 'lon' is set
    unless (exists $args{'lon'}) {
      croak("Missing the required parameter 'lon' when calling search_restaurants");
    }

    # parse inputs
    my $_resource_path = '/search-restaurants';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'lat'}) {
        $query_params->{'lat'} = $self->{api_client}->to_query_value($args{'lat'});
    }

    # query params
    if ( exists $args{'lon'}) {
        $query_params->{'lon'} = $self->{api_client}->to_query_value($args{'lon'});
    }

    # query params
    if ( exists $args{'distance'}) {
        $query_params->{'distance'} = $self->{api_client}->to_query_value($args{'distance'});
    }

    # query params
    if ( exists $args{'budget'}) {
        $query_params->{'budget'} = $self->{api_client}->to_query_value($args{'budget'});
    }

    # query params
    if ( exists $args{'min_rating'}) {
        $query_params->{'min-rating'} = $self->{api_client}->to_query_value($args{'min_rating'});
    }

    # query params
    if ( exists $args{'cuisine'}) {
        $query_params->{'cuisine'} = $self->{api_client}->to_query_value($args{'cuisine'});
    }

    # query params
    if ( exists $args{'is_open'}) {
        $query_params->{'is-open'} = $self->{api_client}->to_query_value($args{'is_open'});
    }

    # query params
    if ( exists $args{'page'}) {
        $query_params->{'page'} = $self->{api_client}->to_query_value($args{'page'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchRestaurants200Response', $response);
    return $_response_object;
}

1;
