=begin comment

API League

API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.6.3
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::ArtApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# image_to_ascii_art_by_url
#
# Image to Ascii Art by URL
#
# @param string $url The URL to the image. (required)
# @param int $width The maximum width of the image (default 400, max. 500). (optional)
# @param int $height The maximum height of the image (default 400, max. 500). (optional)
{
    my $params = {
    'url' => {
        data_type => 'string',
        description => 'The URL to the image.',
        required => '1',
    },
    'width' => {
        data_type => 'int',
        description => 'The maximum width of the image (default 400, max. 500).',
        required => '0',
    },
    'height' => {
        data_type => 'int',
        description => 'The maximum height of the image (default 400, max. 500).',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'image_to_ascii_art_by_url' } = {
        summary => 'Image to Ascii Art by URL',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub image_to_ascii_art_by_url {
    my ($self, %args) = @_;

    # verify the required parameter 'url' is set
    unless (exists $args{'url'}) {
      croak("Missing the required parameter 'url' when calling image_to_ascii_art_by_url");
    }

    # parse inputs
    my $_resource_path = '/convert-image-to-ascii-txt';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/plain');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'url'}) {
        $query_params->{'url'} = $self->{api_client}->to_query_value($args{'url'});
    }

    # query params
    if ( exists $args{'width'}) {
        $query_params->{'width'} = $self->{api_client}->to_query_value($args{'width'});
    }

    # query params
    if ( exists $args{'height'}) {
        $query_params->{'height'} = $self->{api_client}->to_query_value($args{'height'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# random_poem
#
# Random Poem
#
# @param int $min_lines The minimum number of lines of the poem. (optional)
# @param int $max_lines The maximum number of lines of the poem. (optional)
{
    my $params = {
    'min_lines' => {
        data_type => 'int',
        description => 'The minimum number of lines of the poem.',
        required => '0',
    },
    'max_lines' => {
        data_type => 'int',
        description => 'The maximum number of lines of the poem.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'random_poem' } = {
        summary => 'Random Poem',
        params => $params,
        returns => 'RandomPoem200Response',
        };
}
# @return RandomPoem200Response
#
sub random_poem {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/retrieve-random-poem';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'min_lines'}) {
        $query_params->{'min-lines'} = $self->{api_client}->to_query_value($args{'min_lines'});
    }

    # query params
    if ( exists $args{'max_lines'}) {
        $query_params->{'max-lines'} = $self->{api_client}->to_query_value($args{'max_lines'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RandomPoem200Response', $response);
    return $_response_object;
}

1;
