=begin comment

API League

API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.5.0
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::BooksApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# find_similar_books
#
# Find Similar Books
#
# @param int $id The id of the book to which similar books should be found. (required)
# @param int $number The number of similar books to return in range [1,100] (optional)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'The id of the book to which similar books should be found.',
        required => '1',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of similar books to return in range [1,100]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'find_similar_books' } = {
        summary => 'Find Similar Books',
        params => $params,
        returns => 'FindSimilarBooks200Response',
        };
}
# @return FindSimilarBooks200Response
#
sub find_similar_books {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling find_similar_books");
    }

    # parse inputs
    my $_resource_path = '/list-similar-books';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'id'}) {
        $query_params->{'id'} = $self->{api_client}->to_query_value($args{'id'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FindSimilarBooks200Response', $response);
    return $_response_object;
}

#
# search_books
#
# Search Books
#
# @param string $query The search query. (optional)
# @param int $earliest_publish_year The books must have been published after this year. (optional)
# @param int $latest_publish_year The books must have been published before this year. (optional)
# @param double $min_rating The minimum rating the book must have gotten in the interval [0,1]. (optional)
# @param double $max_rating The maximum rating the book must have gotten in the interval [0,1]. (optional)
# @param string $genres A comma-separated list of genres. Only books from any of the given genres will be returned. (optional)
# @param string $authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
# @param string $isbn Only the book matching the ISBN-13 will be returned (optional)
# @param string $oclc Only the book matching the OCLC will be returned (optional)
# @param string $sort The sorting criteria (publish-date or rating). (optional)
# @param string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
# @param boolean $group_results Whether to group similar editions of the same book. (optional)
# @param int $offset The number of books to skip in range [0,1000] (optional)
# @param int $number The number of books to return in range [1,100] (optional)
{
    my $params = {
    'query' => {
        data_type => 'string',
        description => 'The search query.',
        required => '0',
    },
    'earliest_publish_year' => {
        data_type => 'int',
        description => 'The books must have been published after this year.',
        required => '0',
    },
    'latest_publish_year' => {
        data_type => 'int',
        description => 'The books must have been published before this year.',
        required => '0',
    },
    'min_rating' => {
        data_type => 'double',
        description => 'The minimum rating the book must have gotten in the interval [0,1].',
        required => '0',
    },
    'max_rating' => {
        data_type => 'double',
        description => 'The maximum rating the book must have gotten in the interval [0,1].',
        required => '0',
    },
    'genres' => {
        data_type => 'string',
        description => 'A comma-separated list of genres. Only books from any of the given genres will be returned.',
        required => '0',
    },
    'authors' => {
        data_type => 'string',
        description => 'A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate.',
        required => '0',
    },
    'isbn' => {
        data_type => 'string',
        description => 'Only the book matching the ISBN-13 will be returned',
        required => '0',
    },
    'oclc' => {
        data_type => 'string',
        description => 'Only the book matching the OCLC will be returned',
        required => '0',
    },
    'sort' => {
        data_type => 'string',
        description => 'The sorting criteria (publish-date or rating).',
        required => '0',
    },
    'sort_direction' => {
        data_type => 'string',
        description => 'Whether to sort ascending or descending (ASC or DESC).',
        required => '0',
    },
    'group_results' => {
        data_type => 'boolean',
        description => 'Whether to group similar editions of the same book.',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'The number of books to skip in range [0,1000]',
        required => '0',
    },
    'number' => {
        data_type => 'int',
        description => 'The number of books to return in range [1,100]',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_books' } = {
        summary => 'Search Books',
        params => $params,
        returns => 'SearchBooks200Response',
        };
}
# @return SearchBooks200Response
#
sub search_books {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/search-books';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'query'}) {
        $query_params->{'query'} = $self->{api_client}->to_query_value($args{'query'});
    }

    # query params
    if ( exists $args{'earliest_publish_year'}) {
        $query_params->{'earliest-publish-year'} = $self->{api_client}->to_query_value($args{'earliest_publish_year'});
    }

    # query params
    if ( exists $args{'latest_publish_year'}) {
        $query_params->{'latest-publish-year'} = $self->{api_client}->to_query_value($args{'latest_publish_year'});
    }

    # query params
    if ( exists $args{'min_rating'}) {
        $query_params->{'min-rating'} = $self->{api_client}->to_query_value($args{'min_rating'});
    }

    # query params
    if ( exists $args{'max_rating'}) {
        $query_params->{'max-rating'} = $self->{api_client}->to_query_value($args{'max_rating'});
    }

    # query params
    if ( exists $args{'genres'}) {
        $query_params->{'genres'} = $self->{api_client}->to_query_value($args{'genres'});
    }

    # query params
    if ( exists $args{'authors'}) {
        $query_params->{'authors'} = $self->{api_client}->to_query_value($args{'authors'});
    }

    # query params
    if ( exists $args{'isbn'}) {
        $query_params->{'isbn'} = $self->{api_client}->to_query_value($args{'isbn'});
    }

    # query params
    if ( exists $args{'oclc'}) {
        $query_params->{'oclc'} = $self->{api_client}->to_query_value($args{'oclc'});
    }

    # query params
    if ( exists $args{'sort'}) {
        $query_params->{'sort'} = $self->{api_client}->to_query_value($args{'sort'});
    }

    # query params
    if ( exists $args{'sort_direction'}) {
        $query_params->{'sort-direction'} = $self->{api_client}->to_query_value($args{'sort_direction'});
    }

    # query params
    if ( exists $args{'group_results'}) {
        $query_params->{'group-results'} = $self->{api_client}->to_query_value($args{'group_results'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    # query params
    if ( exists $args{'number'}) {
        $query_params->{'number'} = $self->{api_client}->to_query_value($args{'number'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SearchBooks200Response', $response);
    return $_response_object;
}

1;
