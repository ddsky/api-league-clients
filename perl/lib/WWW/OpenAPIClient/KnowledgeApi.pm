=begin comment

API League

API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.6.2
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::KnowledgeApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# random_quote
#
# Random Quote
#
# @param int $min_length The minimum length of the quote in letters. (optional)
# @param int $max_length The maximum length of the quote in letters. (optional)
{
    my $params = {
    'min_length' => {
        data_type => 'int',
        description => 'The minimum length of the quote in letters.',
        required => '0',
    },
    'max_length' => {
        data_type => 'int',
        description => 'The maximum length of the quote in letters.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'random_quote' } = {
        summary => 'Random Quote',
        params => $params,
        returns => 'RandomQuote200Response',
        };
}
# @return RandomQuote200Response
#
sub random_quote {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/retrieve-random-quote';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'min_length'}) {
        $query_params->{'min-length'} = $self->{api_client}->to_query_value($args{'min_length'});
    }

    # query params
    if ( exists $args{'max_length'}) {
        $query_params->{'max-length'} = $self->{api_client}->to_query_value($args{'max_length'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RandomQuote200Response', $response);
    return $_response_object;
}

#
# random_riddle
#
# Random Riddle
#
# @param string $difficulty The difficulty of the riddle, either \&quot;easy\&quot;, \&quot;medium\&quot;, or \&quot;hard\&quot;. (optional)
{
    my $params = {
    'difficulty' => {
        data_type => 'string',
        description => 'The difficulty of the riddle, either \&quot;easy\&quot;, \&quot;medium\&quot;, or \&quot;hard\&quot;.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'random_riddle' } = {
        summary => 'Random Riddle',
        params => $params,
        returns => 'RandomRiddle200Response',
        };
}
# @return RandomRiddle200Response
#
sub random_riddle {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/retrieve-random-riddle';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'difficulty'}) {
        $query_params->{'difficulty'} = $self->{api_client}->to_query_value($args{'difficulty'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RandomRiddle200Response', $response);
    return $_response_object;
}

#
# random_trivia
#
# Random Trivia
#
# @param int $max_length The maximum length of the trivia in letters. (optional)
{
    my $params = {
    'max_length' => {
        data_type => 'int',
        description => 'The maximum length of the trivia in letters.',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'random_trivia' } = {
        summary => 'Random Trivia',
        params => $params,
        returns => 'RandomTrivia200Response',
        };
}
# @return RandomTrivia200Response
#
sub random_trivia {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/retrieve-random-trivia';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'max_length'}) {
        $query_params->{'max-length'} = $self->{api_client}->to_query_value($args{'max_length'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(apiKey headerApiKey )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('RandomTrivia200Response', $response);
    return $_response_object;
}

1;
