/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RetrieveRecipeInformation200ResponseCredits from './RetrieveRecipeInformation200ResponseCredits';
import RetrieveRecipeInformation200ResponseDietaryProperties from './RetrieveRecipeInformation200ResponseDietaryProperties';
import RetrieveRecipeInformation200ResponseIngredientsInner from './RetrieveRecipeInformation200ResponseIngredientsInner';
import RetrieveRecipeInformation200ResponseInstructionsInner from './RetrieveRecipeInformation200ResponseInstructionsInner';
import RetrieveRecipeInformation200ResponseNutrition from './RetrieveRecipeInformation200ResponseNutrition';
import RetrieveRecipeInformation200ResponseScores from './RetrieveRecipeInformation200ResponseScores';
import RetrieveRecipeInformation200ResponseTaste from './RetrieveRecipeInformation200ResponseTaste';
import RetrieveRecipeInformation200ResponseTimes from './RetrieveRecipeInformation200ResponseTimes';

/**
 * The RetrieveRecipeInformation200Response model module.
 * @module model/RetrieveRecipeInformation200Response
 * @version 1.0.0
 */
class RetrieveRecipeInformation200Response {
    /**
     * Constructs a new <code>RetrieveRecipeInformation200Response</code>.
     * @alias module:model/RetrieveRecipeInformation200Response
     */
    constructor() { 
        
        RetrieveRecipeInformation200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RetrieveRecipeInformation200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RetrieveRecipeInformation200Response} obj Optional instance to populate.
     * @return {module:model/RetrieveRecipeInformation200Response} The populated <code>RetrieveRecipeInformation200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RetrieveRecipeInformation200Response();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('servings')) {
                obj['servings'] = ApiClient.convertToType(data['servings'], 'Number');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], ['String']);
            }
            if (data.hasOwnProperty('dietary_properties')) {
                obj['dietary_properties'] = RetrieveRecipeInformation200ResponseDietaryProperties.constructFromObject(data['dietary_properties']);
            }
            if (data.hasOwnProperty('price_per_serving')) {
                obj['price_per_serving'] = ApiClient.convertToType(data['price_per_serving'], 'Number');
            }
            if (data.hasOwnProperty('times')) {
                obj['times'] = RetrieveRecipeInformation200ResponseTimes.constructFromObject(data['times']);
            }
            if (data.hasOwnProperty('nutrition')) {
                obj['nutrition'] = RetrieveRecipeInformation200ResponseNutrition.constructFromObject(data['nutrition']);
            }
            if (data.hasOwnProperty('taste')) {
                obj['taste'] = RetrieveRecipeInformation200ResponseTaste.constructFromObject(data['taste']);
            }
            if (data.hasOwnProperty('cuisines')) {
                obj['cuisines'] = ApiClient.convertToType(data['cuisines'], ['String']);
            }
            if (data.hasOwnProperty('meal_types')) {
                obj['meal_types'] = ApiClient.convertToType(data['meal_types'], ['String']);
            }
            if (data.hasOwnProperty('occasions')) {
                obj['occasions'] = ApiClient.convertToType(data['occasions'], ['String']);
            }
            if (data.hasOwnProperty('ingredients')) {
                obj['ingredients'] = ApiClient.convertToType(data['ingredients'], [RetrieveRecipeInformation200ResponseIngredientsInner]);
            }
            if (data.hasOwnProperty('instructions')) {
                obj['instructions'] = ApiClient.convertToType(data['instructions'], [RetrieveRecipeInformation200ResponseInstructionsInner]);
            }
            if (data.hasOwnProperty('credits')) {
                obj['credits'] = RetrieveRecipeInformation200ResponseCredits.constructFromObject(data['credits']);
            }
            if (data.hasOwnProperty('scores')) {
                obj['scores'] = RetrieveRecipeInformation200ResponseScores.constructFromObject(data['scores']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RetrieveRecipeInformation200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RetrieveRecipeInformation200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['images'])) {
            throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
        }
        // validate the optional field `dietary_properties`
        if (data['dietary_properties']) { // data not null
          RetrieveRecipeInformation200ResponseDietaryProperties.validateJSON(data['dietary_properties']);
        }
        // validate the optional field `times`
        if (data['times']) { // data not null
          RetrieveRecipeInformation200ResponseTimes.validateJSON(data['times']);
        }
        // validate the optional field `nutrition`
        if (data['nutrition']) { // data not null
          RetrieveRecipeInformation200ResponseNutrition.validateJSON(data['nutrition']);
        }
        // validate the optional field `taste`
        if (data['taste']) { // data not null
          RetrieveRecipeInformation200ResponseTaste.validateJSON(data['taste']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['cuisines'])) {
            throw new Error("Expected the field `cuisines` to be an array in the JSON data but got " + data['cuisines']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['meal_types'])) {
            throw new Error("Expected the field `meal_types` to be an array in the JSON data but got " + data['meal_types']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['occasions'])) {
            throw new Error("Expected the field `occasions` to be an array in the JSON data but got " + data['occasions']);
        }
        if (data['ingredients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ingredients'])) {
                throw new Error("Expected the field `ingredients` to be an array in the JSON data but got " + data['ingredients']);
            }
            // validate the optional field `ingredients` (array)
            for (const item of data['ingredients']) {
                RetrieveRecipeInformation200ResponseIngredientsInner.validateJSON(item);
            };
        }
        if (data['instructions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instructions'])) {
                throw new Error("Expected the field `instructions` to be an array in the JSON data but got " + data['instructions']);
            }
            // validate the optional field `instructions` (array)
            for (const item of data['instructions']) {
                RetrieveRecipeInformation200ResponseInstructionsInner.validateJSON(item);
            };
        }
        // validate the optional field `credits`
        if (data['credits']) { // data not null
          RetrieveRecipeInformation200ResponseCredits.validateJSON(data['credits']);
        }
        // validate the optional field `scores`
        if (data['scores']) { // data not null
          RetrieveRecipeInformation200ResponseScores.validateJSON(data['scores']);
        }

        return true;
    }


}



/**
 * @member {Number} id
 */
RetrieveRecipeInformation200Response.prototype['id'] = undefined;

/**
 * @member {String} title
 */
RetrieveRecipeInformation200Response.prototype['title'] = undefined;

/**
 * @member {Number} servings
 */
RetrieveRecipeInformation200Response.prototype['servings'] = undefined;

/**
 * @member {Array.<String>} images
 */
RetrieveRecipeInformation200Response.prototype['images'] = undefined;

/**
 * @member {module:model/RetrieveRecipeInformation200ResponseDietaryProperties} dietary_properties
 */
RetrieveRecipeInformation200Response.prototype['dietary_properties'] = undefined;

/**
 * @member {Number} price_per_serving
 */
RetrieveRecipeInformation200Response.prototype['price_per_serving'] = undefined;

/**
 * @member {module:model/RetrieveRecipeInformation200ResponseTimes} times
 */
RetrieveRecipeInformation200Response.prototype['times'] = undefined;

/**
 * @member {module:model/RetrieveRecipeInformation200ResponseNutrition} nutrition
 */
RetrieveRecipeInformation200Response.prototype['nutrition'] = undefined;

/**
 * @member {module:model/RetrieveRecipeInformation200ResponseTaste} taste
 */
RetrieveRecipeInformation200Response.prototype['taste'] = undefined;

/**
 * @member {Array.<String>} cuisines
 */
RetrieveRecipeInformation200Response.prototype['cuisines'] = undefined;

/**
 * @member {Array.<String>} meal_types
 */
RetrieveRecipeInformation200Response.prototype['meal_types'] = undefined;

/**
 * @member {Array.<String>} occasions
 */
RetrieveRecipeInformation200Response.prototype['occasions'] = undefined;

/**
 * @member {Array.<module:model/RetrieveRecipeInformation200ResponseIngredientsInner>} ingredients
 */
RetrieveRecipeInformation200Response.prototype['ingredients'] = undefined;

/**
 * @member {Array.<module:model/RetrieveRecipeInformation200ResponseInstructionsInner>} instructions
 */
RetrieveRecipeInformation200Response.prototype['instructions'] = undefined;

/**
 * @member {module:model/RetrieveRecipeInformation200ResponseCredits} credits
 */
RetrieveRecipeInformation200Response.prototype['credits'] = undefined;

/**
 * @member {module:model/RetrieveRecipeInformation200ResponseScores} scores
 */
RetrieveRecipeInformation200Response.prototype['scores'] = undefined;






export default RetrieveRecipeInformation200Response;

