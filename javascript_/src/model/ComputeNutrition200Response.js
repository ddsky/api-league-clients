/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComputeNutrition200ResponseIngredientBreakdownInner from './ComputeNutrition200ResponseIngredientBreakdownInner';
import RetrieveRecipeInformation200ResponseNutritionCaloricBreakdown from './RetrieveRecipeInformation200ResponseNutritionCaloricBreakdown';
import RetrieveRecipeInformation200ResponseNutritionFlavonoidsInner from './RetrieveRecipeInformation200ResponseNutritionFlavonoidsInner';
import RetrieveRecipeInformation200ResponseNutritionIngredientBreakdownInnerNutrientsInner from './RetrieveRecipeInformation200ResponseNutritionIngredientBreakdownInnerNutrientsInner';
import RetrieveRecipeInformation200ResponseNutritionWeightPerServing from './RetrieveRecipeInformation200ResponseNutritionWeightPerServing';
import SearchRecipes200ResponseRecipesInnerNutritionNutrientsInner from './SearchRecipes200ResponseRecipesInnerNutritionNutrientsInner';

/**
 * The ComputeNutrition200Response model module.
 * @module model/ComputeNutrition200Response
 * @version 1.0.0
 */
class ComputeNutrition200Response {
    /**
     * Constructs a new <code>ComputeNutrition200Response</code>.
     * @alias module:model/ComputeNutrition200Response
     */
    constructor() { 
        
        ComputeNutrition200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputeNutrition200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputeNutrition200Response} obj Optional instance to populate.
     * @return {module:model/ComputeNutrition200Response} The populated <code>ComputeNutrition200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputeNutrition200Response();

            if (data.hasOwnProperty('nutrients')) {
                obj['nutrients'] = ApiClient.convertToType(data['nutrients'], [RetrieveRecipeInformation200ResponseNutritionIngredientBreakdownInnerNutrientsInner]);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [RetrieveRecipeInformation200ResponseNutritionFlavonoidsInner]);
            }
            if (data.hasOwnProperty('flavonoids')) {
                obj['flavonoids'] = ApiClient.convertToType(data['flavonoids'], [SearchRecipes200ResponseRecipesInnerNutritionNutrientsInner]);
            }
            if (data.hasOwnProperty('ingredient_breakdown')) {
                obj['ingredient_breakdown'] = ApiClient.convertToType(data['ingredient_breakdown'], [ComputeNutrition200ResponseIngredientBreakdownInner]);
            }
            if (data.hasOwnProperty('caloric_breakdown')) {
                obj['caloric_breakdown'] = RetrieveRecipeInformation200ResponseNutritionCaloricBreakdown.constructFromObject(data['caloric_breakdown']);
            }
            if (data.hasOwnProperty('weight_per_serving')) {
                obj['weight_per_serving'] = RetrieveRecipeInformation200ResponseNutritionWeightPerServing.constructFromObject(data['weight_per_serving']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputeNutrition200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputeNutrition200Response</code>.
     */
    static validateJSON(data) {
        if (data['nutrients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nutrients'])) {
                throw new Error("Expected the field `nutrients` to be an array in the JSON data but got " + data['nutrients']);
            }
            // validate the optional field `nutrients` (array)
            for (const item of data['nutrients']) {
                RetrieveRecipeInformation200ResponseNutritionIngredientBreakdownInnerNutrientsInner.validateJSON(item);
            };
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                RetrieveRecipeInformation200ResponseNutritionFlavonoidsInner.validateJSON(item);
            };
        }
        if (data['flavonoids']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['flavonoids'])) {
                throw new Error("Expected the field `flavonoids` to be an array in the JSON data but got " + data['flavonoids']);
            }
            // validate the optional field `flavonoids` (array)
            for (const item of data['flavonoids']) {
                SearchRecipes200ResponseRecipesInnerNutritionNutrientsInner.validateJSON(item);
            };
        }
        if (data['ingredient_breakdown']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ingredient_breakdown'])) {
                throw new Error("Expected the field `ingredient_breakdown` to be an array in the JSON data but got " + data['ingredient_breakdown']);
            }
            // validate the optional field `ingredient_breakdown` (array)
            for (const item of data['ingredient_breakdown']) {
                ComputeNutrition200ResponseIngredientBreakdownInner.validateJSON(item);
            };
        }
        // validate the optional field `caloric_breakdown`
        if (data['caloric_breakdown']) { // data not null
          RetrieveRecipeInformation200ResponseNutritionCaloricBreakdown.validateJSON(data['caloric_breakdown']);
        }
        // validate the optional field `weight_per_serving`
        if (data['weight_per_serving']) { // data not null
          RetrieveRecipeInformation200ResponseNutritionWeightPerServing.validateJSON(data['weight_per_serving']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/RetrieveRecipeInformation200ResponseNutritionIngredientBreakdownInnerNutrientsInner>} nutrients
 */
ComputeNutrition200Response.prototype['nutrients'] = undefined;

/**
 * @member {Array.<module:model/RetrieveRecipeInformation200ResponseNutritionFlavonoidsInner>} properties
 */
ComputeNutrition200Response.prototype['properties'] = undefined;

/**
 * @member {Array.<module:model/SearchRecipes200ResponseRecipesInnerNutritionNutrientsInner>} flavonoids
 */
ComputeNutrition200Response.prototype['flavonoids'] = undefined;

/**
 * @member {Array.<module:model/ComputeNutrition200ResponseIngredientBreakdownInner>} ingredient_breakdown
 */
ComputeNutrition200Response.prototype['ingredient_breakdown'] = undefined;

/**
 * @member {module:model/RetrieveRecipeInformation200ResponseNutritionCaloricBreakdown} caloric_breakdown
 */
ComputeNutrition200Response.prototype['caloric_breakdown'] = undefined;

/**
 * @member {module:model/RetrieveRecipeInformation200ResponseNutritionWeightPerServing} weight_per_serving
 */
ComputeNutrition200Response.prototype['weight_per_serving'] = undefined;






export default ComputeNutrition200Response;

