# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APILeague.Api.News do
  @moduledoc """
  API calls for all endpoints tagged `News`.
  """

  alias APILeague.Connection
  import APILeague.RequestBuilder

  @doc """
  Extract News
  Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `url` (String.t): The url of the news.
  - `analyze` (boolean()): Whether to analyze the news (extract entities etc.)
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APILeague.Model.ExtractNews200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec extract_news(Tesla.Env.client, String.t, boolean(), keyword()) :: {:ok, nil} | {:ok, APILeague.Model.ExtractNews200Response.t} | {:error, Tesla.Env.t}
  def extract_news(connection, url, analyze, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/extract-news")
      |> add_param(:query, :url, url)
      |> add_param(:query, :analyze, analyze)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.ExtractNews200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Search News
  Search and filter news by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:text` (String.t): The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford
    - `:"source-countries"` (String.t): A comma-separated list of ISO 3166 country codes from which the news should originate.
    - `:language` (String.t): The ISO 6391 language code of the news.
    - `:"min-sentiment"` (float()): The minimal sentiment of the news in range [-1,1].
    - `:"max-sentiment"` (float()): The maximal sentiment of the news in range [-1,1].
    - `:"earliest-publish-date"` (String.t): The news must have been published after this date.
    - `:"latest-publish-date"` (String.t): The news must have been published before this date.
    - `:"news-sources"` (String.t): A comma-separated list of news sources from which the news should originate.
    - `:authors` (String.t): A comma-separated list of author names. Only news from any of the given authors will be returned.
    - `:categories` (String.t): A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other.
    - `:entities` (String.t): Filter news by entities (ORG, PER, or LOC).
    - `:"location-filter"` (String.t): Filter news by radius around a certain location. Format is \"latitude,longitude,radius in kilometers\"
    - `:sort` (String.t): The sorting criteria (publish-time).
    - `:"sort-direction"` (String.t): Whether to sort ascending or descending (ASC or DESC).
    - `:offset` (integer()): The number of news to skip in range [0,10000]
    - `:number` (integer()): The number of news to return in range [1,100]

  ### Returns

  - `{:ok, APILeague.Model.SearchNews200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_news(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.SearchNews200Response.t} | {:error, Tesla.Env.t}
  def search_news(connection, opts \\ []) do
    optional_params = %{
      :text => :query,
      :"source-countries" => :query,
      :language => :query,
      :"min-sentiment" => :query,
      :"max-sentiment" => :query,
      :"earliest-publish-date" => :query,
      :"latest-publish-date" => :query,
      :"news-sources" => :query,
      :authors => :query,
      :categories => :query,
      :entities => :query,
      :"location-filter" => :query,
      :sort => :query,
      :"sort-direction" => :query,
      :offset => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/search-news")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.SearchNews200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Top News
  Get the top news from a country in a language for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `source_country` (String.t): The ISO 3166 country code of the country for which top news should be retrieved.
  - `language` (String.t): The ISO 6391 language code of the top news. The language must be one spoken in the source-country.
  - `opts` (keyword): Optional parameters
    - `:date` (String.t): The date for which the top news should be retrieved. If no date is given, the current day is assumed.
    - `:"headlines-only"` (boolean()): Whether to only return basic information such as id, title, and url of the news.

  ### Returns

  - `{:ok, APILeague.Model.TopNews200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec top_news(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.TopNews200Response.t} | {:error, Tesla.Env.t}
  def top_news(connection, source_country, language, opts \\ []) do
    optional_params = %{
      :date => :query,
      :"headlines-only" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/retrieve-top-news")
      |> add_param(:query, :"source-country", source_country)
      |> add_param(:query, :language, language)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.TopNews200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end
end
