# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APILeague.Api.Humor do
  @moduledoc """
  API calls for all endpoints tagged `Humor`.
  """

  alias APILeague.Connection
  import APILeague.RequestBuilder

  @doc """
  Generate Nonsense Word
  Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APILeague.Model.GenerateNonsenseWord200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec generate_nonsense_word(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.GenerateNonsenseWord200Response.t} | {:error, Tesla.Env.t}
  def generate_nonsense_word(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/generate-nonsense-word")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.GenerateNonsenseWord200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Random Joke
  This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \"nsfw\" or \"religious\".

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"include-tags"` (String.t): A comma-separated list of tags the jokes should have.
    - `:"exclude-tags"` (String.t): A comma-separated list of tags the jokes must not have.
    - `:"min-rating"` (float()): The minimum rating in range [0.0,1.0] of the jokes.
    - `:"max-length"` (integer()): The maximum length of the joke in letters.

  ### Returns

  - `{:ok, APILeague.Model.SearchJokes200ResponseJokesInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec random_joke(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.SearchJokes200ResponseJokesInner.t} | {:error, Tesla.Env.t}
  def random_joke(connection, opts \\ []) do
    optional_params = %{
      :"include-tags" => :query,
      :"exclude-tags" => :query,
      :"min-rating" => :query,
      :"max-length" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/retrieve-random-joke")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.SearchJokes200ResponseJokesInner},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Random Meme
  Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:keywords` (String.t): A comma-separated list of words that must occur in the meme.
    - `:"keywords-in-image"` (boolean()): Whether the keywords must occur in the image.
    - `:"media-type"` (String.t): The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').
    - `:"min-rating"` (float()): The minimum rating in range [0.0,1.0] of the meme.
    - `:"max-age-days"` (integer()): The maximum age of the meme in days.

  ### Returns

  - `{:ok, APILeague.Model.RandomMeme200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec random_meme(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.RandomMeme200Response.t} | {:error, Tesla.Env.t}
  def random_meme(connection, opts \\ []) do
    optional_params = %{
      :keywords => :query,
      :"keywords-in-image" => :query,
      :"media-type" => :query,
      :"min-rating" => :query,
      :"max-age-days" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/retrieve-random-meme")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.RandomMeme200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Search Gifs
  Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `query` (String.t): The search query.
  - `opts` (keyword): Optional parameters
    - `:number` (integer()): The number of gifs to return in range [1,10]

  ### Returns

  - `{:ok, APILeague.Model.SearchGifs200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_gifs(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.SearchGifs200Response.t} | {:error, Tesla.Env.t}
  def search_gifs(connection, query, opts \\ []) do
    optional_params = %{
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/search-gifs")
      |> add_param(:query, :query, query)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.SearchGifs200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Search Jokes
  With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:keywords` (String.t): A comma-separated list of words that must occur in the joke.
    - `:"include-tags"` (String.t): A comma-separated list of tags the jokes should have.
    - `:"exclude-tags"` (String.t): A comma-separated list of tags the jokes must not have.
    - `:"min-rating"` (float()): The minimum rating in range [0.0,1.0] of the jokes.
    - `:"max-length"` (float()): The maximum length of the joke in letters.
    - `:offset` (integer()): The number of jokes to skip, between 0 and 1000.
    - `:number` (integer()): The number of jokes, between 1 and 10.

  ### Returns

  - `{:ok, APILeague.Model.SearchJokes200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_jokes(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.SearchJokes200Response.t} | {:error, Tesla.Env.t}
  def search_jokes(connection, opts \\ []) do
    optional_params = %{
      :keywords => :query,
      :"include-tags" => :query,
      :"exclude-tags" => :query,
      :"min-rating" => :query,
      :"max-length" => :query,
      :offset => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/search-jokes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.SearchJokes200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Search Memes
  With over 200,000 memes, you'll surely find something funny. You can even search for text within memes and filter by user ratings.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:keywords` (String.t): A comma-separated list of words that must occur in the meme.
    - `:"keywords-in-image"` (boolean()): Whether the keywords must occur in the image.
    - `:"media-type"` (String.t): The media type (either 'image', 'video' or even specific format such as 'jpg', 'png', or 'gif').
    - `:"min-rating"` (float()): The minimum rating in range [0.0,1.0] of the meme.
    - `:"max-age-days"` (integer()): The maximum age of the meme in days.
    - `:offset` (integer()): The number of memes to skip, between 0 and 1000.
    - `:number` (integer()): The number of memes, between 1 and 10.

  ### Returns

  - `{:ok, APILeague.Model.SearchMemes200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_memes(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.SearchMemes200Response.t} | {:error, Tesla.Env.t}
  def search_memes(connection, opts \\ []) do
    optional_params = %{
      :keywords => :query,
      :"keywords-in-image" => :query,
      :"media-type" => :query,
      :"min-rating" => :query,
      :"max-age-days" => :query,
      :offset => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/search-memes")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.SearchMemes200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end
end
