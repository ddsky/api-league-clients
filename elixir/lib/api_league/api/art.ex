# NOTE: This file is auto generated by OpenAPI Generator 7.8.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APILeague.Api.Art do
  @moduledoc """
  API calls for all endpoints tagged `Art`.
  """

  alias APILeague.Connection
  import APILeague.RequestBuilder

  @doc """
  Image to Ascii Art by URL API
  Convert an image to ASCII art. You can pass the image URL as a query parameter. The API returns the ASCII art as plain text. This endpoint is using the GET method and an image URL as a query parameter.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `url` (String.t): The URL to the image.
  - `opts` (keyword): Optional parameters
    - `:width` (integer()): The maximum width of the image (default 400, max. 500).
    - `:height` (integer()): The maximum height of the image (default 400, max. 500).

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec image_to_ascii_art_by_urlapi(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def image_to_ascii_art_by_urlapi(connection, url, opts \\ []) do
    optional_params = %{
      :width => :query,
      :height => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/convert-image-to-ascii-txt")
      |> add_param(:query, :url, url)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Random Poem API
  Retrieve a random poem by many famous authors. You can filter poem's by length (number of lines).

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:"min-lines"` (integer()): The minimum number of lines of the poem.
    - `:"max-lines"` (integer()): The maximum number of lines of the poem.

  ### Returns

  - `{:ok, APILeague.Model.RandomPoemApi200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec random_poem_api(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.RandomPoemApi200Response.t} | {:error, Tesla.Env.t}
  def random_poem_api(connection, opts \\ []) do
    optional_params = %{
      :"min-lines" => :query,
      :"max-lines" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/retrieve-random-poem")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.RandomPoemApi200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end
end
