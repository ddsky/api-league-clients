# NOTE: This file is auto generated by OpenAPI Generator 7.5.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule APILeague.Api.Web do
  @moduledoc """
  API calls for all endpoints tagged `Web`.
  """

  alias APILeague.Connection
  import APILeague.RequestBuilder

  @doc """
  Extract Authors
  Extracts the authors from a given URL. This API is useful for extracting the authors from a blog post or news article. The API will return a list of authors with their names and links to their profiles if available.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `url` (String.t): The url with the article from which authors should be extracted.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APILeague.Model.ExtractAuthors200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec extract_authors(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.ExtractAuthors200Response.t} | {:error, Tesla.Env.t}
  def extract_authors(connection, url, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/extract-authors")
      |> add_param(:query, :url, url)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.ExtractAuthors200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Extract Content from a Web Page
  Extract the main content from a web page. This API is useful for extracting the main text, title, and images from a web page. It can be used to create a summary of the content of a web page, or to extract the main content of a web page to display it in a different format.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `url` (String.t): The url for which the content will be extracted.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APILeague.Model.ExtractContentFromAWebPage200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec extract_content_from_a_web_page(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.ExtractContentFromAWebPage200Response.t} | {:error, Tesla.Env.t}
  def extract_content_from_a_web_page(connection, url, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/extract-content")
      |> add_param(:query, :url, url)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.ExtractContentFromAWebPage200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Extract Publish Date
  Extract the publish date of an article (news or blog). The API will return the publish date of the article if it can be found. The date returned is in the format YYYY-MM-DD.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `url` (String.t): The url for which the publish date should be extracted.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APILeague.Model.ExtractPublishDate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec extract_publish_date(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.ExtractPublishDate200Response.t} | {:error, Tesla.Env.t}
  def extract_publish_date(connection, url, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/extract-publish-date")
      |> add_param(:query, :url, url)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.ExtractPublishDate200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Retrieve Page Rank
  This API allows you to retrieve the page rank of a given URL. The API returns the page rank, the position of the URL in the search results, and the percentile of the page rank.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `domain` (String.t): The domain for which the page rank should be returned.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, APILeague.Model.RetrievePageRank200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec retrieve_page_rank(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.RetrievePageRank200Response.t} | {:error, Tesla.Env.t}
  def retrieve_page_rank(connection, domain, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/retrieve-page-rank")
      |> add_param(:query, :domain, domain)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.RetrievePageRank200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end

  @doc """
  Search Web
  Search the web for a given query. The API returns a list of results with the title, summary, and URL.

  ### Parameters

  - `connection` (APILeague.Connection): Connection to server
  - `query` (String.t): The search query.
  - `opts` (keyword): Optional parameters
    - `:number` (integer()): The number of results to return in range [1,50]

  ### Returns

  - `{:ok, APILeague.Model.SearchWeb200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_web(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, APILeague.Model.SearchWeb200Response.t} | {:error, Tesla.Env.t}
  def search_web(connection, query, opts \\ []) do
    optional_params = %{
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/search-web")
      |> add_param(:query, :query, query)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, APILeague.Model.SearchWeb200Response},
      {401, false},
      {402, false},
      {403, false},
      {404, false},
      {406, false},
      {429, false}
    ])
  end
end
