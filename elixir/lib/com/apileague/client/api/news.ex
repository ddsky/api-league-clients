# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.apileague.client.Api.News do
  @moduledoc """
  API calls for all endpoints tagged `News`.
  """

  alias com.apileague.client.Connection
  import com.apileague.client.RequestBuilder


  @doc """
  Extract News
  Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - url (String.t): The url of the news.
  - analyze (boolean()): Whether to analyze the news (extract entities etc.)
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse2003.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec extract_news(Tesla.Env.client, String.t, boolean(), keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse2003.t} | {:error, Tesla.Env.t}
  def extract_news(connection, url, analyze, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/extract-news")
    |> add_param(:query, :"url", url)
    |> add_param(:query, :"analyze", analyze)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse2003{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Search News
  Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters
    - :text (String.t): The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford
    - :source_countries (String.t): A comma-separated list of ISO 3166 country codes from which the news should originate.
    - :language (String.t): The ISO 6391 language code of the news.
    - :min_sentiment (float()): The minimal sentiment of the news in range [-1,1].
    - :max_sentiment (float()): The maximal sentiment of the news in range [-1,1].
    - :earliest_publish_date (String.t): The news must have been published after this date.
    - :latest_publish_date (String.t): The news must have been published before this date.
    - :news_sources (String.t): A comma-separated list of news sources from which the news should originate.
    - :authors (String.t): A comma-separated list of author names. Only news from any of the given authors will be returned.
    - :entities (String.t): Filter news by entities (see semantic types).
    - :location_filter (String.t): Filter news by radius around a certain location. Format is \"latitude,longitude,radius in kilometers\"
    - :sort (String.t): The sorting criteria (publish-time or sentiment).
    - :sort_direction (String.t): Whether to sort ascending or descending (ASC or DESC).
    - :offset (integer()): The number of news to skip in range [0,10000]
    - :number (integer()): The number of news to return in range [1,100]
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse2002.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec search_news(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse2002.t} | {:error, Tesla.Env.t}
  def search_news(connection, opts \\ []) do
    optional_params = %{
      :"text" => :query,
      :"source-countries" => :query,
      :"language" => :query,
      :"min-sentiment" => :query,
      :"max-sentiment" => :query,
      :"earliest-publish-date" => :query,
      :"latest-publish-date" => :query,
      :"news-sources" => :query,
      :"authors" => :query,
      :"entities" => :query,
      :"location-filter" => :query,
      :"sort" => :query,
      :"sort-direction" => :query,
      :"offset" => :query,
      :"number" => :query
    }
    %{}
    |> method(:get)
    |> url("/search-news")
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse2002{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end
end
