# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# https://openapi-generator.tech
# Do not edit the class manually.

defmodule com.apileague.client.Api.Text do
  @moduledoc """
  API calls for all endpoints tagged `Text`.
  """

  alias com.apileague.client.Connection
  import com.apileague.client.RequestBuilder


  @doc """
  Correct Spelling
  The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - text (String.t): The text to be corrected.
  - language (String.t): The language of the text, one of en, de, es, fr, or it.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20016.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec correct_spelling(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20016.t} | {:error, Tesla.Env.t}
  def correct_spelling(connection, text, language, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/correct-spelling")
    |> add_param(:query, :"text", text)
    |> add_param(:query, :"language", language)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20016{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Detect Language
  Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - text (String.t): The text for which the language should be detected.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, [%InlineResponse20017{}, ...]} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec detect_language(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(com.apileague.client.Model.InlineResponse20017.t)} | {:error, Tesla.Env.t}
  def detect_language(connection, text, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/detect-language")
    |> add_param(:query, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, [%com.apileague.client.Model.InlineResponse20017{}]},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Detect Sentiment
  Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - text (String.t): The text for which the sentiment should be detected.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20018.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec detect_sentiment(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20018.t} | {:error, Tesla.Env.t}
  def detect_sentiment(connection, text, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/detect-sentiment")
    |> add_param(:query, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20018{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Extract Dates
  Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \"April 5th, 2035\", \"04/05/2035\", or \"05.04.2035\". The normalized date is the date in the form of a timestamp (milliseconds since 1970).

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - text (String.t): The text from which dates should be extracted.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20021.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec extract_dates(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20021.t} | {:error, Tesla.Env.t}
  def extract_dates(connection, text, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/extract-dates")
    |> add_param(:query, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20021{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Extract Entities
  Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \"Canada\" represents the concept of a country. The word \"Jim Carrey\" represents the concept of a person. The word \"Tesla\" represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - text (String.t): The text from which entities should be extracted.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20027.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec extract_entities(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20027.t} | {:error, Tesla.Env.t}
  def extract_entities(connection, text, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/extract-entities")
    |> add_param(:query, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20027{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  List Word Synonyms
  Return synonyms of a word.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - word (String.t): The (noun) word for which a list of synonyms should be returned.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20022.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec list_word_synonyms(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20022.t} | {:error, Tesla.Env.t}
  def list_word_synonyms(connection, word, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/list-synonyms")
    |> add_param(:query, :"word", word)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20022{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Part of Speech Tagging
  Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - text (String.t): The text to tag the part of speech.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20023.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec part_of_speech_tagging(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20023.t} | {:error, Tesla.Env.t}
  def part_of_speech_tagging(connection, text, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/tag-pos")
    |> add_param(:query, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20023{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Pluralize Word
  Find the plural form of a word.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - word (String.t): The (noun) word for which the plural form should be found.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20026.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec pluralize_word(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20026.t} | {:error, Tesla.Env.t}
  def pluralize_word(connection, word, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/pluralize-word")
    |> add_param(:query, :"word", word)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20026{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Score Readability
  Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - text (String.t): The text to score for readability.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20020.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec score_readability(Tesla.Env.client, String.t, keyword()) :: {:ok, com.apileague.client.Model.InlineResponse20020.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def score_readability(connection, text, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/score-readability")
    |> add_param(:query, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20020{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Score Text
  Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - title (String.t): The title of the text to score.
  - text (String.t): The text to score for multiple metrics.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20019.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec score_text(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20019.t} | {:error, Tesla.Env.t}
  def score_text(connection, title, text, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/score-text")
    |> add_param(:query, :"title", title)
    |> add_param(:query, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20019{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Singularize Word
  Find the singular form of a word.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - word (String.t): The (noun) word for which the singular form should be found.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20025.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec singularize_word(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20025.t} | {:error, Tesla.Env.t}
  def singularize_word(connection, word, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/singularize-word")
    |> add_param(:query, :"word", word)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20025{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end

  @doc """
  Text Stemming
  The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.

  ## Parameters

  - connection (com.apileague.client.Connection): Connection to server
  - text (String.t): The text to be stemmed.
  - opts (KeywordList): [optional] Optional parameters
  ## Returns

  {:ok, com.apileague.client.Model.InlineResponse20024.t} on success
  {:error, Tesla.Env.t} on failure
  """
  @spec text_stemming(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, com.apileague.client.Model.InlineResponse20024.t} | {:error, Tesla.Env.t}
  def text_stemming(connection, text, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/stem-text")
    |> add_param(:query, :"text", text)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> evaluate_response([
      { 200, %com.apileague.client.Model.InlineResponse20024{}},
      { 401, false},
      { 402, false},
      { 403, false},
      { 404, false},
      { 406, false},
      { 429, false}
    ])
  end
end
