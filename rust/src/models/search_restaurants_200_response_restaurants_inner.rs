/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchRestaurants200ResponseRestaurantsInner {
    #[serde(rename = "offers_third_party_delivery", skip_serializing_if = "Option::is_none")]
    pub offers_third_party_delivery: Option<bool>,
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<Box<crate::models::SearchRestaurants200ResponseRestaurantsInnerAddress>>,
    #[serde(rename = "supports_upc_codes", skip_serializing_if = "Option::is_none")]
    pub supports_upc_codes: Option<bool>,
    #[serde(rename = "is_open", skip_serializing_if = "Option::is_none")]
    pub is_open: Option<bool>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "weighted_rating_value", skip_serializing_if = "Option::is_none")]
    pub weighted_rating_value: Option<i32>,
    #[serde(rename = "type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<String>>,
    #[serde(rename = "offers_first_party_delivery", skip_serializing_if = "Option::is_none")]
    pub offers_first_party_delivery: Option<bool>,
    #[serde(rename = "aggregated_rating_count", skip_serializing_if = "Option::is_none")]
    pub aggregated_rating_count: Option<i32>,
    #[serde(rename = "pickup_enabled", skip_serializing_if = "Option::is_none")]
    pub pickup_enabled: Option<bool>,
    #[serde(rename = "cuisines", skip_serializing_if = "Option::is_none")]
    pub cuisines: Option<Vec<String>>,
    #[serde(rename = "miles", skip_serializing_if = "Option::is_none")]
    pub miles: Option<f32>,
    #[serde(rename = "dollar_signs", skip_serializing_if = "Option::is_none")]
    pub dollar_signs: Option<i32>,
    #[serde(rename = "delivery_enabled", skip_serializing_if = "Option::is_none")]
    pub delivery_enabled: Option<bool>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "phone_number", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<f32>,
    #[serde(rename = "_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub _id: Option<Option<String>>,
    #[serde(rename = "local_hours", skip_serializing_if = "Option::is_none")]
    pub local_hours: Option<Box<crate::models::SearchRestaurants200ResponseRestaurantsInnerLocalHours>>,
}

impl SearchRestaurants200ResponseRestaurantsInner {
    pub fn new() -> SearchRestaurants200ResponseRestaurantsInner {
        SearchRestaurants200ResponseRestaurantsInner {
            offers_third_party_delivery: None,
            address: None,
            supports_upc_codes: None,
            is_open: None,
            description: None,
            weighted_rating_value: None,
            r#type: None,
            offers_first_party_delivery: None,
            aggregated_rating_count: None,
            pickup_enabled: None,
            cuisines: None,
            miles: None,
            dollar_signs: None,
            delivery_enabled: None,
            name: None,
            phone_number: None,
            _id: None,
            local_hours: None,
        }
    }
}


