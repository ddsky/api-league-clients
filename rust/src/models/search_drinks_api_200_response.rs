/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchDrinksApi200Response {
    #[serde(rename = "offset", skip_serializing_if = "Option::is_none")]
    pub offset: Option<i32>,
    #[serde(rename = "number", skip_serializing_if = "Option::is_none")]
    pub number: Option<i32>,
    #[serde(rename = "drinks", skip_serializing_if = "Option::is_none")]
    pub drinks: Option<Vec<models::SearchDrinksApi200ResponseDrinksInner>>,
    #[serde(rename = "total_results", skip_serializing_if = "Option::is_none")]
    pub total_results: Option<i32>,
}

impl SearchDrinksApi200Response {
    pub fn new() -> SearchDrinksApi200Response {
        SearchDrinksApi200Response {
            offset: None,
            number: None,
            drinks: None,
            total_results: None,
        }
    }
}

