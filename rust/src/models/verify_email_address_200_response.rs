/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct VerifyEmailAddress200Response {
    #[serde(rename = "email", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub email: Option<Option<String>>,
    #[serde(rename = "domain", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub domain: Option<Option<String>>,
    #[serde(rename = "first_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub first_name: Option<Option<String>>,
    #[serde(rename = "middle_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub middle_name: Option<Option<String>>,
    #[serde(rename = "last_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_name: Option<Option<String>>,
    #[serde(rename = "full_name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub full_name: Option<Option<String>>,
    #[serde(rename = "username", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub username: Option<Option<String>>,
    #[serde(rename = "image", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub image: Option<Option<String>>,
    #[serde(rename = "result", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub result: Option<Option<String>>,
    #[serde(rename = "disposable", skip_serializing_if = "Option::is_none")]
    pub disposable: Option<bool>,
    #[serde(rename = "accept_all", skip_serializing_if = "Option::is_none")]
    pub accept_all: Option<bool>,
    #[serde(rename = "free_provider", skip_serializing_if = "Option::is_none")]
    pub free_provider: Option<bool>,
}

impl VerifyEmailAddress200Response {
    pub fn new() -> VerifyEmailAddress200Response {
        VerifyEmailAddress200Response {
            email: None,
            domain: None,
            first_name: None,
            middle_name: None,
            last_name: None,
            full_name: None,
            username: None,
            image: None,
            result: None,
            disposable: None,
            accept_all: None,
            free_provider: None,
        }
    }
}

