/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SearchDrinksApi200ResponseDrinksInner {
    #[serde(rename = "flavors", skip_serializing_if = "Option::is_none")]
    pub flavors: Option<Vec<String>>,
    #[serde(rename = "instructions", skip_serializing_if = "Option::is_none")]
    pub instructions: Option<Vec<models::SearchDrinksApi200ResponseDrinksInnerInstructionsInner>>,
    #[serde(rename = "images", skip_serializing_if = "Option::is_none")]
    pub images: Option<Vec<String>>,
    #[serde(rename = "nutrition", skip_serializing_if = "Option::is_none")]
    pub nutrition: Option<Box<models::SearchDrinksApi200ResponseDrinksInnerNutrition>>,
    #[serde(rename = "glass_type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub glass_type: Option<Option<String>>,
    #[serde(rename = "credits", skip_serializing_if = "Option::is_none")]
    pub credits: Option<Box<models::SearchDrinksApi200ResponseDrinksInnerCredits>>,
    #[serde(rename = "price_per_serving", skip_serializing_if = "Option::is_none")]
    pub price_per_serving: Option<f64>,
    #[serde(rename = "description", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub description: Option<Option<String>>,
    #[serde(rename = "ingredients", skip_serializing_if = "Option::is_none")]
    pub ingredients: Option<Vec<models::SearchDrinksApi200ResponseDrinksInnerIngredientsInner>>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "title", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub title: Option<Option<String>>,
    #[serde(rename = "cuisines", skip_serializing_if = "Option::is_none")]
    pub cuisines: Option<Vec<String>>,
}

impl SearchDrinksApi200ResponseDrinksInner {
    pub fn new() -> SearchDrinksApi200ResponseDrinksInner {
        SearchDrinksApi200ResponseDrinksInner {
            flavors: None,
            instructions: None,
            images: None,
            nutrition: None,
            glass_type: None,
            credits: None,
            price_per_serving: None,
            description: None,
            ingredients: None,
            id: None,
            title: None,
            cuisines: None,
        }
    }
}

