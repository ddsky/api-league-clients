/*
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apileague;

import com.apileague.client.ApiCallback;
import com.apileague.client.ApiClient;
import com.apileague.client.ApiException;
import com.apileague.client.ApiResponse;
import com.apileague.client.Configuration;
import com.apileague.client.Pair;
import com.apileague.client.ProgressRequestBody;
import com.apileague.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.apileague.client.model.ExtractNews200Response;
import com.apileague.client.model.SearchNews200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for extractNews
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/extract-news-api/">Extract News Documentation</a>
     */
    public okhttp3.Call extractNewsCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/extract-news";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (analyze != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("analyze", analyze));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call extractNewsValidateBeforeCall(String url, Boolean analyze, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling extractNews(Async)");
        }

        // verify the required parameter 'analyze' is set
        if (analyze == null) {
            throw new ApiException("Missing the required parameter 'analyze' when calling extractNews(Async)");
        }

        return extractNewsCall(url, analyze, _callback);

    }

    /**
     * Extract News
     * Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ExtractNews200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/extract-news-api/">Extract News Documentation</a>
     */
    public ExtractNews200Response extractNews(String url, Boolean analyze) throws ApiException {
        ApiResponse<ExtractNews200Response> localVarResp = extractNewsWithHttpInfo(url, analyze);
        return localVarResp.getData();
    }

    /**
     * Extract News
     * Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @return ApiResponse&lt;ExtractNews200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/extract-news-api/">Extract News Documentation</a>
     */
    public ApiResponse<ExtractNews200Response> extractNewsWithHttpInfo(String url, Boolean analyze) throws ApiException {
        okhttp3.Call localVarCall = extractNewsValidateBeforeCall(url, analyze, null);
        Type localVarReturnType = new TypeToken<ExtractNews200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Extract News (asynchronously)
     * Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
     * @param url The url of the news. (required)
     * @param analyze Whether to analyze the news (extract entities etc.) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/extract-news-api/">Extract News Documentation</a>
     */
    public okhttp3.Call extractNewsAsync(String url, Boolean analyze, final ApiCallback<ExtractNews200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = extractNewsValidateBeforeCall(url, analyze, _callback);
        Type localVarReturnType = new TypeToken<ExtractNews200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchNews
     * @param text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param language The ISO 6391 language code of the news. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param entities Filter news by entities (ORG, PER, or LOC). (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param sort The sorting criteria (publish-time or sentiment). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of news to skip in range [0,10000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-news-api/">Search News Documentation</a>
     */
    public okhttp3.Call searchNewsCall(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search-news";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (sourceCountries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-countries", sourceCountries));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (minSentiment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-sentiment", minSentiment));
        }

        if (maxSentiment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-sentiment", maxSentiment));
        }

        if (earliestPublishDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earliest-publish-date", earliestPublishDate));
        }

        if (latestPublishDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("latest-publish-date", latestPublishDate));
        }

        if (newsSources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("news-sources", newsSources));
        }

        if (authors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authors", authors));
        }

        if (entities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entities", entities));
        }

        if (locationFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location-filter", locationFilter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sortDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort-direction", sortDirection));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchNewsValidateBeforeCall(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        return searchNewsCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, sort, sortDirection, offset, number, _callback);

    }

    /**
     * Search News
     * Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
     * @param text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param language The ISO 6391 language code of the news. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param entities Filter news by entities (ORG, PER, or LOC). (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param sort The sorting criteria (publish-time or sentiment). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of news to skip in range [0,10000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @return SearchNews200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-news-api/">Search News Documentation</a>
     */
    public SearchNews200Response searchNews(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number) throws ApiException {
        ApiResponse<SearchNews200Response> localVarResp = searchNewsWithHttpInfo(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, sort, sortDirection, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search News
     * Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
     * @param text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param language The ISO 6391 language code of the news. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param entities Filter news by entities (ORG, PER, or LOC). (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param sort The sorting criteria (publish-time or sentiment). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of news to skip in range [0,10000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @return ApiResponse&lt;SearchNews200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-news-api/">Search News Documentation</a>
     */
    public ApiResponse<SearchNews200Response> searchNewsWithHttpInfo(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchNewsValidateBeforeCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, sort, sortDirection, offset, number, null);
        Type localVarReturnType = new TypeToken<SearchNews200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search News (asynchronously)
     * Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
     * @param text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param language The ISO 6391 language code of the news. (optional)
     * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param earliestPublishDate The news must have been published after this date. (optional)
     * @param latestPublishDate The news must have been published before this date. (optional)
     * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
     * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param entities Filter news by entities (ORG, PER, or LOC). (optional)
     * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param sort The sorting criteria (publish-time or sentiment). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of news to skip in range [0,10000] (optional)
     * @param number The number of news to return in range [1,100] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-news-api/">Search News Documentation</a>
     */
    public okhttp3.Call searchNewsAsync(String text, String sourceCountries, String language, Double minSentiment, Double maxSentiment, String earliestPublishDate, String latestPublishDate, String newsSources, String authors, String entities, String locationFilter, String sort, String sortDirection, Integer offset, Integer number, final ApiCallback<SearchNews200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchNewsValidateBeforeCall(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, sort, sortDirection, offset, number, _callback);
        Type localVarReturnType = new TypeToken<SearchNews200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
