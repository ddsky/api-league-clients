/*
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.4.2
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apileague;

import com.apileague.client.ApiCallback;
import com.apileague.client.ApiClient;
import com.apileague.client.ApiException;
import com.apileague.client.ApiResponse;
import com.apileague.client.Configuration;
import com.apileague.client.Pair;
import com.apileague.client.ProgressRequestBody;
import com.apileague.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.apileague.client.model.ConvertUnits200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MathApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MathApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MathApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for convertUnits
     * @param sourceAmount The source amount. (required)
     * @param sourceUnit The source unit. (required)
     * @param targetUnit The unit to which should be converted. (required)
     * @param foodName An optional food name. For converting foods the food is relevant as they have different densities. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/convert-units-api/">Convert Units Documentation</a>
     */
    public okhttp3.Call convertUnitsCall(Double sourceAmount, String sourceUnit, String targetUnit, String foodName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/convert-units";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-amount", sourceAmount));
        }

        if (sourceUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source-unit", sourceUnit));
        }

        if (targetUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target-unit", targetUnit));
        }

        if (foodName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("food-name", foodName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertUnitsValidateBeforeCall(Double sourceAmount, String sourceUnit, String targetUnit, String foodName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sourceAmount' is set
        if (sourceAmount == null) {
            throw new ApiException("Missing the required parameter 'sourceAmount' when calling convertUnits(Async)");
        }

        // verify the required parameter 'sourceUnit' is set
        if (sourceUnit == null) {
            throw new ApiException("Missing the required parameter 'sourceUnit' when calling convertUnits(Async)");
        }

        // verify the required parameter 'targetUnit' is set
        if (targetUnit == null) {
            throw new ApiException("Missing the required parameter 'targetUnit' when calling convertUnits(Async)");
        }

        return convertUnitsCall(sourceAmount, sourceUnit, targetUnit, foodName, _callback);

    }

    /**
     * Convert Units
     * Convert units from one to another. The API returns the amount and the unit of the target unit.
     * @param sourceAmount The source amount. (required)
     * @param sourceUnit The source unit. (required)
     * @param targetUnit The unit to which should be converted. (required)
     * @param foodName An optional food name. For converting foods the food is relevant as they have different densities. (optional)
     * @return ConvertUnits200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/convert-units-api/">Convert Units Documentation</a>
     */
    public ConvertUnits200Response convertUnits(Double sourceAmount, String sourceUnit, String targetUnit, String foodName) throws ApiException {
        ApiResponse<ConvertUnits200Response> localVarResp = convertUnitsWithHttpInfo(sourceAmount, sourceUnit, targetUnit, foodName);
        return localVarResp.getData();
    }

    /**
     * Convert Units
     * Convert units from one to another. The API returns the amount and the unit of the target unit.
     * @param sourceAmount The source amount. (required)
     * @param sourceUnit The source unit. (required)
     * @param targetUnit The unit to which should be converted. (required)
     * @param foodName An optional food name. For converting foods the food is relevant as they have different densities. (optional)
     * @return ApiResponse&lt;ConvertUnits200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/convert-units-api/">Convert Units Documentation</a>
     */
    public ApiResponse<ConvertUnits200Response> convertUnitsWithHttpInfo(Double sourceAmount, String sourceUnit, String targetUnit, String foodName) throws ApiException {
        okhttp3.Call localVarCall = convertUnitsValidateBeforeCall(sourceAmount, sourceUnit, targetUnit, foodName, null);
        Type localVarReturnType = new TypeToken<ConvertUnits200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert Units (asynchronously)
     * Convert units from one to another. The API returns the amount and the unit of the target unit.
     * @param sourceAmount The source amount. (required)
     * @param sourceUnit The source unit. (required)
     * @param targetUnit The unit to which should be converted. (required)
     * @param foodName An optional food name. For converting foods the food is relevant as they have different densities. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/convert-units-api/">Convert Units Documentation</a>
     */
    public okhttp3.Call convertUnitsAsync(Double sourceAmount, String sourceUnit, String targetUnit, String foodName, final ApiCallback<ConvertUnits200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertUnitsValidateBeforeCall(sourceAmount, sourceUnit, targetUnit, foodName, _callback);
        Type localVarReturnType = new TypeToken<ConvertUnits200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
