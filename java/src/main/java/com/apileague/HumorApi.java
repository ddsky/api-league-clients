/*
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apileague;

import com.apileague.client.ApiCallback;
import com.apileague.client.ApiClient;
import com.apileague.client.ApiException;
import com.apileague.client.ApiResponse;
import com.apileague.client.Configuration;
import com.apileague.client.Pair;
import com.apileague.client.ProgressRequestBody;
import com.apileague.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.apileague.client.model.GenerateNonsenseWord200Response;
import com.apileague.client.model.RandomMeme200Response;
import com.apileague.client.model.SearchGifs200Response;
import com.apileague.client.model.SearchJokes200Response;
import com.apileague.client.model.SearchJokes200ResponseJokesInner;
import com.apileague.client.model.SearchMemes200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HumorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HumorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HumorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for generateNonsenseWord
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/generate-nonsense-word-api/">Generate Nonsense Word Documentation</a>
     */
    public okhttp3.Call generateNonsenseWordCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/generate-nonsense-word";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateNonsenseWordValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return generateNonsenseWordCall(_callback);

    }

    /**
     * Generate Nonsense Word
     * Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
     * @return GenerateNonsenseWord200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/generate-nonsense-word-api/">Generate Nonsense Word Documentation</a>
     */
    public GenerateNonsenseWord200Response generateNonsenseWord() throws ApiException {
        ApiResponse<GenerateNonsenseWord200Response> localVarResp = generateNonsenseWordWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Generate Nonsense Word
     * Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
     * @return ApiResponse&lt;GenerateNonsenseWord200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/generate-nonsense-word-api/">Generate Nonsense Word Documentation</a>
     */
    public ApiResponse<GenerateNonsenseWord200Response> generateNonsenseWordWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = generateNonsenseWordValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GenerateNonsenseWord200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Nonsense Word (asynchronously)
     * Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/generate-nonsense-word-api/">Generate Nonsense Word Documentation</a>
     */
    public okhttp3.Call generateNonsenseWordAsync(final ApiCallback<GenerateNonsenseWord200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateNonsenseWordValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GenerateNonsenseWord200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for randomJoke
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/random-joke-api/">Random Joke Documentation</a>
     */
    public okhttp3.Call randomJokeCall(String includeTags, String excludeTags, Double minRating, Integer maxLength, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retrieve-random-joke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-tags", includeTags));
        }

        if (excludeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude-tags", excludeTags));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-rating", minRating));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-length", maxLength));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call randomJokeValidateBeforeCall(String includeTags, String excludeTags, Double minRating, Integer maxLength, final ApiCallback _callback) throws ApiException {
        return randomJokeCall(includeTags, excludeTags, minRating, maxLength, _callback);

    }

    /**
     * Random Joke
     * This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @return SearchJokes200ResponseJokesInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/random-joke-api/">Random Joke Documentation</a>
     */
    public SearchJokes200ResponseJokesInner randomJoke(String includeTags, String excludeTags, Double minRating, Integer maxLength) throws ApiException {
        ApiResponse<SearchJokes200ResponseJokesInner> localVarResp = randomJokeWithHttpInfo(includeTags, excludeTags, minRating, maxLength);
        return localVarResp.getData();
    }

    /**
     * Random Joke
     * This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @return ApiResponse&lt;SearchJokes200ResponseJokesInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/random-joke-api/">Random Joke Documentation</a>
     */
    public ApiResponse<SearchJokes200ResponseJokesInner> randomJokeWithHttpInfo(String includeTags, String excludeTags, Double minRating, Integer maxLength) throws ApiException {
        okhttp3.Call localVarCall = randomJokeValidateBeforeCall(includeTags, excludeTags, minRating, maxLength, null);
        Type localVarReturnType = new TypeToken<SearchJokes200ResponseJokesInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Random Joke (asynchronously)
     * This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/random-joke-api/">Random Joke Documentation</a>
     */
    public okhttp3.Call randomJokeAsync(String includeTags, String excludeTags, Double minRating, Integer maxLength, final ApiCallback<SearchJokes200ResponseJokesInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = randomJokeValidateBeforeCall(includeTags, excludeTags, minRating, maxLength, _callback);
        Type localVarReturnType = new TypeToken<SearchJokes200ResponseJokesInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for randomMeme
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/random-meme-api/">Random Meme Documentation</a>
     */
    public okhttp3.Call randomMemeCall(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/retrieve-random-meme";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords", keywords));
        }

        if (keywordsInImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords-in-image", keywordsInImage));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media-type", mediaType));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-rating", minRating));
        }

        if (maxAgeDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-age-days", maxAgeDays));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call randomMemeValidateBeforeCall(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays, final ApiCallback _callback) throws ApiException {
        return randomMemeCall(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, _callback);

    }

    /**
     * Random Meme
     * Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @return RandomMeme200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/random-meme-api/">Random Meme Documentation</a>
     */
    public RandomMeme200Response randomMeme(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays) throws ApiException {
        ApiResponse<RandomMeme200Response> localVarResp = randomMemeWithHttpInfo(keywords, keywordsInImage, mediaType, minRating, maxAgeDays);
        return localVarResp.getData();
    }

    /**
     * Random Meme
     * Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @return ApiResponse&lt;RandomMeme200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/random-meme-api/">Random Meme Documentation</a>
     */
    public ApiResponse<RandomMeme200Response> randomMemeWithHttpInfo(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays) throws ApiException {
        okhttp3.Call localVarCall = randomMemeValidateBeforeCall(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, null);
        Type localVarReturnType = new TypeToken<RandomMeme200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Random Meme (asynchronously)
     * Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/random-meme-api/">Random Meme Documentation</a>
     */
    public okhttp3.Call randomMemeAsync(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays, final ApiCallback<RandomMeme200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = randomMemeValidateBeforeCall(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, _callback);
        Type localVarReturnType = new TypeToken<RandomMeme200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchGifs
     * @param query The search query. (required)
     * @param number The number of gifs to return in range [1,10] (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-gifs-api/">Search Gifs Documentation</a>
     */
    public okhttp3.Call searchGifsCall(String query, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search-gifs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchGifsValidateBeforeCall(String query, Integer number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchGifs(Async)");
        }

        return searchGifsCall(query, number, _callback);

    }

    /**
     * Search Gifs
     * Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
     * @param query The search query. (required)
     * @param number The number of gifs to return in range [1,10] (optional)
     * @return SearchGifs200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-gifs-api/">Search Gifs Documentation</a>
     */
    public SearchGifs200Response searchGifs(String query, Integer number) throws ApiException {
        ApiResponse<SearchGifs200Response> localVarResp = searchGifsWithHttpInfo(query, number);
        return localVarResp.getData();
    }

    /**
     * Search Gifs
     * Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
     * @param query The search query. (required)
     * @param number The number of gifs to return in range [1,10] (optional)
     * @return ApiResponse&lt;SearchGifs200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-gifs-api/">Search Gifs Documentation</a>
     */
    public ApiResponse<SearchGifs200Response> searchGifsWithHttpInfo(String query, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchGifsValidateBeforeCall(query, number, null);
        Type localVarReturnType = new TypeToken<SearchGifs200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Gifs (asynchronously)
     * Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
     * @param query The search query. (required)
     * @param number The number of gifs to return in range [1,10] (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-gifs-api/">Search Gifs Documentation</a>
     */
    public okhttp3.Call searchGifsAsync(String query, Integer number, final ApiCallback<SearchGifs200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchGifsValidateBeforeCall(query, number, _callback);
        Type localVarReturnType = new TypeToken<SearchGifs200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchJokes
     * @param keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param number The number of jokes, between 1 and 10. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-jokes-api/">Search Jokes Documentation</a>
     */
    public okhttp3.Call searchJokesCall(String keywords, String includeTags, String excludeTags, Double minRating, Double maxLength, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search-jokes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords", keywords));
        }

        if (includeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include-tags", includeTags));
        }

        if (excludeTags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exclude-tags", excludeTags));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-rating", minRating));
        }

        if (maxLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-length", maxLength));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchJokesValidateBeforeCall(String keywords, String includeTags, String excludeTags, Double minRating, Double maxLength, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        return searchJokesCall(keywords, includeTags, excludeTags, minRating, maxLength, offset, number, _callback);

    }

    /**
     * Search Jokes
     * With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
     * @param keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param number The number of jokes, between 1 and 10. (optional)
     * @return SearchJokes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-jokes-api/">Search Jokes Documentation</a>
     */
    public SearchJokes200Response searchJokes(String keywords, String includeTags, String excludeTags, Double minRating, Double maxLength, Integer offset, Integer number) throws ApiException {
        ApiResponse<SearchJokes200Response> localVarResp = searchJokesWithHttpInfo(keywords, includeTags, excludeTags, minRating, maxLength, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Jokes
     * With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
     * @param keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param number The number of jokes, between 1 and 10. (optional)
     * @return ApiResponse&lt;SearchJokes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-jokes-api/">Search Jokes Documentation</a>
     */
    public ApiResponse<SearchJokes200Response> searchJokesWithHttpInfo(String keywords, String includeTags, String excludeTags, Double minRating, Double maxLength, Integer offset, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchJokesValidateBeforeCall(keywords, includeTags, excludeTags, minRating, maxLength, offset, number, null);
        Type localVarReturnType = new TypeToken<SearchJokes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Jokes (asynchronously)
     * With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
     * @param keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param number The number of jokes, between 1 and 10. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-jokes-api/">Search Jokes Documentation</a>
     */
    public okhttp3.Call searchJokesAsync(String keywords, String includeTags, String excludeTags, Double minRating, Double maxLength, Integer offset, Integer number, final ApiCallback<SearchJokes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchJokesValidateBeforeCall(keywords, includeTags, excludeTags, minRating, maxLength, offset, number, _callback);
        Type localVarReturnType = new TypeToken<SearchJokes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchMemes
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param offset The number of memes to skip, between 0 and 1000. (optional)
     * @param number The number of memes, between 1 and 10. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-memes-api/">Search Memes Documentation</a>
     */
    public okhttp3.Call searchMemesCall(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search-memes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (keywords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords", keywords));
        }

        if (keywordsInImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keywords-in-image", keywordsInImage));
        }

        if (mediaType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("media-type", mediaType));
        }

        if (minRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min-rating", minRating));
        }

        if (maxAgeDays != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max-age-days", maxAgeDays));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "headerApiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchMemesValidateBeforeCall(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays, Integer offset, Integer number, final ApiCallback _callback) throws ApiException {
        return searchMemesCall(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, offset, number, _callback);

    }

    /**
     * Search Memes
     * With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param offset The number of memes to skip, between 0 and 1000. (optional)
     * @param number The number of memes, between 1 and 10. (optional)
     * @return SearchMemes200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-memes-api/">Search Memes Documentation</a>
     */
    public SearchMemes200Response searchMemes(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays, Integer offset, Integer number) throws ApiException {
        ApiResponse<SearchMemes200Response> localVarResp = searchMemesWithHttpInfo(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, offset, number);
        return localVarResp.getData();
    }

    /**
     * Search Memes
     * With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param offset The number of memes to skip, between 0 and 1000. (optional)
     * @param number The number of memes, between 1 and 10. (optional)
     * @return ApiResponse&lt;SearchMemes200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-memes-api/">Search Memes Documentation</a>
     */
    public ApiResponse<SearchMemes200Response> searchMemesWithHttpInfo(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays, Integer offset, Integer number) throws ApiException {
        okhttp3.Call localVarCall = searchMemesValidateBeforeCall(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, offset, number, null);
        Type localVarReturnType = new TypeToken<SearchMemes200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search Memes (asynchronously)
     * With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param offset The number of memes to skip, between 0 and 1000. (optional)
     * @param number The number of memes, between 1 and 10. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Payment Required </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * Read entire docs
     * @see <a href="https://apileague.com/apis/search-memes-api/">Search Memes Documentation</a>
     */
    public okhttp3.Call searchMemesAsync(String keywords, Boolean keywordsInImage, String mediaType, Double minRating, Integer maxAgeDays, Integer offset, Integer number, final ApiCallback<SearchMemes200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchMemesValidateBeforeCall(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, offset, number, _callback);
        Type localVarReturnType = new TypeToken<SearchMemes200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
