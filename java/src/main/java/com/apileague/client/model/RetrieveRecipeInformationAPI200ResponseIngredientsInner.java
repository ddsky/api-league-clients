/*
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apileague.client.model;

import java.util.Objects;
import com.apileague.client.model.RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.apileague.client.JSON;

/**
 * RetrieveRecipeInformationAPI200ResponseIngredientsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0-SNAPSHOT")
public class RetrieveRecipeInformationAPI200ResponseIngredientsInner {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_NAME_CLEAN = "name_clean";
  @SerializedName(SERIALIZED_NAME_NAME_CLEAN)
  private String nameClean;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_MEASURES = "measures";
  @SerializedName(SERIALIZED_NAME_MEASURES)
  private RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures measures;

  public static final String SERIALIZED_NAME_ORIGINAL = "original";
  @SerializedName(SERIALIZED_NAME_ORIGINAL)
  private String original;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private List<String> meta = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORIGINAL_NAME = "original_name";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_NAME)
  private String originalName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_AISLE = "aisle";
  @SerializedName(SERIALIZED_NAME_AISLE)
  private String aisle;

  public static final String SERIALIZED_NAME_CONSISTENCY = "consistency";
  @SerializedName(SERIALIZED_NAME_CONSISTENCY)
  private String consistency;

  public RetrieveRecipeInformationAPI200ResponseIngredientsInner() {
  }

  public RetrieveRecipeInformationAPI200ResponseIngredientsInner image(String image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner nameClean(String nameClean) {
    this.nameClean = nameClean;
    return this;
  }

  /**
   * Get nameClean
   * @return nameClean
   */
  @javax.annotation.Nullable
  public String getNameClean() {
    return nameClean;
  }

  public void setNameClean(String nameClean) {
    this.nameClean = nameClean;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Get amount
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner measures(RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures measures) {
    this.measures = measures;
    return this;
  }

  /**
   * Get measures
   * @return measures
   */
  @javax.annotation.Nullable
  public RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures getMeasures() {
    return measures;
  }

  public void setMeasures(RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures measures) {
    this.measures = measures;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner original(String original) {
    this.original = original;
    return this;
  }

  /**
   * Get original
   * @return original
   */
  @javax.annotation.Nullable
  public String getOriginal() {
    return original;
  }

  public void setOriginal(String original) {
    this.original = original;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner meta(List<String> meta) {
    this.meta = meta;
    return this;
  }

  public RetrieveRecipeInformationAPI200ResponseIngredientsInner addMetaItem(String metaItem) {
    if (this.meta == null) {
      this.meta = new ArrayList<>();
    }
    this.meta.add(metaItem);
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nullable
  public List<String> getMeta() {
    return meta;
  }

  public void setMeta(List<String> meta) {
    this.meta = meta;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner originalName(String originalName) {
    this.originalName = originalName;
    return this;
  }

  /**
   * Get originalName
   * @return originalName
   */
  @javax.annotation.Nullable
  public String getOriginalName() {
    return originalName;
  }

  public void setOriginalName(String originalName) {
    this.originalName = originalName;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner aisle(String aisle) {
    this.aisle = aisle;
    return this;
  }

  /**
   * Get aisle
   * @return aisle
   */
  @javax.annotation.Nullable
  public String getAisle() {
    return aisle;
  }

  public void setAisle(String aisle) {
    this.aisle = aisle;
  }


  public RetrieveRecipeInformationAPI200ResponseIngredientsInner consistency(String consistency) {
    this.consistency = consistency;
    return this;
  }

  /**
   * Get consistency
   * @return consistency
   */
  @javax.annotation.Nullable
  public String getConsistency() {
    return consistency;
  }

  public void setConsistency(String consistency) {
    this.consistency = consistency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveRecipeInformationAPI200ResponseIngredientsInner retrieveRecipeInformationAPI200ResponseIngredientsInner = (RetrieveRecipeInformationAPI200ResponseIngredientsInner) o;
    return Objects.equals(this.image, retrieveRecipeInformationAPI200ResponseIngredientsInner.image) &&
        Objects.equals(this.nameClean, retrieveRecipeInformationAPI200ResponseIngredientsInner.nameClean) &&
        Objects.equals(this.amount, retrieveRecipeInformationAPI200ResponseIngredientsInner.amount) &&
        Objects.equals(this.unit, retrieveRecipeInformationAPI200ResponseIngredientsInner.unit) &&
        Objects.equals(this.measures, retrieveRecipeInformationAPI200ResponseIngredientsInner.measures) &&
        Objects.equals(this.original, retrieveRecipeInformationAPI200ResponseIngredientsInner.original) &&
        Objects.equals(this.meta, retrieveRecipeInformationAPI200ResponseIngredientsInner.meta) &&
        Objects.equals(this.originalName, retrieveRecipeInformationAPI200ResponseIngredientsInner.originalName) &&
        Objects.equals(this.name, retrieveRecipeInformationAPI200ResponseIngredientsInner.name) &&
        Objects.equals(this.id, retrieveRecipeInformationAPI200ResponseIngredientsInner.id) &&
        Objects.equals(this.aisle, retrieveRecipeInformationAPI200ResponseIngredientsInner.aisle) &&
        Objects.equals(this.consistency, retrieveRecipeInformationAPI200ResponseIngredientsInner.consistency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, nameClean, amount, unit, measures, original, meta, originalName, name, id, aisle, consistency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveRecipeInformationAPI200ResponseIngredientsInner {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    nameClean: ").append(toIndentedString(nameClean)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    measures: ").append(toIndentedString(measures)).append("\n");
    sb.append("    original: ").append(toIndentedString(original)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    originalName: ").append(toIndentedString(originalName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    aisle: ").append(toIndentedString(aisle)).append("\n");
    sb.append("    consistency: ").append(toIndentedString(consistency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("image");
    openapiFields.add("name_clean");
    openapiFields.add("amount");
    openapiFields.add("unit");
    openapiFields.add("measures");
    openapiFields.add("original");
    openapiFields.add("meta");
    openapiFields.add("original_name");
    openapiFields.add("name");
    openapiFields.add("id");
    openapiFields.add("aisle");
    openapiFields.add("consistency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RetrieveRecipeInformationAPI200ResponseIngredientsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrieveRecipeInformationAPI200ResponseIngredientsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveRecipeInformationAPI200ResponseIngredientsInner is not found in the empty JSON string", RetrieveRecipeInformationAPI200ResponseIngredientsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrieveRecipeInformationAPI200ResponseIngredientsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveRecipeInformationAPI200ResponseIngredientsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) && !jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if ((jsonObj.get("name_clean") != null && !jsonObj.get("name_clean").isJsonNull()) && !jsonObj.get("name_clean").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name_clean` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name_clean").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
      // validate the optional field `measures`
      if (jsonObj.get("measures") != null && !jsonObj.get("measures").isJsonNull()) {
        RetrieveRecipeInformationAPI200ResponseIngredientsInnerMeasures.validateJsonElement(jsonObj.get("measures"));
      }
      if ((jsonObj.get("original") != null && !jsonObj.get("original").isJsonNull()) && !jsonObj.get("original").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("meta") != null && !jsonObj.get("meta").isJsonNull() && !jsonObj.get("meta").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta` to be an array in the JSON string but got `%s`", jsonObj.get("meta").toString()));
      }
      if ((jsonObj.get("original_name") != null && !jsonObj.get("original_name").isJsonNull()) && !jsonObj.get("original_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("aisle") != null && !jsonObj.get("aisle").isJsonNull()) && !jsonObj.get("aisle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aisle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aisle").toString()));
      }
      if ((jsonObj.get("consistency") != null && !jsonObj.get("consistency").isJsonNull()) && !jsonObj.get("consistency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consistency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consistency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveRecipeInformationAPI200ResponseIngredientsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveRecipeInformationAPI200ResponseIngredientsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveRecipeInformationAPI200ResponseIngredientsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveRecipeInformationAPI200ResponseIngredientsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveRecipeInformationAPI200ResponseIngredientsInner>() {
           @Override
           public void write(JsonWriter out, RetrieveRecipeInformationAPI200ResponseIngredientsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveRecipeInformationAPI200ResponseIngredientsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RetrieveRecipeInformationAPI200ResponseIngredientsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RetrieveRecipeInformationAPI200ResponseIngredientsInner
   * @throws IOException if the JSON string is invalid with respect to RetrieveRecipeInformationAPI200ResponseIngredientsInner
   */
  public static RetrieveRecipeInformationAPI200ResponseIngredientsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveRecipeInformationAPI200ResponseIngredientsInner.class);
  }

  /**
   * Convert an instance of RetrieveRecipeInformationAPI200ResponseIngredientsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

