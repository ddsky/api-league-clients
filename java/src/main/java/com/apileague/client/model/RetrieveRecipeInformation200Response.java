/*
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apileague.client.model;

import java.util.Objects;
import com.apileague.client.model.RetrieveRecipeInformation200ResponseCredits;
import com.apileague.client.model.RetrieveRecipeInformation200ResponseDietaryProperties;
import com.apileague.client.model.RetrieveRecipeInformation200ResponseIngredientsInner;
import com.apileague.client.model.RetrieveRecipeInformation200ResponseInstructionsInner;
import com.apileague.client.model.RetrieveRecipeInformation200ResponseNutrition;
import com.apileague.client.model.RetrieveRecipeInformation200ResponseScores;
import com.apileague.client.model.RetrieveRecipeInformation200ResponseTaste;
import com.apileague.client.model.RetrieveRecipeInformation200ResponseTimes;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.apileague.client.JSON;

/**
 * RetrieveRecipeInformation200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.5.0")
public class RetrieveRecipeInformation200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_SERVINGS = "servings";
  @SerializedName(SERIALIZED_NAME_SERVINGS)
  private Integer servings;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<String> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIETARY_PROPERTIES = "dietary_properties";
  @SerializedName(SERIALIZED_NAME_DIETARY_PROPERTIES)
  private RetrieveRecipeInformation200ResponseDietaryProperties dietaryProperties;

  public static final String SERIALIZED_NAME_PRICE_PER_SERVING = "price_per_serving";
  @SerializedName(SERIALIZED_NAME_PRICE_PER_SERVING)
  private BigDecimal pricePerServing;

  public static final String SERIALIZED_NAME_TIMES = "times";
  @SerializedName(SERIALIZED_NAME_TIMES)
  private RetrieveRecipeInformation200ResponseTimes times;

  public static final String SERIALIZED_NAME_NUTRITION = "nutrition";
  @SerializedName(SERIALIZED_NAME_NUTRITION)
  private RetrieveRecipeInformation200ResponseNutrition nutrition;

  public static final String SERIALIZED_NAME_TASTE = "taste";
  @SerializedName(SERIALIZED_NAME_TASTE)
  private RetrieveRecipeInformation200ResponseTaste taste;

  public static final String SERIALIZED_NAME_CUISINES = "cuisines";
  @SerializedName(SERIALIZED_NAME_CUISINES)
  private List<String> cuisines = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEAL_TYPES = "meal_types";
  @SerializedName(SERIALIZED_NAME_MEAL_TYPES)
  private List<String> mealTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_OCCASIONS = "occasions";
  @SerializedName(SERIALIZED_NAME_OCCASIONS)
  private List<String> occasions = new ArrayList<>();

  public static final String SERIALIZED_NAME_INGREDIENTS = "ingredients";
  @SerializedName(SERIALIZED_NAME_INGREDIENTS)
  private List<RetrieveRecipeInformation200ResponseIngredientsInner> ingredients = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private List<RetrieveRecipeInformation200ResponseInstructionsInner> instructions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREDITS = "credits";
  @SerializedName(SERIALIZED_NAME_CREDITS)
  private RetrieveRecipeInformation200ResponseCredits credits;

  public static final String SERIALIZED_NAME_SCORES = "scores";
  @SerializedName(SERIALIZED_NAME_SCORES)
  private RetrieveRecipeInformation200ResponseScores scores;

  public RetrieveRecipeInformation200Response() {
  }

  public RetrieveRecipeInformation200Response id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public RetrieveRecipeInformation200Response title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public RetrieveRecipeInformation200Response servings(Integer servings) {
    this.servings = servings;
    return this;
  }

   /**
   * Get servings
   * @return servings
  **/
  @javax.annotation.Nullable
  public Integer getServings() {
    return servings;
  }

  public void setServings(Integer servings) {
    this.servings = servings;
  }


  public RetrieveRecipeInformation200Response images(List<String> images) {
    this.images = images;
    return this;
  }

  public RetrieveRecipeInformation200Response addImagesItem(String imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  public List<String> getImages() {
    return images;
  }

  public void setImages(List<String> images) {
    this.images = images;
  }


  public RetrieveRecipeInformation200Response dietaryProperties(RetrieveRecipeInformation200ResponseDietaryProperties dietaryProperties) {
    this.dietaryProperties = dietaryProperties;
    return this;
  }

   /**
   * Get dietaryProperties
   * @return dietaryProperties
  **/
  @javax.annotation.Nullable
  public RetrieveRecipeInformation200ResponseDietaryProperties getDietaryProperties() {
    return dietaryProperties;
  }

  public void setDietaryProperties(RetrieveRecipeInformation200ResponseDietaryProperties dietaryProperties) {
    this.dietaryProperties = dietaryProperties;
  }


  public RetrieveRecipeInformation200Response pricePerServing(BigDecimal pricePerServing) {
    this.pricePerServing = pricePerServing;
    return this;
  }

   /**
   * Get pricePerServing
   * @return pricePerServing
  **/
  @javax.annotation.Nullable
  public BigDecimal getPricePerServing() {
    return pricePerServing;
  }

  public void setPricePerServing(BigDecimal pricePerServing) {
    this.pricePerServing = pricePerServing;
  }


  public RetrieveRecipeInformation200Response times(RetrieveRecipeInformation200ResponseTimes times) {
    this.times = times;
    return this;
  }

   /**
   * Get times
   * @return times
  **/
  @javax.annotation.Nullable
  public RetrieveRecipeInformation200ResponseTimes getTimes() {
    return times;
  }

  public void setTimes(RetrieveRecipeInformation200ResponseTimes times) {
    this.times = times;
  }


  public RetrieveRecipeInformation200Response nutrition(RetrieveRecipeInformation200ResponseNutrition nutrition) {
    this.nutrition = nutrition;
    return this;
  }

   /**
   * Get nutrition
   * @return nutrition
  **/
  @javax.annotation.Nullable
  public RetrieveRecipeInformation200ResponseNutrition getNutrition() {
    return nutrition;
  }

  public void setNutrition(RetrieveRecipeInformation200ResponseNutrition nutrition) {
    this.nutrition = nutrition;
  }


  public RetrieveRecipeInformation200Response taste(RetrieveRecipeInformation200ResponseTaste taste) {
    this.taste = taste;
    return this;
  }

   /**
   * Get taste
   * @return taste
  **/
  @javax.annotation.Nullable
  public RetrieveRecipeInformation200ResponseTaste getTaste() {
    return taste;
  }

  public void setTaste(RetrieveRecipeInformation200ResponseTaste taste) {
    this.taste = taste;
  }


  public RetrieveRecipeInformation200Response cuisines(List<String> cuisines) {
    this.cuisines = cuisines;
    return this;
  }

  public RetrieveRecipeInformation200Response addCuisinesItem(String cuisinesItem) {
    if (this.cuisines == null) {
      this.cuisines = new ArrayList<>();
    }
    this.cuisines.add(cuisinesItem);
    return this;
  }

   /**
   * Get cuisines
   * @return cuisines
  **/
  @javax.annotation.Nullable
  public List<String> getCuisines() {
    return cuisines;
  }

  public void setCuisines(List<String> cuisines) {
    this.cuisines = cuisines;
  }


  public RetrieveRecipeInformation200Response mealTypes(List<String> mealTypes) {
    this.mealTypes = mealTypes;
    return this;
  }

  public RetrieveRecipeInformation200Response addMealTypesItem(String mealTypesItem) {
    if (this.mealTypes == null) {
      this.mealTypes = new ArrayList<>();
    }
    this.mealTypes.add(mealTypesItem);
    return this;
  }

   /**
   * Get mealTypes
   * @return mealTypes
  **/
  @javax.annotation.Nullable
  public List<String> getMealTypes() {
    return mealTypes;
  }

  public void setMealTypes(List<String> mealTypes) {
    this.mealTypes = mealTypes;
  }


  public RetrieveRecipeInformation200Response occasions(List<String> occasions) {
    this.occasions = occasions;
    return this;
  }

  public RetrieveRecipeInformation200Response addOccasionsItem(String occasionsItem) {
    if (this.occasions == null) {
      this.occasions = new ArrayList<>();
    }
    this.occasions.add(occasionsItem);
    return this;
  }

   /**
   * Get occasions
   * @return occasions
  **/
  @javax.annotation.Nullable
  public List<String> getOccasions() {
    return occasions;
  }

  public void setOccasions(List<String> occasions) {
    this.occasions = occasions;
  }


  public RetrieveRecipeInformation200Response ingredients(List<RetrieveRecipeInformation200ResponseIngredientsInner> ingredients) {
    this.ingredients = ingredients;
    return this;
  }

  public RetrieveRecipeInformation200Response addIngredientsItem(RetrieveRecipeInformation200ResponseIngredientsInner ingredientsItem) {
    if (this.ingredients == null) {
      this.ingredients = new ArrayList<>();
    }
    this.ingredients.add(ingredientsItem);
    return this;
  }

   /**
   * Get ingredients
   * @return ingredients
  **/
  @javax.annotation.Nullable
  public List<RetrieveRecipeInformation200ResponseIngredientsInner> getIngredients() {
    return ingredients;
  }

  public void setIngredients(List<RetrieveRecipeInformation200ResponseIngredientsInner> ingredients) {
    this.ingredients = ingredients;
  }


  public RetrieveRecipeInformation200Response instructions(List<RetrieveRecipeInformation200ResponseInstructionsInner> instructions) {
    this.instructions = instructions;
    return this;
  }

  public RetrieveRecipeInformation200Response addInstructionsItem(RetrieveRecipeInformation200ResponseInstructionsInner instructionsItem) {
    if (this.instructions == null) {
      this.instructions = new ArrayList<>();
    }
    this.instructions.add(instructionsItem);
    return this;
  }

   /**
   * Get instructions
   * @return instructions
  **/
  @javax.annotation.Nullable
  public List<RetrieveRecipeInformation200ResponseInstructionsInner> getInstructions() {
    return instructions;
  }

  public void setInstructions(List<RetrieveRecipeInformation200ResponseInstructionsInner> instructions) {
    this.instructions = instructions;
  }


  public RetrieveRecipeInformation200Response credits(RetrieveRecipeInformation200ResponseCredits credits) {
    this.credits = credits;
    return this;
  }

   /**
   * Get credits
   * @return credits
  **/
  @javax.annotation.Nullable
  public RetrieveRecipeInformation200ResponseCredits getCredits() {
    return credits;
  }

  public void setCredits(RetrieveRecipeInformation200ResponseCredits credits) {
    this.credits = credits;
  }


  public RetrieveRecipeInformation200Response scores(RetrieveRecipeInformation200ResponseScores scores) {
    this.scores = scores;
    return this;
  }

   /**
   * Get scores
   * @return scores
  **/
  @javax.annotation.Nullable
  public RetrieveRecipeInformation200ResponseScores getScores() {
    return scores;
  }

  public void setScores(RetrieveRecipeInformation200ResponseScores scores) {
    this.scores = scores;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetrieveRecipeInformation200Response retrieveRecipeInformation200Response = (RetrieveRecipeInformation200Response) o;
    return Objects.equals(this.id, retrieveRecipeInformation200Response.id) &&
        Objects.equals(this.title, retrieveRecipeInformation200Response.title) &&
        Objects.equals(this.servings, retrieveRecipeInformation200Response.servings) &&
        Objects.equals(this.images, retrieveRecipeInformation200Response.images) &&
        Objects.equals(this.dietaryProperties, retrieveRecipeInformation200Response.dietaryProperties) &&
        Objects.equals(this.pricePerServing, retrieveRecipeInformation200Response.pricePerServing) &&
        Objects.equals(this.times, retrieveRecipeInformation200Response.times) &&
        Objects.equals(this.nutrition, retrieveRecipeInformation200Response.nutrition) &&
        Objects.equals(this.taste, retrieveRecipeInformation200Response.taste) &&
        Objects.equals(this.cuisines, retrieveRecipeInformation200Response.cuisines) &&
        Objects.equals(this.mealTypes, retrieveRecipeInformation200Response.mealTypes) &&
        Objects.equals(this.occasions, retrieveRecipeInformation200Response.occasions) &&
        Objects.equals(this.ingredients, retrieveRecipeInformation200Response.ingredients) &&
        Objects.equals(this.instructions, retrieveRecipeInformation200Response.instructions) &&
        Objects.equals(this.credits, retrieveRecipeInformation200Response.credits) &&
        Objects.equals(this.scores, retrieveRecipeInformation200Response.scores);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, servings, images, dietaryProperties, pricePerServing, times, nutrition, taste, cuisines, mealTypes, occasions, ingredients, instructions, credits, scores);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetrieveRecipeInformation200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    servings: ").append(toIndentedString(servings)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    dietaryProperties: ").append(toIndentedString(dietaryProperties)).append("\n");
    sb.append("    pricePerServing: ").append(toIndentedString(pricePerServing)).append("\n");
    sb.append("    times: ").append(toIndentedString(times)).append("\n");
    sb.append("    nutrition: ").append(toIndentedString(nutrition)).append("\n");
    sb.append("    taste: ").append(toIndentedString(taste)).append("\n");
    sb.append("    cuisines: ").append(toIndentedString(cuisines)).append("\n");
    sb.append("    mealTypes: ").append(toIndentedString(mealTypes)).append("\n");
    sb.append("    occasions: ").append(toIndentedString(occasions)).append("\n");
    sb.append("    ingredients: ").append(toIndentedString(ingredients)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    credits: ").append(toIndentedString(credits)).append("\n");
    sb.append("    scores: ").append(toIndentedString(scores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("servings");
    openapiFields.add("images");
    openapiFields.add("dietary_properties");
    openapiFields.add("price_per_serving");
    openapiFields.add("times");
    openapiFields.add("nutrition");
    openapiFields.add("taste");
    openapiFields.add("cuisines");
    openapiFields.add("meal_types");
    openapiFields.add("occasions");
    openapiFields.add("ingredients");
    openapiFields.add("instructions");
    openapiFields.add("credits");
    openapiFields.add("scores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RetrieveRecipeInformation200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RetrieveRecipeInformation200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RetrieveRecipeInformation200Response is not found in the empty JSON string", RetrieveRecipeInformation200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RetrieveRecipeInformation200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RetrieveRecipeInformation200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull() && !jsonObj.get("images").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
      }
      // validate the optional field `dietary_properties`
      if (jsonObj.get("dietary_properties") != null && !jsonObj.get("dietary_properties").isJsonNull()) {
        RetrieveRecipeInformation200ResponseDietaryProperties.validateJsonElement(jsonObj.get("dietary_properties"));
      }
      // validate the optional field `times`
      if (jsonObj.get("times") != null && !jsonObj.get("times").isJsonNull()) {
        RetrieveRecipeInformation200ResponseTimes.validateJsonElement(jsonObj.get("times"));
      }
      // validate the optional field `nutrition`
      if (jsonObj.get("nutrition") != null && !jsonObj.get("nutrition").isJsonNull()) {
        RetrieveRecipeInformation200ResponseNutrition.validateJsonElement(jsonObj.get("nutrition"));
      }
      // validate the optional field `taste`
      if (jsonObj.get("taste") != null && !jsonObj.get("taste").isJsonNull()) {
        RetrieveRecipeInformation200ResponseTaste.validateJsonElement(jsonObj.get("taste"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cuisines") != null && !jsonObj.get("cuisines").isJsonNull() && !jsonObj.get("cuisines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cuisines` to be an array in the JSON string but got `%s`", jsonObj.get("cuisines").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("meal_types") != null && !jsonObj.get("meal_types").isJsonNull() && !jsonObj.get("meal_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `meal_types` to be an array in the JSON string but got `%s`", jsonObj.get("meal_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("occasions") != null && !jsonObj.get("occasions").isJsonNull() && !jsonObj.get("occasions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `occasions` to be an array in the JSON string but got `%s`", jsonObj.get("occasions").toString()));
      }
      if (jsonObj.get("ingredients") != null && !jsonObj.get("ingredients").isJsonNull()) {
        JsonArray jsonArrayingredients = jsonObj.getAsJsonArray("ingredients");
        if (jsonArrayingredients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ingredients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ingredients` to be an array in the JSON string but got `%s`", jsonObj.get("ingredients").toString()));
          }

          // validate the optional field `ingredients` (array)
          for (int i = 0; i < jsonArrayingredients.size(); i++) {
            RetrieveRecipeInformation200ResponseIngredientsInner.validateJsonElement(jsonArrayingredients.get(i));
          };
        }
      }
      if (jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) {
        JsonArray jsonArrayinstructions = jsonObj.getAsJsonArray("instructions");
        if (jsonArrayinstructions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instructions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instructions` to be an array in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
          }

          // validate the optional field `instructions` (array)
          for (int i = 0; i < jsonArrayinstructions.size(); i++) {
            RetrieveRecipeInformation200ResponseInstructionsInner.validateJsonElement(jsonArrayinstructions.get(i));
          };
        }
      }
      // validate the optional field `credits`
      if (jsonObj.get("credits") != null && !jsonObj.get("credits").isJsonNull()) {
        RetrieveRecipeInformation200ResponseCredits.validateJsonElement(jsonObj.get("credits"));
      }
      // validate the optional field `scores`
      if (jsonObj.get("scores") != null && !jsonObj.get("scores").isJsonNull()) {
        RetrieveRecipeInformation200ResponseScores.validateJsonElement(jsonObj.get("scores"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RetrieveRecipeInformation200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RetrieveRecipeInformation200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RetrieveRecipeInformation200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RetrieveRecipeInformation200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<RetrieveRecipeInformation200Response>() {
           @Override
           public void write(JsonWriter out, RetrieveRecipeInformation200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RetrieveRecipeInformation200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RetrieveRecipeInformation200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RetrieveRecipeInformation200Response
  * @throws IOException if the JSON string is invalid with respect to RetrieveRecipeInformation200Response
  */
  public static RetrieveRecipeInformation200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RetrieveRecipeInformation200Response.class);
  }

 /**
  * Convert an instance of RetrieveRecipeInformation200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

