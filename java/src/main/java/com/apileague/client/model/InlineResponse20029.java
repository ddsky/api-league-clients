/*
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apileague.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * InlineResponse20029
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-26T23:39:54.793+01:00[Europe/Berlin]")
public class InlineResponse20029 {
  public static final String SERIALIZED_NAME_SPECIFIC_COLOR = "specific_color";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_COLOR)
  private String specificColor;

  public static final String SERIALIZED_NAME_MAIN_COLOR = "main_color";
  @SerializedName(SERIALIZED_NAME_MAIN_COLOR)
  private String mainColor;

  public static final String SERIALIZED_NAME_HEX_CODE = "hex_code";
  @SerializedName(SERIALIZED_NAME_HEX_CODE)
  private String hexCode;

  public InlineResponse20029() { 
  }

  public InlineResponse20029 specificColor(String specificColor) {
    
    this.specificColor = specificColor;
    return this;
  }

   /**
   * Get specificColor
   * @return specificColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSpecificColor() {
    return specificColor;
  }


  public void setSpecificColor(String specificColor) {
    this.specificColor = specificColor;
  }


  public InlineResponse20029 mainColor(String mainColor) {
    
    this.mainColor = mainColor;
    return this;
  }

   /**
   * Get mainColor
   * @return mainColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMainColor() {
    return mainColor;
  }


  public void setMainColor(String mainColor) {
    this.mainColor = mainColor;
  }


  public InlineResponse20029 hexCode(String hexCode) {
    
    this.hexCode = hexCode;
    return this;
  }

   /**
   * Get hexCode
   * @return hexCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getHexCode() {
    return hexCode;
  }


  public void setHexCode(String hexCode) {
    this.hexCode = hexCode;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineResponse20029 inlineResponse20029 = (InlineResponse20029) o;
    return Objects.equals(this.specificColor, inlineResponse20029.specificColor) &&
        Objects.equals(this.mainColor, inlineResponse20029.mainColor) &&
        Objects.equals(this.hexCode, inlineResponse20029.hexCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(specificColor, mainColor, hexCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineResponse20029 {\n");
    sb.append("    specificColor: ").append(toIndentedString(specificColor)).append("\n");
    sb.append("    mainColor: ").append(toIndentedString(mainColor)).append("\n");
    sb.append("    hexCode: ").append(toIndentedString(hexCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

