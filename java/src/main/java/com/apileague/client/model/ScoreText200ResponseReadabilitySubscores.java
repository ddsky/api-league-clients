/*
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apileague.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.apileague.client.JSON;

/**
 * ScoreText200ResponseReadabilitySubscores
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-14T17:14:09.298081600+01:00[Europe/Berlin]")
public class ScoreText200ResponseReadabilitySubscores {
  public static final String SERIALIZED_NAME_READING_TIME_SECONDS = "reading_time_seconds";
  @SerializedName(SERIALIZED_NAME_READING_TIME_SECONDS)
  private Integer readingTimeSeconds;

  public static final String SERIALIZED_NAME_FORCAST = "forcast";
  @SerializedName(SERIALIZED_NAME_FORCAST)
  private BigDecimal forcast;

  public static final String SERIALIZED_NAME_FLESCH = "flesch";
  @SerializedName(SERIALIZED_NAME_FLESCH)
  private BigDecimal flesch;

  public static final String SERIALIZED_NAME_SMOG = "smog";
  @SerializedName(SERIALIZED_NAME_SMOG)
  private BigDecimal smog;

  public static final String SERIALIZED_NAME_ARI = "ari";
  @SerializedName(SERIALIZED_NAME_ARI)
  private BigDecimal ari;

  public static final String SERIALIZED_NAME_LIX = "lix";
  @SerializedName(SERIALIZED_NAME_LIX)
  private BigDecimal lix;

  public static final String SERIALIZED_NAME_COLEMAN_LIAU = "coleman_liau";
  @SerializedName(SERIALIZED_NAME_COLEMAN_LIAU)
  private BigDecimal colemanLiau;

  public static final String SERIALIZED_NAME_KINCAID = "kincaid";
  @SerializedName(SERIALIZED_NAME_KINCAID)
  private BigDecimal kincaid;

  public static final String SERIALIZED_NAME_FOG = "fog";
  @SerializedName(SERIALIZED_NAME_FOG)
  private BigDecimal fog;

  public ScoreText200ResponseReadabilitySubscores() {
  }

  public ScoreText200ResponseReadabilitySubscores readingTimeSeconds(Integer readingTimeSeconds) {
    this.readingTimeSeconds = readingTimeSeconds;
    return this;
  }

   /**
   * Get readingTimeSeconds
   * @return readingTimeSeconds
  **/
  @javax.annotation.Nullable
  public Integer getReadingTimeSeconds() {
    return readingTimeSeconds;
  }

  public void setReadingTimeSeconds(Integer readingTimeSeconds) {
    this.readingTimeSeconds = readingTimeSeconds;
  }


  public ScoreText200ResponseReadabilitySubscores forcast(BigDecimal forcast) {
    this.forcast = forcast;
    return this;
  }

   /**
   * Get forcast
   * @return forcast
  **/
  @javax.annotation.Nullable
  public BigDecimal getForcast() {
    return forcast;
  }

  public void setForcast(BigDecimal forcast) {
    this.forcast = forcast;
  }


  public ScoreText200ResponseReadabilitySubscores flesch(BigDecimal flesch) {
    this.flesch = flesch;
    return this;
  }

   /**
   * Get flesch
   * @return flesch
  **/
  @javax.annotation.Nullable
  public BigDecimal getFlesch() {
    return flesch;
  }

  public void setFlesch(BigDecimal flesch) {
    this.flesch = flesch;
  }


  public ScoreText200ResponseReadabilitySubscores smog(BigDecimal smog) {
    this.smog = smog;
    return this;
  }

   /**
   * Get smog
   * @return smog
  **/
  @javax.annotation.Nullable
  public BigDecimal getSmog() {
    return smog;
  }

  public void setSmog(BigDecimal smog) {
    this.smog = smog;
  }


  public ScoreText200ResponseReadabilitySubscores ari(BigDecimal ari) {
    this.ari = ari;
    return this;
  }

   /**
   * Get ari
   * @return ari
  **/
  @javax.annotation.Nullable
  public BigDecimal getAri() {
    return ari;
  }

  public void setAri(BigDecimal ari) {
    this.ari = ari;
  }


  public ScoreText200ResponseReadabilitySubscores lix(BigDecimal lix) {
    this.lix = lix;
    return this;
  }

   /**
   * Get lix
   * @return lix
  **/
  @javax.annotation.Nullable
  public BigDecimal getLix() {
    return lix;
  }

  public void setLix(BigDecimal lix) {
    this.lix = lix;
  }


  public ScoreText200ResponseReadabilitySubscores colemanLiau(BigDecimal colemanLiau) {
    this.colemanLiau = colemanLiau;
    return this;
  }

   /**
   * Get colemanLiau
   * @return colemanLiau
  **/
  @javax.annotation.Nullable
  public BigDecimal getColemanLiau() {
    return colemanLiau;
  }

  public void setColemanLiau(BigDecimal colemanLiau) {
    this.colemanLiau = colemanLiau;
  }


  public ScoreText200ResponseReadabilitySubscores kincaid(BigDecimal kincaid) {
    this.kincaid = kincaid;
    return this;
  }

   /**
   * Get kincaid
   * @return kincaid
  **/
  @javax.annotation.Nullable
  public BigDecimal getKincaid() {
    return kincaid;
  }

  public void setKincaid(BigDecimal kincaid) {
    this.kincaid = kincaid;
  }


  public ScoreText200ResponseReadabilitySubscores fog(BigDecimal fog) {
    this.fog = fog;
    return this;
  }

   /**
   * Get fog
   * @return fog
  **/
  @javax.annotation.Nullable
  public BigDecimal getFog() {
    return fog;
  }

  public void setFog(BigDecimal fog) {
    this.fog = fog;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreText200ResponseReadabilitySubscores scoreText200ResponseReadabilitySubscores = (ScoreText200ResponseReadabilitySubscores) o;
    return Objects.equals(this.readingTimeSeconds, scoreText200ResponseReadabilitySubscores.readingTimeSeconds) &&
        Objects.equals(this.forcast, scoreText200ResponseReadabilitySubscores.forcast) &&
        Objects.equals(this.flesch, scoreText200ResponseReadabilitySubscores.flesch) &&
        Objects.equals(this.smog, scoreText200ResponseReadabilitySubscores.smog) &&
        Objects.equals(this.ari, scoreText200ResponseReadabilitySubscores.ari) &&
        Objects.equals(this.lix, scoreText200ResponseReadabilitySubscores.lix) &&
        Objects.equals(this.colemanLiau, scoreText200ResponseReadabilitySubscores.colemanLiau) &&
        Objects.equals(this.kincaid, scoreText200ResponseReadabilitySubscores.kincaid) &&
        Objects.equals(this.fog, scoreText200ResponseReadabilitySubscores.fog);
  }

  @Override
  public int hashCode() {
    return Objects.hash(readingTimeSeconds, forcast, flesch, smog, ari, lix, colemanLiau, kincaid, fog);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreText200ResponseReadabilitySubscores {\n");
    sb.append("    readingTimeSeconds: ").append(toIndentedString(readingTimeSeconds)).append("\n");
    sb.append("    forcast: ").append(toIndentedString(forcast)).append("\n");
    sb.append("    flesch: ").append(toIndentedString(flesch)).append("\n");
    sb.append("    smog: ").append(toIndentedString(smog)).append("\n");
    sb.append("    ari: ").append(toIndentedString(ari)).append("\n");
    sb.append("    lix: ").append(toIndentedString(lix)).append("\n");
    sb.append("    colemanLiau: ").append(toIndentedString(colemanLiau)).append("\n");
    sb.append("    kincaid: ").append(toIndentedString(kincaid)).append("\n");
    sb.append("    fog: ").append(toIndentedString(fog)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reading_time_seconds");
    openapiFields.add("forcast");
    openapiFields.add("flesch");
    openapiFields.add("smog");
    openapiFields.add("ari");
    openapiFields.add("lix");
    openapiFields.add("coleman_liau");
    openapiFields.add("kincaid");
    openapiFields.add("fog");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ScoreText200ResponseReadabilitySubscores
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreText200ResponseReadabilitySubscores.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreText200ResponseReadabilitySubscores is not found in the empty JSON string", ScoreText200ResponseReadabilitySubscores.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreText200ResponseReadabilitySubscores.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreText200ResponseReadabilitySubscores` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreText200ResponseReadabilitySubscores.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreText200ResponseReadabilitySubscores' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreText200ResponseReadabilitySubscores> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreText200ResponseReadabilitySubscores.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreText200ResponseReadabilitySubscores>() {
           @Override
           public void write(JsonWriter out, ScoreText200ResponseReadabilitySubscores value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreText200ResponseReadabilitySubscores read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScoreText200ResponseReadabilitySubscores given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScoreText200ResponseReadabilitySubscores
  * @throws IOException if the JSON string is invalid with respect to ScoreText200ResponseReadabilitySubscores
  */
  public static ScoreText200ResponseReadabilitySubscores fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreText200ResponseReadabilitySubscores.class);
  }

 /**
  * Convert an instance of ScoreText200ResponseReadabilitySubscores to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

