/*
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.apileague.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.apileague.client.JSON;

/**
 * DetectMainImageColor200ResponseInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.8.0-SNAPSHOT")
public class DetectMainImageColor200ResponseInner {
  public static final String SERIALIZED_NAME_SPECIFIC_COLOR = "specific_color";
  @SerializedName(SERIALIZED_NAME_SPECIFIC_COLOR)
  private String specificColor;

  public static final String SERIALIZED_NAME_MAIN_COLOR = "main_color";
  @SerializedName(SERIALIZED_NAME_MAIN_COLOR)
  private String mainColor;

  public static final String SERIALIZED_NAME_HEX_CODE = "hex_code";
  @SerializedName(SERIALIZED_NAME_HEX_CODE)
  private String hexCode;

  public DetectMainImageColor200ResponseInner() {
  }

  public DetectMainImageColor200ResponseInner specificColor(String specificColor) {
    this.specificColor = specificColor;
    return this;
  }

  /**
   * Get specificColor
   * @return specificColor
   */
  @javax.annotation.Nullable
  public String getSpecificColor() {
    return specificColor;
  }

  public void setSpecificColor(String specificColor) {
    this.specificColor = specificColor;
  }


  public DetectMainImageColor200ResponseInner mainColor(String mainColor) {
    this.mainColor = mainColor;
    return this;
  }

  /**
   * Get mainColor
   * @return mainColor
   */
  @javax.annotation.Nullable
  public String getMainColor() {
    return mainColor;
  }

  public void setMainColor(String mainColor) {
    this.mainColor = mainColor;
  }


  public DetectMainImageColor200ResponseInner hexCode(String hexCode) {
    this.hexCode = hexCode;
    return this;
  }

  /**
   * Get hexCode
   * @return hexCode
   */
  @javax.annotation.Nullable
  public String getHexCode() {
    return hexCode;
  }

  public void setHexCode(String hexCode) {
    this.hexCode = hexCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetectMainImageColor200ResponseInner detectMainImageColor200ResponseInner = (DetectMainImageColor200ResponseInner) o;
    return Objects.equals(this.specificColor, detectMainImageColor200ResponseInner.specificColor) &&
        Objects.equals(this.mainColor, detectMainImageColor200ResponseInner.mainColor) &&
        Objects.equals(this.hexCode, detectMainImageColor200ResponseInner.hexCode);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(specificColor, mainColor, hexCode);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetectMainImageColor200ResponseInner {\n");
    sb.append("    specificColor: ").append(toIndentedString(specificColor)).append("\n");
    sb.append("    mainColor: ").append(toIndentedString(mainColor)).append("\n");
    sb.append("    hexCode: ").append(toIndentedString(hexCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("specific_color");
    openapiFields.add("main_color");
    openapiFields.add("hex_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetectMainImageColor200ResponseInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetectMainImageColor200ResponseInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetectMainImageColor200ResponseInner is not found in the empty JSON string", DetectMainImageColor200ResponseInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetectMainImageColor200ResponseInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetectMainImageColor200ResponseInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("specific_color") != null && !jsonObj.get("specific_color").isJsonNull()) && !jsonObj.get("specific_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `specific_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("specific_color").toString()));
      }
      if ((jsonObj.get("main_color") != null && !jsonObj.get("main_color").isJsonNull()) && !jsonObj.get("main_color").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_color` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_color").toString()));
      }
      if ((jsonObj.get("hex_code") != null && !jsonObj.get("hex_code").isJsonNull()) && !jsonObj.get("hex_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hex_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hex_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetectMainImageColor200ResponseInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetectMainImageColor200ResponseInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetectMainImageColor200ResponseInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetectMainImageColor200ResponseInner.class));

       return (TypeAdapter<T>) new TypeAdapter<DetectMainImageColor200ResponseInner>() {
           @Override
           public void write(JsonWriter out, DetectMainImageColor200ResponseInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetectMainImageColor200ResponseInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetectMainImageColor200ResponseInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetectMainImageColor200ResponseInner
   * @throws IOException if the JSON string is invalid with respect to DetectMainImageColor200ResponseInner
   */
  public static DetectMainImageColor200ResponseInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetectMainImageColor200ResponseInner.class);
  }

  /**
   * Convert an instance of DetectMainImageColor200ResponseInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

