/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { ComputeNutrition200Response } from '../model/computeNutrition200Response';
// @ts-ignore
import { RetrieveRecipeInformation200Response } from '../model/retrieveRecipeInformation200Response';
// @ts-ignore
import { SearchRecipes200Response } from '../model/searchRecipes200Response';
// @ts-ignore
import { SearchRestaurants200Response } from '../model/searchRestaurants200Response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class FoodService {

    protected basePath = 'https://api.apileague.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (Array.isArray(basePath) && basePath.length > 0) {
                basePath = basePath[0];
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Compute Nutrition
     * Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
     * @param ingredients A comma-separated list of the ingredients of the recipe.
     * @param servings The number of servings the ingredients make. Nutrition is computed per serving.
     * @param reduceOils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public computeNutrition(ingredients: string, servings?: number, reduceOils?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ComputeNutrition200Response>;
    public computeNutrition(ingredients: string, servings?: number, reduceOils?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ComputeNutrition200Response>>;
    public computeNutrition(ingredients: string, servings?: number, reduceOils?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ComputeNutrition200Response>>;
    public computeNutrition(ingredients: string, servings?: number, reduceOils?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (ingredients === null || ingredients === undefined) {
            throw new Error('Required parameter ingredients was null or undefined when calling computeNutrition.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ingredients !== undefined && ingredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ingredients, 'ingredients');
        }
        if (servings !== undefined && servings !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>servings, 'servings');
        }
        if (reduceOils !== undefined && reduceOils !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reduceOils, 'reduce-oils');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKey) required
        localVarCredential = this.configuration.lookupCredential('apiKey');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('api-key', localVarCredential);
        }

        // authentication (headerApiKey) required
        localVarCredential = this.configuration.lookupCredential('headerApiKey');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/compute-nutrition`;
        return this.httpClient.request<ComputeNutrition200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieve Recipe Information
     * Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
     * @param id The id of the recipe to retrieve.
     * @param addWinePairing Whether to pair a wine to the recipe.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public retrieveRecipeInformation(id: number, addWinePairing?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<RetrieveRecipeInformation200Response>;
    public retrieveRecipeInformation(id: number, addWinePairing?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<RetrieveRecipeInformation200Response>>;
    public retrieveRecipeInformation(id: number, addWinePairing?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<RetrieveRecipeInformation200Response>>;
    public retrieveRecipeInformation(id: number, addWinePairing?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling retrieveRecipeInformation.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (id !== undefined && id !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>id, 'id');
        }
        if (addWinePairing !== undefined && addWinePairing !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addWinePairing, 'add-wine-pairing');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKey) required
        localVarCredential = this.configuration.lookupCredential('apiKey');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('api-key', localVarCredential);
        }

        // authentication (headerApiKey) required
        localVarCredential = this.configuration.lookupCredential('headerApiKey');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/retrieve-recipe`;
        return this.httpClient.request<RetrieveRecipeInformation200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Recipes
     * Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
     * @param query The search query.
     * @param cuisines The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as \&#39;OR\&#39;).
     * @param excludeCuisines The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as \&#39;AND\&#39;).
     * @param mealType The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink.
     * @param diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian.
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered.
     * @param equipment The equipment required. Multiple values will be interpreted as \&#39;OR\&#39;.
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes.
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query.
     * @param addRecipeInformation If set to true, you get more information about the recipes returned.
     * @param maxTime The maximum time in minutes it should take to prepare and cook the recipe.
     * @param minServings The minimum amount of servings the recipe is for.
     * @param maxServings The maximum amount of servings the recipe is for.
     * @param minCalories The minimum amount of calories the recipe must have per serving.
     * @param maxCalories The maximum amount of calories the recipe can have per serving.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have per serving.
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have per serving.
     * @param minProtein The minimum amount of protein in grams the recipe must have per serving.
     * @param maxProtein The maximum amount of protein in grams the recipe can have per serving.
     * @param minFat The minimum amount of fat in grams the recipe must have per serving.
     * @param maxFat The maximum amount of fat in grams the recipe can have per serving.
     * @param minSugar The minimum amount of sugar in grams the recipe must have per serving.
     * @param maxSugar The maximum amount of sugar in grams the recipe can have per serving.
     * @param minFiber The minimum amount of fiber in grams the recipe must have per serving.
     * @param maxFiber The maximum amount of fiber in grams the recipe can have per serving.
     * @param minFolate The minimum amount of folate in micrograms the recipe must have per serving.
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have per serving.
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have per serving.
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have per serving.
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have per serving.
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have per serving.
     * @param minIron The minimum amount of iron in milligrams the recipe must have per serving.
     * @param maxIron The maximum amount of iron in milligrams the recipe can have per serving.
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have per serving.
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have per serving.
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have per serving.
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have per serving.
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have per serving.
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have per serving.
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving.
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving.
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have per serving.
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have per serving.
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have per serving.
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have per serving.
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have per serving.
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have per serving.
     * @param minCopper The minimum amount of copper in milligrams the recipe must have per serving.
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have per serving.
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have per serving.
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have per serving.
     * @param minCholine The minimum amount of choline in milligrams the recipe must have per serving.
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have per serving.
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving.
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving.
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have per serving.
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have per serving.
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have per serving.
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have per serving.
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have per serving.
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have per serving.
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have per serving.
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have per serving.
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have per serving.
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have per serving.
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have per serving.
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have per serving.
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have per serving.
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have per serving.
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have per serving.
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have per serving.
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have per serving.
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have per serving.
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving.
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving.
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving.
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving.
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving.
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving.
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving.
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving.
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving.
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving.
     * @param minVitaminB12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving.
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving.
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options.
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC).
     * @param offset The number of recipes to skip, between 0 and 900.
     * @param number The number of recipes, between 1 and 100.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRecipes(query?: string, cuisines?: string, excludeCuisines?: string, mealType?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, fillIngredients?: boolean, addRecipeInformation?: boolean, maxTime?: number, minServings?: number, maxServings?: number, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, minSugar?: number, maxSugar?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minZinc?: number, maxZinc?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSodium?: number, maxSodium?: number, minSelenium?: number, maxSelenium?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, sort?: string, sortDirection?: string, offset?: number, number?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SearchRecipes200Response>;
    public searchRecipes(query?: string, cuisines?: string, excludeCuisines?: string, mealType?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, fillIngredients?: boolean, addRecipeInformation?: boolean, maxTime?: number, minServings?: number, maxServings?: number, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, minSugar?: number, maxSugar?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minZinc?: number, maxZinc?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSodium?: number, maxSodium?: number, minSelenium?: number, maxSelenium?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, sort?: string, sortDirection?: string, offset?: number, number?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SearchRecipes200Response>>;
    public searchRecipes(query?: string, cuisines?: string, excludeCuisines?: string, mealType?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, fillIngredients?: boolean, addRecipeInformation?: boolean, maxTime?: number, minServings?: number, maxServings?: number, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, minSugar?: number, maxSugar?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minZinc?: number, maxZinc?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSodium?: number, maxSodium?: number, minSelenium?: number, maxSelenium?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, sort?: string, sortDirection?: string, offset?: number, number?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SearchRecipes200Response>>;
    public searchRecipes(query?: string, cuisines?: string, excludeCuisines?: string, mealType?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, fillIngredients?: boolean, addRecipeInformation?: boolean, maxTime?: number, minServings?: number, maxServings?: number, minCalories?: number, maxCalories?: number, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minFat?: number, maxFat?: number, minSugar?: number, maxSugar?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minZinc?: number, maxZinc?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSodium?: number, maxSodium?: number, minSelenium?: number, maxSelenium?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, sort?: string, sortDirection?: string, offset?: number, number?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (query !== undefined && query !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>query, 'query');
        }
        if (cuisines !== undefined && cuisines !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cuisines, 'cuisines');
        }
        if (excludeCuisines !== undefined && excludeCuisines !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>excludeCuisines, 'exclude-cuisines');
        }
        if (mealType !== undefined && mealType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>mealType, 'meal-type');
        }
        if (diet !== undefined && diet !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>diet, 'diet');
        }
        if (intolerances !== undefined && intolerances !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>intolerances, 'intolerances');
        }
        if (equipment !== undefined && equipment !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>equipment, 'equipment');
        }
        if (includeIngredients !== undefined && includeIngredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeIngredients, 'include-ingredients');
        }
        if (excludeIngredients !== undefined && excludeIngredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>excludeIngredients, 'exclude-ingredients');
        }
        if (fillIngredients !== undefined && fillIngredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillIngredients, 'fill-ingredients');
        }
        if (addRecipeInformation !== undefined && addRecipeInformation !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addRecipeInformation, 'add-recipe-information');
        }
        if (maxTime !== undefined && maxTime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxTime, 'max-time');
        }
        if (minServings !== undefined && minServings !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minServings, 'min-servings');
        }
        if (maxServings !== undefined && maxServings !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxServings, 'max-servings');
        }
        if (minCalories !== undefined && minCalories !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCalories, 'min-calories');
        }
        if (maxCalories !== undefined && maxCalories !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCalories, 'max-calories');
        }
        if (minCarbs !== undefined && minCarbs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCarbs, 'min-carbs');
        }
        if (maxCarbs !== undefined && maxCarbs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCarbs, 'max-carbs');
        }
        if (minProtein !== undefined && minProtein !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minProtein, 'min-protein');
        }
        if (maxProtein !== undefined && maxProtein !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxProtein, 'max-protein');
        }
        if (minFat !== undefined && minFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFat, 'min-fat');
        }
        if (maxFat !== undefined && maxFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFat, 'max-fat');
        }
        if (minSugar !== undefined && minSugar !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSugar, 'min-sugar');
        }
        if (maxSugar !== undefined && maxSugar !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSugar, 'max-sugar');
        }
        if (minFiber !== undefined && minFiber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFiber, 'min-fiber');
        }
        if (maxFiber !== undefined && maxFiber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFiber, 'max-fiber');
        }
        if (minFolate !== undefined && minFolate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFolate, 'min-folate');
        }
        if (maxFolate !== undefined && maxFolate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFolate, 'max-folate');
        }
        if (minFolicAcid !== undefined && minFolicAcid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFolicAcid, 'min-folic-acid');
        }
        if (maxFolicAcid !== undefined && maxFolicAcid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFolicAcid, 'max-folic-acid');
        }
        if (minIodine !== undefined && minIodine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minIodine, 'min-iodine');
        }
        if (maxIodine !== undefined && maxIodine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxIodine, 'max-iodine');
        }
        if (minIron !== undefined && minIron !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minIron, 'min-iron');
        }
        if (maxIron !== undefined && maxIron !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxIron, 'max-iron');
        }
        if (minZinc !== undefined && minZinc !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minZinc, 'min-zinc');
        }
        if (maxZinc !== undefined && maxZinc !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxZinc, 'max-zinc');
        }
        if (minMagnesium !== undefined && minMagnesium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minMagnesium, 'min-magnesium');
        }
        if (maxMagnesium !== undefined && maxMagnesium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxMagnesium, 'max-magnesium');
        }
        if (minManganese !== undefined && minManganese !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minManganese, 'min-manganese');
        }
        if (maxManganese !== undefined && maxManganese !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxManganese, 'max-manganese');
        }
        if (minPhosphorus !== undefined && minPhosphorus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPhosphorus, 'min-phosphorus');
        }
        if (maxPhosphorus !== undefined && maxPhosphorus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPhosphorus, 'max-phosphorus');
        }
        if (minPotassium !== undefined && minPotassium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPotassium, 'min-potassium');
        }
        if (maxPotassium !== undefined && maxPotassium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPotassium, 'max-potassium');
        }
        if (minSodium !== undefined && minSodium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSodium, 'min-sodium');
        }
        if (maxSodium !== undefined && maxSodium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSodium, 'max-sodium');
        }
        if (minSelenium !== undefined && minSelenium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSelenium, 'min-selenium');
        }
        if (maxSelenium !== undefined && maxSelenium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSelenium, 'max-selenium');
        }
        if (minCopper !== undefined && minCopper !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCopper, 'min-copper');
        }
        if (maxCopper !== undefined && maxCopper !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCopper, 'max-copper');
        }
        if (minCalcium !== undefined && minCalcium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCalcium, 'min-calcium');
        }
        if (maxCalcium !== undefined && maxCalcium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCalcium, 'max-calcium');
        }
        if (minCholine !== undefined && minCholine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCholine, 'min-choline');
        }
        if (maxCholine !== undefined && maxCholine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCholine, 'max-choline');
        }
        if (minCholesterol !== undefined && minCholesterol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCholesterol, 'min-cholesterol');
        }
        if (maxCholesterol !== undefined && maxCholesterol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCholesterol, 'max-cholesterol');
        }
        if (minFluoride !== undefined && minFluoride !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFluoride, 'min-fluoride');
        }
        if (maxFluoride !== undefined && maxFluoride !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFluoride, 'max-fluoride');
        }
        if (minAlcohol !== undefined && minAlcohol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minAlcohol, 'min-alcohol');
        }
        if (maxAlcohol !== undefined && maxAlcohol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAlcohol, 'max-alcohol');
        }
        if (minCaffeine !== undefined && minCaffeine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCaffeine, 'min-caffeine');
        }
        if (maxCaffeine !== undefined && maxCaffeine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCaffeine, 'max-caffeine');
        }
        if (minSaturatedFat !== undefined && minSaturatedFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSaturatedFat, 'min-saturated-fat');
        }
        if (maxSaturatedFat !== undefined && maxSaturatedFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSaturatedFat, 'max-saturated-fat');
        }
        if (minVitaminA !== undefined && minVitaminA !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminA, 'min-vitamin-a');
        }
        if (maxVitaminA !== undefined && maxVitaminA !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminA, 'max-vitamin-a');
        }
        if (minVitaminC !== undefined && minVitaminC !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminC, 'min-vitamin-c');
        }
        if (maxVitaminC !== undefined && maxVitaminC !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminC, 'max-vitamin-c');
        }
        if (minVitaminD !== undefined && minVitaminD !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminD, 'min-vitamin-d');
        }
        if (maxVitaminD !== undefined && maxVitaminD !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminD, 'max-vitamin-d');
        }
        if (minVitaminE !== undefined && minVitaminE !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminE, 'min-vitamin-e');
        }
        if (maxVitaminE !== undefined && maxVitaminE !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminE, 'max-vitamin-e');
        }
        if (minVitaminK !== undefined && minVitaminK !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminK, 'min-vitamin-k');
        }
        if (maxVitaminK !== undefined && maxVitaminK !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminK, 'max-vitamin-k');
        }
        if (minVitaminB1 !== undefined && minVitaminB1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB1, 'min-vitamin-b1');
        }
        if (maxVitaminB1 !== undefined && maxVitaminB1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB1, 'max-vitamin-b1');
        }
        if (minVitaminB2 !== undefined && minVitaminB2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB2, 'min-vitamin-b2');
        }
        if (maxVitaminB2 !== undefined && maxVitaminB2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB2, 'max-vitamin-b2');
        }
        if (minVitaminB3 !== undefined && minVitaminB3 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB3, 'min-vitamin-b3');
        }
        if (maxVitaminB3 !== undefined && maxVitaminB3 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB3, 'max-vitamin-b3');
        }
        if (minVitaminB5 !== undefined && minVitaminB5 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB5, 'min-vitamin-b5');
        }
        if (maxVitaminB5 !== undefined && maxVitaminB5 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB5, 'max-vitamin-b5');
        }
        if (minVitaminB6 !== undefined && minVitaminB6 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB6, 'min-vitamin-b6');
        }
        if (maxVitaminB6 !== undefined && maxVitaminB6 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB6, 'max-vitamin-b6');
        }
        if (minVitaminB12 !== undefined && minVitaminB12 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB12, 'min-vitamin-b12');
        }
        if (maxVitaminB12 !== undefined && maxVitaminB12 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB12, 'max-vitamin-b12');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'sort');
        }
        if (sortDirection !== undefined && sortDirection !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortDirection, 'sort-direction');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKey) required
        localVarCredential = this.configuration.lookupCredential('apiKey');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('api-key', localVarCredential);
        }

        // authentication (headerApiKey) required
        localVarCredential = this.configuration.lookupCredential('headerApiKey');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/search-recipes`;
        return this.httpClient.request<SearchRecipes200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Restaurants
     * Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
     * @param lat The latitude to search around.
     * @param lon The longitude to search around.
     * @param query The search query.
     * @param distance The maximum distance of the restaurant in miles around the given location.
     * @param budget The budget in USD for the meal.
     * @param minRating The minimum rating of the restaurants in range [0,5].
     * @param cuisine The cuisine that the restaurants should support.
     * @param isOpen Whether the restaurants have to be open now.
     * @param page The page of the results.
     * @param sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRestaurants(lat: number, lon: number, query?: string, distance?: number, budget?: number, minRating?: number, cuisine?: string, isOpen?: boolean, page?: number, sort?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SearchRestaurants200Response>;
    public searchRestaurants(lat: number, lon: number, query?: string, distance?: number, budget?: number, minRating?: number, cuisine?: string, isOpen?: boolean, page?: number, sort?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SearchRestaurants200Response>>;
    public searchRestaurants(lat: number, lon: number, query?: string, distance?: number, budget?: number, minRating?: number, cuisine?: string, isOpen?: boolean, page?: number, sort?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SearchRestaurants200Response>>;
    public searchRestaurants(lat: number, lon: number, query?: string, distance?: number, budget?: number, minRating?: number, cuisine?: string, isOpen?: boolean, page?: number, sort?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (lat === null || lat === undefined) {
            throw new Error('Required parameter lat was null or undefined when calling searchRestaurants.');
        }
        if (lon === null || lon === undefined) {
            throw new Error('Required parameter lon was null or undefined when calling searchRestaurants.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (query !== undefined && query !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>query, 'query');
        }
        if (lat !== undefined && lat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lat, 'lat');
        }
        if (lon !== undefined && lon !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>lon, 'lon');
        }
        if (distance !== undefined && distance !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>distance, 'distance');
        }
        if (budget !== undefined && budget !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>budget, 'budget');
        }
        if (minRating !== undefined && minRating !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minRating, 'min-rating');
        }
        if (cuisine !== undefined && cuisine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cuisine, 'cuisine');
        }
        if (isOpen !== undefined && isOpen !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isOpen, 'is-open');
        }
        if (page !== undefined && page !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>page, 'page');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'sort');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKey) required
        localVarCredential = this.configuration.lookupCredential('apiKey');
        if (localVarCredential) {
            localVarQueryParameters = localVarQueryParameters.set('api-key', localVarCredential);
        }

        // authentication (headerApiKey) required
        localVarCredential = this.configuration.lookupCredential('headerApiKey');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/search-restaurants`;
        return this.httpClient.request<SearchRestaurants200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
