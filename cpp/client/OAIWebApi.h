/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebApi_H
#define OAI_OAIWebApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExtractAuthors_200_response.h"
#include "OAIExtractContentFromAWebPage_200_response.h"
#include "OAIExtractPublishDate_200_response.h"
#include "OAIRetrievePageRank_200_response.h"
#include "OAISearchWeb_200_response.h"
#include "OAIVerifyEmailAddress_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebApi : public QObject {
    Q_OBJECT

public:
    OAIWebApi(const int timeOut = 0);
    ~OAIWebApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    */
    void extractAuthors(const QString &url);

    /**
    * @param[in]  url QString [required]
    */
    void extractContentFromAWebPage(const QString &url);

    /**
    * @param[in]  url QString [required]
    */
    void extractPublishDate(const QString &url);

    /**
    * @param[in]  domain QString [required]
    */
    void retrievePageRank(const QString &domain);

    /**
    * @param[in]  query QString [required]
    * @param[in]  number qint32 [optional]
    */
    void searchWeb(const QString &query, const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  email QString [required]
    */
    void verifyEmailAddress(const QString &email);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void extractAuthorsCallback(OAIHttpRequestWorker *worker);
    void extractContentFromAWebPageCallback(OAIHttpRequestWorker *worker);
    void extractPublishDateCallback(OAIHttpRequestWorker *worker);
    void retrievePageRankCallback(OAIHttpRequestWorker *worker);
    void searchWebCallback(OAIHttpRequestWorker *worker);
    void verifyEmailAddressCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void extractAuthorsSignal(OAIExtractAuthors_200_response summary);
    void extractContentFromAWebPageSignal(OAIExtractContentFromAWebPage_200_response summary);
    void extractPublishDateSignal(OAIExtractPublishDate_200_response summary);
    void retrievePageRankSignal(OAIRetrievePageRank_200_response summary);
    void searchWebSignal(OAISearchWeb_200_response summary);
    void verifyEmailAddressSignal(OAIVerifyEmailAddress_200_response summary);

    void extractAuthorsSignalFull(OAIHttpRequestWorker *worker, OAIExtractAuthors_200_response summary);
    void extractContentFromAWebPageSignalFull(OAIHttpRequestWorker *worker, OAIExtractContentFromAWebPage_200_response summary);
    void extractPublishDateSignalFull(OAIHttpRequestWorker *worker, OAIExtractPublishDate_200_response summary);
    void retrievePageRankSignalFull(OAIHttpRequestWorker *worker, OAIRetrievePageRank_200_response summary);
    void searchWebSignalFull(OAIHttpRequestWorker *worker, OAISearchWeb_200_response summary);
    void verifyEmailAddressSignalFull(OAIHttpRequestWorker *worker, OAIVerifyEmailAddress_200_response summary);

    Q_DECL_DEPRECATED_X("Use extractAuthorsSignalError() instead")
    void extractAuthorsSignalE(OAIExtractAuthors_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractAuthorsSignalError(OAIExtractAuthors_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractContentFromAWebPageSignalError() instead")
    void extractContentFromAWebPageSignalE(OAIExtractContentFromAWebPage_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractContentFromAWebPageSignalError(OAIExtractContentFromAWebPage_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractPublishDateSignalError() instead")
    void extractPublishDateSignalE(OAIExtractPublishDate_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractPublishDateSignalError(OAIExtractPublishDate_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePageRankSignalError() instead")
    void retrievePageRankSignalE(OAIRetrievePageRank_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePageRankSignalError(OAIRetrievePageRank_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchWebSignalError() instead")
    void searchWebSignalE(OAISearchWeb_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchWebSignalError(OAISearchWeb_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyEmailAddressSignalError() instead")
    void verifyEmailAddressSignalE(OAIVerifyEmailAddress_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyEmailAddressSignalError(OAIVerifyEmailAddress_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use extractAuthorsSignalErrorFull() instead")
    void extractAuthorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractAuthorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractContentFromAWebPageSignalErrorFull() instead")
    void extractContentFromAWebPageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractContentFromAWebPageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractPublishDateSignalErrorFull() instead")
    void extractPublishDateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractPublishDateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePageRankSignalErrorFull() instead")
    void retrievePageRankSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePageRankSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchWebSignalErrorFull() instead")
    void searchWebSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchWebSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyEmailAddressSignalErrorFull() instead")
    void verifyEmailAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyEmailAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
