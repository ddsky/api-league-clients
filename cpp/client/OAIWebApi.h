/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWebApi_H
#define OAI_OAIWebApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExtractAuthorsAPI_200_response.h"
#include "OAIExtractContentFromAWebPageAPI_200_response.h"
#include "OAIExtractPublishDateAPI_200_response.h"
#include "OAIRetrievePageRankAPI_200_response.h"
#include "OAISearchWebAPI_200_response.h"
#include "OAIVerifyEmailAddressAPI_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWebApi : public QObject {
    Q_OBJECT

public:
    OAIWebApi(const int timeOut = 0);
    ~OAIWebApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    */
    void extractAuthorsAPI(const QString &url);

    /**
    * @param[in]  url QString [required]
    */
    void extractContentFromAWebPageAPI(const QString &url);

    /**
    * @param[in]  url QString [required]
    */
    void extractPublishDateAPI(const QString &url);

    /**
    * @param[in]  domain QString [required]
    */
    void retrievePageRankAPI(const QString &domain);

    /**
    * @param[in]  query QString [required]
    * @param[in]  number qint32 [optional]
    */
    void searchWebAPI(const QString &query, const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  email QString [required]
    */
    void verifyEmailAddressAPI(const QString &email);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void extractAuthorsAPICallback(OAIHttpRequestWorker *worker);
    void extractContentFromAWebPageAPICallback(OAIHttpRequestWorker *worker);
    void extractPublishDateAPICallback(OAIHttpRequestWorker *worker);
    void retrievePageRankAPICallback(OAIHttpRequestWorker *worker);
    void searchWebAPICallback(OAIHttpRequestWorker *worker);
    void verifyEmailAddressAPICallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void extractAuthorsAPISignal(OAIExtractAuthorsAPI_200_response summary);
    void extractContentFromAWebPageAPISignal(OAIExtractContentFromAWebPageAPI_200_response summary);
    void extractPublishDateAPISignal(OAIExtractPublishDateAPI_200_response summary);
    void retrievePageRankAPISignal(OAIRetrievePageRankAPI_200_response summary);
    void searchWebAPISignal(OAISearchWebAPI_200_response summary);
    void verifyEmailAddressAPISignal(OAIVerifyEmailAddressAPI_200_response summary);

    void extractAuthorsAPISignalFull(OAIHttpRequestWorker *worker, OAIExtractAuthorsAPI_200_response summary);
    void extractContentFromAWebPageAPISignalFull(OAIHttpRequestWorker *worker, OAIExtractContentFromAWebPageAPI_200_response summary);
    void extractPublishDateAPISignalFull(OAIHttpRequestWorker *worker, OAIExtractPublishDateAPI_200_response summary);
    void retrievePageRankAPISignalFull(OAIHttpRequestWorker *worker, OAIRetrievePageRankAPI_200_response summary);
    void searchWebAPISignalFull(OAIHttpRequestWorker *worker, OAISearchWebAPI_200_response summary);
    void verifyEmailAddressAPISignalFull(OAIHttpRequestWorker *worker, OAIVerifyEmailAddressAPI_200_response summary);

    Q_DECL_DEPRECATED_X("Use extractAuthorsAPISignalError() instead")
    void extractAuthorsAPISignalE(OAIExtractAuthorsAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractAuthorsAPISignalError(OAIExtractAuthorsAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractContentFromAWebPageAPISignalError() instead")
    void extractContentFromAWebPageAPISignalE(OAIExtractContentFromAWebPageAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractContentFromAWebPageAPISignalError(OAIExtractContentFromAWebPageAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractPublishDateAPISignalError() instead")
    void extractPublishDateAPISignalE(OAIExtractPublishDateAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractPublishDateAPISignalError(OAIExtractPublishDateAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePageRankAPISignalError() instead")
    void retrievePageRankAPISignalE(OAIRetrievePageRankAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePageRankAPISignalError(OAIRetrievePageRankAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchWebAPISignalError() instead")
    void searchWebAPISignalE(OAISearchWebAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchWebAPISignalError(OAISearchWebAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyEmailAddressAPISignalError() instead")
    void verifyEmailAddressAPISignalE(OAIVerifyEmailAddressAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyEmailAddressAPISignalError(OAIVerifyEmailAddressAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use extractAuthorsAPISignalErrorFull() instead")
    void extractAuthorsAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractAuthorsAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractContentFromAWebPageAPISignalErrorFull() instead")
    void extractContentFromAWebPageAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractContentFromAWebPageAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractPublishDateAPISignalErrorFull() instead")
    void extractPublishDateAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractPublishDateAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrievePageRankAPISignalErrorFull() instead")
    void retrievePageRankAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrievePageRankAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchWebAPISignalErrorFull() instead")
    void searchWebAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchWebAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyEmailAddressAPISignalErrorFull() instead")
    void verifyEmailAddressAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyEmailAddressAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
