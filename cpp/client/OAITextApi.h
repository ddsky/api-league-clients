/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextApi_H
#define OAI_OAITextApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICorrectSpellingAPI_200_response.h"
#include "OAIDetectGenderByNameAPI_200_response.h"
#include "OAIDetectLanguageAPI_200_response_inner.h"
#include "OAIDetectSentimentAPI_200_response.h"
#include "OAIExtractDatesAPI_200_response.h"
#include "OAIExtractEntitiesAPI_200_response.h"
#include "OAIListWordSynonymsAPI_200_response.h"
#include "OAIPluralizeWordAPI_200_response.h"
#include "OAIScoreReadabilityAPI_200_response.h"
#include "OAIScoreTextAPI_200_response.h"
#include "OAISingularizeWordAPI_200_response.h"
#include "OAIStemTextAPI_200_response.h"
#include "OAITagPartOfSpeechAPI_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITextApi : public QObject {
    Q_OBJECT

public:
    OAITextApi(const int timeOut = 0);
    ~OAITextApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  text QString [required]
    * @param[in]  language QString [required]
    */
    void correctSpellingAPI(const QString &text, const QString &language);

    /**
    * @param[in]  name QString [required]
    */
    void detectGenderByNameAPI(const QString &name);

    /**
    * @param[in]  text QString [required]
    */
    void detectLanguageAPI(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    void detectSentimentAPI(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    void extractDatesAPI(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    void extractEntitiesAPI(const QString &text);

    /**
    * @param[in]  word QString [required]
    */
    void listWordSynonymsAPI(const QString &word);

    /**
    * @param[in]  word QString [required]
    */
    void pluralizeWordAPI(const QString &word);

    /**
    * @param[in]  text QString [required]
    */
    void scoreReadabilityAPI(const QString &text);

    /**
    * @param[in]  title QString [required]
    * @param[in]  text QString [required]
    */
    void scoreTextAPI(const QString &title, const QString &text);

    /**
    * @param[in]  word QString [required]
    */
    void singularizeWordAPI(const QString &word);

    /**
    * @param[in]  text QString [required]
    */
    void stemTextAPI(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    void tagPartOfSpeechAPI(const QString &text);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void correctSpellingAPICallback(OAIHttpRequestWorker *worker);
    void detectGenderByNameAPICallback(OAIHttpRequestWorker *worker);
    void detectLanguageAPICallback(OAIHttpRequestWorker *worker);
    void detectSentimentAPICallback(OAIHttpRequestWorker *worker);
    void extractDatesAPICallback(OAIHttpRequestWorker *worker);
    void extractEntitiesAPICallback(OAIHttpRequestWorker *worker);
    void listWordSynonymsAPICallback(OAIHttpRequestWorker *worker);
    void pluralizeWordAPICallback(OAIHttpRequestWorker *worker);
    void scoreReadabilityAPICallback(OAIHttpRequestWorker *worker);
    void scoreTextAPICallback(OAIHttpRequestWorker *worker);
    void singularizeWordAPICallback(OAIHttpRequestWorker *worker);
    void stemTextAPICallback(OAIHttpRequestWorker *worker);
    void tagPartOfSpeechAPICallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void correctSpellingAPISignal(OAICorrectSpellingAPI_200_response summary);
    void detectGenderByNameAPISignal(OAIDetectGenderByNameAPI_200_response summary);
    void detectLanguageAPISignal(QList<OAIDetectLanguageAPI_200_response_inner> summary);
    void detectSentimentAPISignal(OAIDetectSentimentAPI_200_response summary);
    void extractDatesAPISignal(OAIExtractDatesAPI_200_response summary);
    void extractEntitiesAPISignal(OAIExtractEntitiesAPI_200_response summary);
    void listWordSynonymsAPISignal(OAIListWordSynonymsAPI_200_response summary);
    void pluralizeWordAPISignal(OAIPluralizeWordAPI_200_response summary);
    void scoreReadabilityAPISignal(OAIScoreReadabilityAPI_200_response summary);
    void scoreTextAPISignal(OAIScoreTextAPI_200_response summary);
    void singularizeWordAPISignal(OAISingularizeWordAPI_200_response summary);
    void stemTextAPISignal(OAIStemTextAPI_200_response summary);
    void tagPartOfSpeechAPISignal(OAITagPartOfSpeechAPI_200_response summary);

    void correctSpellingAPISignalFull(OAIHttpRequestWorker *worker, OAICorrectSpellingAPI_200_response summary);
    void detectGenderByNameAPISignalFull(OAIHttpRequestWorker *worker, OAIDetectGenderByNameAPI_200_response summary);
    void detectLanguageAPISignalFull(OAIHttpRequestWorker *worker, QList<OAIDetectLanguageAPI_200_response_inner> summary);
    void detectSentimentAPISignalFull(OAIHttpRequestWorker *worker, OAIDetectSentimentAPI_200_response summary);
    void extractDatesAPISignalFull(OAIHttpRequestWorker *worker, OAIExtractDatesAPI_200_response summary);
    void extractEntitiesAPISignalFull(OAIHttpRequestWorker *worker, OAIExtractEntitiesAPI_200_response summary);
    void listWordSynonymsAPISignalFull(OAIHttpRequestWorker *worker, OAIListWordSynonymsAPI_200_response summary);
    void pluralizeWordAPISignalFull(OAIHttpRequestWorker *worker, OAIPluralizeWordAPI_200_response summary);
    void scoreReadabilityAPISignalFull(OAIHttpRequestWorker *worker, OAIScoreReadabilityAPI_200_response summary);
    void scoreTextAPISignalFull(OAIHttpRequestWorker *worker, OAIScoreTextAPI_200_response summary);
    void singularizeWordAPISignalFull(OAIHttpRequestWorker *worker, OAISingularizeWordAPI_200_response summary);
    void stemTextAPISignalFull(OAIHttpRequestWorker *worker, OAIStemTextAPI_200_response summary);
    void tagPartOfSpeechAPISignalFull(OAIHttpRequestWorker *worker, OAITagPartOfSpeechAPI_200_response summary);

    Q_DECL_DEPRECATED_X("Use correctSpellingAPISignalError() instead")
    void correctSpellingAPISignalE(OAICorrectSpellingAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void correctSpellingAPISignalError(OAICorrectSpellingAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectGenderByNameAPISignalError() instead")
    void detectGenderByNameAPISignalE(OAIDetectGenderByNameAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectGenderByNameAPISignalError(OAIDetectGenderByNameAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectLanguageAPISignalError() instead")
    void detectLanguageAPISignalE(QList<OAIDetectLanguageAPI_200_response_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectLanguageAPISignalError(QList<OAIDetectLanguageAPI_200_response_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectSentimentAPISignalError() instead")
    void detectSentimentAPISignalE(OAIDetectSentimentAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectSentimentAPISignalError(OAIDetectSentimentAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractDatesAPISignalError() instead")
    void extractDatesAPISignalE(OAIExtractDatesAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractDatesAPISignalError(OAIExtractDatesAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractEntitiesAPISignalError() instead")
    void extractEntitiesAPISignalE(OAIExtractEntitiesAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractEntitiesAPISignalError(OAIExtractEntitiesAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWordSynonymsAPISignalError() instead")
    void listWordSynonymsAPISignalE(OAIListWordSynonymsAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWordSynonymsAPISignalError(OAIListWordSynonymsAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pluralizeWordAPISignalError() instead")
    void pluralizeWordAPISignalE(OAIPluralizeWordAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pluralizeWordAPISignalError(OAIPluralizeWordAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoreReadabilityAPISignalError() instead")
    void scoreReadabilityAPISignalE(OAIScoreReadabilityAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreReadabilityAPISignalError(OAIScoreReadabilityAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoreTextAPISignalError() instead")
    void scoreTextAPISignalE(OAIScoreTextAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreTextAPISignalError(OAIScoreTextAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use singularizeWordAPISignalError() instead")
    void singularizeWordAPISignalE(OAISingularizeWordAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void singularizeWordAPISignalError(OAISingularizeWordAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stemTextAPISignalError() instead")
    void stemTextAPISignalE(OAIStemTextAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void stemTextAPISignalError(OAIStemTextAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagPartOfSpeechAPISignalError() instead")
    void tagPartOfSpeechAPISignalE(OAITagPartOfSpeechAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagPartOfSpeechAPISignalError(OAITagPartOfSpeechAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use correctSpellingAPISignalErrorFull() instead")
    void correctSpellingAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void correctSpellingAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectGenderByNameAPISignalErrorFull() instead")
    void detectGenderByNameAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectGenderByNameAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectLanguageAPISignalErrorFull() instead")
    void detectLanguageAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectLanguageAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use detectSentimentAPISignalErrorFull() instead")
    void detectSentimentAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectSentimentAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractDatesAPISignalErrorFull() instead")
    void extractDatesAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractDatesAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use extractEntitiesAPISignalErrorFull() instead")
    void extractEntitiesAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractEntitiesAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listWordSynonymsAPISignalErrorFull() instead")
    void listWordSynonymsAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWordSynonymsAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pluralizeWordAPISignalErrorFull() instead")
    void pluralizeWordAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pluralizeWordAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoreReadabilityAPISignalErrorFull() instead")
    void scoreReadabilityAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreReadabilityAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoreTextAPISignalErrorFull() instead")
    void scoreTextAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreTextAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use singularizeWordAPISignalErrorFull() instead")
    void singularizeWordAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void singularizeWordAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stemTextAPISignalErrorFull() instead")
    void stemTextAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stemTextAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagPartOfSpeechAPISignalErrorFull() instead")
    void tagPartOfSpeechAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagPartOfSpeechAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
