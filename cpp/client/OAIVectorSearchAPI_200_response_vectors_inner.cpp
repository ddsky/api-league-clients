/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVectorSearchAPI_200_response_vectors_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVectorSearchAPI_200_response_vectors_inner::OAIVectorSearchAPI_200_response_vectors_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVectorSearchAPI_200_response_vectors_inner::OAIVectorSearchAPI_200_response_vectors_inner() {
    this->initializeModel();
}

OAIVectorSearchAPI_200_response_vectors_inner::~OAIVectorSearchAPI_200_response_vectors_inner() {}

void OAIVectorSearchAPI_200_response_vectors_inner::initializeModel() {

    m_license_isSet = false;
    m_license_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;
}

void OAIVectorSearchAPI_200_response_vectors_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVectorSearchAPI_200_response_vectors_inner::fromJsonObject(QJsonObject json) {

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("image_url")]);
    m_image_url_isSet = !json[QString("image_url")].isNull() && m_image_url_isValid;
}

QString OAIVectorSearchAPI_200_response_vectors_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVectorSearchAPI_200_response_vectors_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("image_url"), ::OpenAPI::toJsonValue(m_image_url));
    }
    return obj;
}

QString OAIVectorSearchAPI_200_response_vectors_inner::getLicense() const {
    return m_license;
}
void OAIVectorSearchAPI_200_response_vectors_inner::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::is_license_Set() const{
    return m_license_isSet;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::is_license_Valid() const{
    return m_license_isValid;
}

QString OAIVectorSearchAPI_200_response_vectors_inner::getTitle() const {
    return m_title;
}
void OAIVectorSearchAPI_200_response_vectors_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIVectorSearchAPI_200_response_vectors_inner::getAuthor() const {
    return m_author;
}
void OAIVectorSearchAPI_200_response_vectors_inner::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::is_author_Set() const{
    return m_author_isSet;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIVectorSearchAPI_200_response_vectors_inner::getImageUrl() const {
    return m_image_url;
}
void OAIVectorSearchAPI_200_response_vectors_inner::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::is_image_url_Valid() const{
    return m_image_url_isValid;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVectorSearchAPI_200_response_vectors_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
