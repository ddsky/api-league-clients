/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveRecipeInformationAPI_200_response_dietary_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::OAIRetrieveRecipeInformationAPI_200_response_dietary_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::OAIRetrieveRecipeInformationAPI_200_response_dietary_properties() {
    this->initializeModel();
}

OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::~OAIRetrieveRecipeInformationAPI_200_response_dietary_properties() {}

void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::initializeModel() {

    m_low_fodmap_isSet = false;
    m_low_fodmap_isValid = false;

    m_vegetarian_isSet = false;
    m_vegetarian_isValid = false;

    m_vegan_isSet = false;
    m_vegan_isValid = false;

    m_gluten_free_isSet = false;
    m_gluten_free_isValid = false;

    m_dairy_free_isSet = false;
    m_dairy_free_isValid = false;

    m_gaps_isSet = false;
    m_gaps_isValid = false;

    m_diets_isSet = false;
    m_diets_isValid = false;
}

void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::fromJsonObject(QJsonObject json) {

    m_low_fodmap_isValid = ::OpenAPI::fromJsonValue(m_low_fodmap, json[QString("low_fodmap")]);
    m_low_fodmap_isSet = !json[QString("low_fodmap")].isNull() && m_low_fodmap_isValid;

    m_vegetarian_isValid = ::OpenAPI::fromJsonValue(m_vegetarian, json[QString("vegetarian")]);
    m_vegetarian_isSet = !json[QString("vegetarian")].isNull() && m_vegetarian_isValid;

    m_vegan_isValid = ::OpenAPI::fromJsonValue(m_vegan, json[QString("vegan")]);
    m_vegan_isSet = !json[QString("vegan")].isNull() && m_vegan_isValid;

    m_gluten_free_isValid = ::OpenAPI::fromJsonValue(m_gluten_free, json[QString("gluten_free")]);
    m_gluten_free_isSet = !json[QString("gluten_free")].isNull() && m_gluten_free_isValid;

    m_dairy_free_isValid = ::OpenAPI::fromJsonValue(m_dairy_free, json[QString("dairy_free")]);
    m_dairy_free_isSet = !json[QString("dairy_free")].isNull() && m_dairy_free_isValid;

    m_gaps_isValid = ::OpenAPI::fromJsonValue(m_gaps, json[QString("gaps")]);
    m_gaps_isSet = !json[QString("gaps")].isNull() && m_gaps_isValid;

    m_diets_isValid = ::OpenAPI::fromJsonValue(m_diets, json[QString("diets")]);
    m_diets_isSet = !json[QString("diets")].isNull() && m_diets_isValid;
}

QString OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_low_fodmap_isSet) {
        obj.insert(QString("low_fodmap"), ::OpenAPI::toJsonValue(m_low_fodmap));
    }
    if (m_vegetarian_isSet) {
        obj.insert(QString("vegetarian"), ::OpenAPI::toJsonValue(m_vegetarian));
    }
    if (m_vegan_isSet) {
        obj.insert(QString("vegan"), ::OpenAPI::toJsonValue(m_vegan));
    }
    if (m_gluten_free_isSet) {
        obj.insert(QString("gluten_free"), ::OpenAPI::toJsonValue(m_gluten_free));
    }
    if (m_dairy_free_isSet) {
        obj.insert(QString("dairy_free"), ::OpenAPI::toJsonValue(m_dairy_free));
    }
    if (m_gaps_isSet) {
        obj.insert(QString("gaps"), ::OpenAPI::toJsonValue(m_gaps));
    }
    if (m_diets.size() > 0) {
        obj.insert(QString("diets"), ::OpenAPI::toJsonValue(m_diets));
    }
    return obj;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::isLowFodmap() const {
    return m_low_fodmap;
}
void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::setLowFodmap(const bool &low_fodmap) {
    m_low_fodmap = low_fodmap;
    m_low_fodmap_isSet = true;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_low_fodmap_Set() const{
    return m_low_fodmap_isSet;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_low_fodmap_Valid() const{
    return m_low_fodmap_isValid;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::isVegetarian() const {
    return m_vegetarian;
}
void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::setVegetarian(const bool &vegetarian) {
    m_vegetarian = vegetarian;
    m_vegetarian_isSet = true;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_vegetarian_Set() const{
    return m_vegetarian_isSet;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_vegetarian_Valid() const{
    return m_vegetarian_isValid;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::isVegan() const {
    return m_vegan;
}
void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::setVegan(const bool &vegan) {
    m_vegan = vegan;
    m_vegan_isSet = true;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_vegan_Set() const{
    return m_vegan_isSet;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_vegan_Valid() const{
    return m_vegan_isValid;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::isGlutenFree() const {
    return m_gluten_free;
}
void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::setGlutenFree(const bool &gluten_free) {
    m_gluten_free = gluten_free;
    m_gluten_free_isSet = true;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_gluten_free_Set() const{
    return m_gluten_free_isSet;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_gluten_free_Valid() const{
    return m_gluten_free_isValid;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::isDairyFree() const {
    return m_dairy_free;
}
void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::setDairyFree(const bool &dairy_free) {
    m_dairy_free = dairy_free;
    m_dairy_free_isSet = true;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_dairy_free_Set() const{
    return m_dairy_free_isSet;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_dairy_free_Valid() const{
    return m_dairy_free_isValid;
}

QString OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::getGaps() const {
    return m_gaps;
}
void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::setGaps(const QString &gaps) {
    m_gaps = gaps;
    m_gaps_isSet = true;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_gaps_Set() const{
    return m_gaps_isSet;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_gaps_Valid() const{
    return m_gaps_isValid;
}

QList<QString> OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::getDiets() const {
    return m_diets;
}
void OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::setDiets(const QList<QString> &diets) {
    m_diets = diets;
    m_diets_isSet = true;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_diets_Set() const{
    return m_diets_isSet;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::is_diets_Valid() const{
    return m_diets_isValid;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_low_fodmap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegetarian_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vegan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gluten_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dairy_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gaps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_diets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveRecipeInformationAPI_200_response_dietary_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
