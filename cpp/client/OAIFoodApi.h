/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFoodApi_H
#define OAI_OAIFoodApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComputeNutritionAPI_200_response.h"
#include "OAIRetrieveRecipeInformationAPI_200_response.h"
#include "OAISearchDrinksAPI_200_response.h"
#include "OAISearchRecipesAPI_200_response.h"
#include "OAISearchRestaurantsAPI_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFoodApi : public QObject {
    Q_OBJECT

public:
    OAIFoodApi(const int timeOut = 0);
    ~OAIFoodApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  ingredients QString [required]
    * @param[in]  servings qint32 [optional]
    * @param[in]  reduce_oils bool [optional]
    */
    void computeNutritionAPI(const QString &ingredients, const ::OpenAPI::OptionalParam<qint32> &servings = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &reduce_oils = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  add_wine_pairing bool [optional]
    */
    void retrieveRecipeInformationAPI(const qint32 &id, const ::OpenAPI::OptionalParam<bool> &add_wine_pairing = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  glass_types QString [optional]
    * @param[in]  flavors QString [optional]
    * @param[in]  diet QString [optional]
    * @param[in]  include_ingredients QString [optional]
    * @param[in]  exclude_ingredients QString [optional]
    * @param[in]  min_calories double [optional]
    * @param[in]  max_calories double [optional]
    * @param[in]  min_carbs double [optional]
    * @param[in]  max_carbs double [optional]
    * @param[in]  min_protein double [optional]
    * @param[in]  max_protein double [optional]
    * @param[in]  min_fat double [optional]
    * @param[in]  max_fat double [optional]
    * @param[in]  min_alcohol_percent double [optional]
    * @param[in]  max_alcohol_percent double [optional]
    * @param[in]  min_caffeine double [optional]
    * @param[in]  max_caffeine double [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    */
    void searchDrinksAPI(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &glass_types = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &flavors = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &diet = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_ingredients = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_ingredients = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &min_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_alcohol_percent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_alcohol_percent = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_caffeine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_caffeine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  cuisines QString [optional]
    * @param[in]  exclude_cuisines QString [optional]
    * @param[in]  meal_type QString [optional]
    * @param[in]  diet QString [optional]
    * @param[in]  intolerances QString [optional]
    * @param[in]  equipment QString [optional]
    * @param[in]  include_ingredients QString [optional]
    * @param[in]  exclude_ingredients QString [optional]
    * @param[in]  fill_ingredients bool [optional]
    * @param[in]  add_recipe_information bool [optional]
    * @param[in]  max_time qint32 [optional]
    * @param[in]  min_servings qint32 [optional]
    * @param[in]  max_servings qint32 [optional]
    * @param[in]  min_calories double [optional]
    * @param[in]  max_calories double [optional]
    * @param[in]  min_carbs double [optional]
    * @param[in]  max_carbs double [optional]
    * @param[in]  min_protein double [optional]
    * @param[in]  max_protein double [optional]
    * @param[in]  min_fat double [optional]
    * @param[in]  max_fat double [optional]
    * @param[in]  min_sugar double [optional]
    * @param[in]  max_sugar double [optional]
    * @param[in]  min_fiber double [optional]
    * @param[in]  max_fiber double [optional]
    * @param[in]  min_folate double [optional]
    * @param[in]  max_folate double [optional]
    * @param[in]  min_folic_acid double [optional]
    * @param[in]  max_folic_acid double [optional]
    * @param[in]  min_iodine double [optional]
    * @param[in]  max_iodine double [optional]
    * @param[in]  min_iron double [optional]
    * @param[in]  max_iron double [optional]
    * @param[in]  min_zinc double [optional]
    * @param[in]  max_zinc double [optional]
    * @param[in]  min_magnesium double [optional]
    * @param[in]  max_magnesium double [optional]
    * @param[in]  min_manganese double [optional]
    * @param[in]  max_manganese double [optional]
    * @param[in]  min_phosphorus double [optional]
    * @param[in]  max_phosphorus double [optional]
    * @param[in]  min_potassium double [optional]
    * @param[in]  max_potassium double [optional]
    * @param[in]  min_sodium double [optional]
    * @param[in]  max_sodium double [optional]
    * @param[in]  min_selenium double [optional]
    * @param[in]  max_selenium double [optional]
    * @param[in]  min_copper double [optional]
    * @param[in]  max_copper double [optional]
    * @param[in]  min_calcium double [optional]
    * @param[in]  max_calcium double [optional]
    * @param[in]  min_choline double [optional]
    * @param[in]  max_choline double [optional]
    * @param[in]  min_cholesterol double [optional]
    * @param[in]  max_cholesterol double [optional]
    * @param[in]  min_fluoride double [optional]
    * @param[in]  max_fluoride double [optional]
    * @param[in]  min_alcohol double [optional]
    * @param[in]  max_alcohol double [optional]
    * @param[in]  min_caffeine double [optional]
    * @param[in]  max_caffeine double [optional]
    * @param[in]  min_saturated_fat double [optional]
    * @param[in]  max_saturated_fat double [optional]
    * @param[in]  min_vitamin_a double [optional]
    * @param[in]  max_vitamin_a double [optional]
    * @param[in]  min_vitamin_c double [optional]
    * @param[in]  max_vitamin_c double [optional]
    * @param[in]  min_vitamin_d double [optional]
    * @param[in]  max_vitamin_d double [optional]
    * @param[in]  min_vitamin_e double [optional]
    * @param[in]  max_vitamin_e double [optional]
    * @param[in]  min_vitamin_k double [optional]
    * @param[in]  max_vitamin_k double [optional]
    * @param[in]  min_vitamin_b1 double [optional]
    * @param[in]  max_vitamin_b1 double [optional]
    * @param[in]  min_vitamin_b2 double [optional]
    * @param[in]  max_vitamin_b2 double [optional]
    * @param[in]  min_vitamin_b3 double [optional]
    * @param[in]  max_vitamin_b3 double [optional]
    * @param[in]  min_vitamin_b5 double [optional]
    * @param[in]  max_vitamin_b5 double [optional]
    * @param[in]  min_vitamin_b6 double [optional]
    * @param[in]  max_vitamin_b6 double [optional]
    * @param[in]  min_vitamin_b12 double [optional]
    * @param[in]  max_vitamin_b12 double [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_direction QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    */
    void searchRecipesAPI(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cuisines = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_cuisines = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &meal_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &diet = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intolerances = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &equipment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_ingredients = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_ingredients = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &fill_ingredients = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &add_recipe_information = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &max_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_servings = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_servings = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &min_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calories = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_carbs = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_protein = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_sugar = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_sugar = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fiber = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fiber = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_folate = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_folate = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_folic_acid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_folic_acid = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_iodine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_iodine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_iron = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_iron = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_zinc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_zinc = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_magnesium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_magnesium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_manganese = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_manganese = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_phosphorus = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_phosphorus = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_potassium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_potassium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_sodium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_sodium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_selenium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_selenium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_copper = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_copper = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_calcium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_calcium = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_choline = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_choline = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_cholesterol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_cholesterol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_fluoride = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_fluoride = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_alcohol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_alcohol = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_caffeine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_caffeine = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_saturated_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_saturated_fat = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_a = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_a = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_c = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_c = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_d = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_d = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_e = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_e = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_k = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_k = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b1 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b1 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b2 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b2 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b3 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b3 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b5 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b5 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b6 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b6 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_vitamin_b12 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_vitamin_b12 = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  lat double [required]
    * @param[in]  lon double [required]
    * @param[in]  query QString [optional]
    * @param[in]  distance qint32 [optional]
    * @param[in]  budget double [optional]
    * @param[in]  min_rating double [optional]
    * @param[in]  cuisine QString [optional]
    * @param[in]  is_open bool [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    void searchRestaurantsAPI(const double &lat, const double &lon, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &distance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &budget = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &min_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &cuisine = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &is_open = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void computeNutritionAPICallback(OAIHttpRequestWorker *worker);
    void retrieveRecipeInformationAPICallback(OAIHttpRequestWorker *worker);
    void searchDrinksAPICallback(OAIHttpRequestWorker *worker);
    void searchRecipesAPICallback(OAIHttpRequestWorker *worker);
    void searchRestaurantsAPICallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void computeNutritionAPISignal(OAIComputeNutritionAPI_200_response summary);
    void retrieveRecipeInformationAPISignal(OAIRetrieveRecipeInformationAPI_200_response summary);
    void searchDrinksAPISignal(OAISearchDrinksAPI_200_response summary);
    void searchRecipesAPISignal(OAISearchRecipesAPI_200_response summary);
    void searchRestaurantsAPISignal(OAISearchRestaurantsAPI_200_response summary);

    void computeNutritionAPISignalFull(OAIHttpRequestWorker *worker, OAIComputeNutritionAPI_200_response summary);
    void retrieveRecipeInformationAPISignalFull(OAIHttpRequestWorker *worker, OAIRetrieveRecipeInformationAPI_200_response summary);
    void searchDrinksAPISignalFull(OAIHttpRequestWorker *worker, OAISearchDrinksAPI_200_response summary);
    void searchRecipesAPISignalFull(OAIHttpRequestWorker *worker, OAISearchRecipesAPI_200_response summary);
    void searchRestaurantsAPISignalFull(OAIHttpRequestWorker *worker, OAISearchRestaurantsAPI_200_response summary);

    Q_DECL_DEPRECATED_X("Use computeNutritionAPISignalError() instead")
    void computeNutritionAPISignalE(OAIComputeNutritionAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNutritionAPISignalError(OAIComputeNutritionAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveRecipeInformationAPISignalError() instead")
    void retrieveRecipeInformationAPISignalE(OAIRetrieveRecipeInformationAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveRecipeInformationAPISignalError(OAIRetrieveRecipeInformationAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDrinksAPISignalError() instead")
    void searchDrinksAPISignalE(OAISearchDrinksAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDrinksAPISignalError(OAISearchDrinksAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRecipesAPISignalError() instead")
    void searchRecipesAPISignalE(OAISearchRecipesAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRecipesAPISignalError(OAISearchRecipesAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRestaurantsAPISignalError() instead")
    void searchRestaurantsAPISignalE(OAISearchRestaurantsAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRestaurantsAPISignalError(OAISearchRestaurantsAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use computeNutritionAPISignalErrorFull() instead")
    void computeNutritionAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void computeNutritionAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use retrieveRecipeInformationAPISignalErrorFull() instead")
    void retrieveRecipeInformationAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void retrieveRecipeInformationAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchDrinksAPISignalErrorFull() instead")
    void searchDrinksAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchDrinksAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRecipesAPISignalErrorFull() instead")
    void searchRecipesAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRecipesAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchRestaurantsAPISignalErrorFull() instead")
    void searchRestaurantsAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRestaurantsAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
