/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.3
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetrieveRecipeInformation_200_response_taste.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetrieveRecipeInformation_200_response_taste::OAIRetrieveRecipeInformation_200_response_taste(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetrieveRecipeInformation_200_response_taste::OAIRetrieveRecipeInformation_200_response_taste() {
    this->initializeModel();
}

OAIRetrieveRecipeInformation_200_response_taste::~OAIRetrieveRecipeInformation_200_response_taste() {}

void OAIRetrieveRecipeInformation_200_response_taste::initializeModel() {

    m_fattiness_isSet = false;
    m_fattiness_isValid = false;

    m_spiciness_isSet = false;
    m_spiciness_isValid = false;

    m_saltiness_isSet = false;
    m_saltiness_isValid = false;

    m_bitterness_isSet = false;
    m_bitterness_isValid = false;

    m_savoriness_isSet = false;
    m_savoriness_isValid = false;

    m_sweetness_isSet = false;
    m_sweetness_isValid = false;

    m_sourness_isSet = false;
    m_sourness_isValid = false;
}

void OAIRetrieveRecipeInformation_200_response_taste::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetrieveRecipeInformation_200_response_taste::fromJsonObject(QJsonObject json) {

    m_fattiness_isValid = ::OpenAPI::fromJsonValue(m_fattiness, json[QString("fattiness")]);
    m_fattiness_isSet = !json[QString("fattiness")].isNull() && m_fattiness_isValid;

    m_spiciness_isValid = ::OpenAPI::fromJsonValue(m_spiciness, json[QString("spiciness")]);
    m_spiciness_isSet = !json[QString("spiciness")].isNull() && m_spiciness_isValid;

    m_saltiness_isValid = ::OpenAPI::fromJsonValue(m_saltiness, json[QString("saltiness")]);
    m_saltiness_isSet = !json[QString("saltiness")].isNull() && m_saltiness_isValid;

    m_bitterness_isValid = ::OpenAPI::fromJsonValue(m_bitterness, json[QString("bitterness")]);
    m_bitterness_isSet = !json[QString("bitterness")].isNull() && m_bitterness_isValid;

    m_savoriness_isValid = ::OpenAPI::fromJsonValue(m_savoriness, json[QString("savoriness")]);
    m_savoriness_isSet = !json[QString("savoriness")].isNull() && m_savoriness_isValid;

    m_sweetness_isValid = ::OpenAPI::fromJsonValue(m_sweetness, json[QString("sweetness")]);
    m_sweetness_isSet = !json[QString("sweetness")].isNull() && m_sweetness_isValid;

    m_sourness_isValid = ::OpenAPI::fromJsonValue(m_sourness, json[QString("sourness")]);
    m_sourness_isSet = !json[QString("sourness")].isNull() && m_sourness_isValid;
}

QString OAIRetrieveRecipeInformation_200_response_taste::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetrieveRecipeInformation_200_response_taste::asJsonObject() const {
    QJsonObject obj;
    if (m_fattiness_isSet) {
        obj.insert(QString("fattiness"), ::OpenAPI::toJsonValue(m_fattiness));
    }
    if (m_spiciness_isSet) {
        obj.insert(QString("spiciness"), ::OpenAPI::toJsonValue(m_spiciness));
    }
    if (m_saltiness_isSet) {
        obj.insert(QString("saltiness"), ::OpenAPI::toJsonValue(m_saltiness));
    }
    if (m_bitterness_isSet) {
        obj.insert(QString("bitterness"), ::OpenAPI::toJsonValue(m_bitterness));
    }
    if (m_savoriness_isSet) {
        obj.insert(QString("savoriness"), ::OpenAPI::toJsonValue(m_savoriness));
    }
    if (m_sweetness_isSet) {
        obj.insert(QString("sweetness"), ::OpenAPI::toJsonValue(m_sweetness));
    }
    if (m_sourness_isSet) {
        obj.insert(QString("sourness"), ::OpenAPI::toJsonValue(m_sourness));
    }
    return obj;
}

double OAIRetrieveRecipeInformation_200_response_taste::getFattiness() const {
    return m_fattiness;
}
void OAIRetrieveRecipeInformation_200_response_taste::setFattiness(const double &fattiness) {
    m_fattiness = fattiness;
    m_fattiness_isSet = true;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_fattiness_Set() const{
    return m_fattiness_isSet;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_fattiness_Valid() const{
    return m_fattiness_isValid;
}

qint32 OAIRetrieveRecipeInformation_200_response_taste::getSpiciness() const {
    return m_spiciness;
}
void OAIRetrieveRecipeInformation_200_response_taste::setSpiciness(const qint32 &spiciness) {
    m_spiciness = spiciness;
    m_spiciness_isSet = true;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_spiciness_Set() const{
    return m_spiciness_isSet;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_spiciness_Valid() const{
    return m_spiciness_isValid;
}

qint32 OAIRetrieveRecipeInformation_200_response_taste::getSaltiness() const {
    return m_saltiness;
}
void OAIRetrieveRecipeInformation_200_response_taste::setSaltiness(const qint32 &saltiness) {
    m_saltiness = saltiness;
    m_saltiness_isSet = true;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_saltiness_Set() const{
    return m_saltiness_isSet;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_saltiness_Valid() const{
    return m_saltiness_isValid;
}

double OAIRetrieveRecipeInformation_200_response_taste::getBitterness() const {
    return m_bitterness;
}
void OAIRetrieveRecipeInformation_200_response_taste::setBitterness(const double &bitterness) {
    m_bitterness = bitterness;
    m_bitterness_isSet = true;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_bitterness_Set() const{
    return m_bitterness_isSet;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_bitterness_Valid() const{
    return m_bitterness_isValid;
}

double OAIRetrieveRecipeInformation_200_response_taste::getSavoriness() const {
    return m_savoriness;
}
void OAIRetrieveRecipeInformation_200_response_taste::setSavoriness(const double &savoriness) {
    m_savoriness = savoriness;
    m_savoriness_isSet = true;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_savoriness_Set() const{
    return m_savoriness_isSet;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_savoriness_Valid() const{
    return m_savoriness_isValid;
}

double OAIRetrieveRecipeInformation_200_response_taste::getSweetness() const {
    return m_sweetness;
}
void OAIRetrieveRecipeInformation_200_response_taste::setSweetness(const double &sweetness) {
    m_sweetness = sweetness;
    m_sweetness_isSet = true;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_sweetness_Set() const{
    return m_sweetness_isSet;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_sweetness_Valid() const{
    return m_sweetness_isValid;
}

double OAIRetrieveRecipeInformation_200_response_taste::getSourness() const {
    return m_sourness;
}
void OAIRetrieveRecipeInformation_200_response_taste::setSourness(const double &sourness) {
    m_sourness = sourness;
    m_sourness_isSet = true;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_sourness_Set() const{
    return m_sourness_isSet;
}

bool OAIRetrieveRecipeInformation_200_response_taste::is_sourness_Valid() const{
    return m_sourness_isValid;
}

bool OAIRetrieveRecipeInformation_200_response_taste::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fattiness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spiciness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saltiness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bitterness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_savoriness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sweetness_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sourness_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetrieveRecipeInformation_200_response_taste::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
