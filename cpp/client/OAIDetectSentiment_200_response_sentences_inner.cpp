/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectSentiment_200_response_sentences_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectSentiment_200_response_sentences_inner::OAIDetectSentiment_200_response_sentences_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectSentiment_200_response_sentences_inner::OAIDetectSentiment_200_response_sentences_inner() {
    this->initializeModel();
}

OAIDetectSentiment_200_response_sentences_inner::~OAIDetectSentiment_200_response_sentences_inner() {}

void OAIDetectSentiment_200_response_sentences_inner::initializeModel() {

    m_length_isSet = false;
    m_length_isValid = false;

    m_sentiment_isSet = false;
    m_sentiment_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;
}

void OAIDetectSentiment_200_response_sentences_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectSentiment_200_response_sentences_inner::fromJsonObject(QJsonObject json) {

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_sentiment_isValid = ::OpenAPI::fromJsonValue(m_sentiment, json[QString("sentiment")]);
    m_sentiment_isSet = !json[QString("sentiment")].isNull() && m_sentiment_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;
}

QString OAIDetectSentiment_200_response_sentences_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectSentiment_200_response_sentences_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_sentiment_isSet) {
        obj.insert(QString("sentiment"), ::OpenAPI::toJsonValue(m_sentiment));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    return obj;
}

qint32 OAIDetectSentiment_200_response_sentences_inner::getLength() const {
    return m_length;
}
void OAIDetectSentiment_200_response_sentences_inner::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIDetectSentiment_200_response_sentences_inner::is_length_Set() const{
    return m_length_isSet;
}

bool OAIDetectSentiment_200_response_sentences_inner::is_length_Valid() const{
    return m_length_isValid;
}

QString OAIDetectSentiment_200_response_sentences_inner::getSentiment() const {
    return m_sentiment;
}
void OAIDetectSentiment_200_response_sentences_inner::setSentiment(const QString &sentiment) {
    m_sentiment = sentiment;
    m_sentiment_isSet = true;
}

bool OAIDetectSentiment_200_response_sentences_inner::is_sentiment_Set() const{
    return m_sentiment_isSet;
}

bool OAIDetectSentiment_200_response_sentences_inner::is_sentiment_Valid() const{
    return m_sentiment_isValid;
}

qint32 OAIDetectSentiment_200_response_sentences_inner::getOffset() const {
    return m_offset;
}
void OAIDetectSentiment_200_response_sentences_inner::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIDetectSentiment_200_response_sentences_inner::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIDetectSentiment_200_response_sentences_inner::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAIDetectSentiment_200_response_sentences_inner::getConfidence() const {
    return m_confidence;
}
void OAIDetectSentiment_200_response_sentences_inner::setConfidence(const qint32 &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIDetectSentiment_200_response_sentences_inner::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIDetectSentiment_200_response_sentences_inner::is_confidence_Valid() const{
    return m_confidence_isValid;
}

bool OAIDetectSentiment_200_response_sentences_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sentiment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectSentiment_200_response_sentences_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
