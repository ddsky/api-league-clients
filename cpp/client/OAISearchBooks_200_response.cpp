/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchBooks_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchBooks_200_response::OAISearchBooks_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchBooks_200_response::OAISearchBooks_200_response() {
    this->initializeModel();
}

OAISearchBooks_200_response::~OAISearchBooks_200_response() {}

void OAISearchBooks_200_response::initializeModel() {

    m_available_isSet = false;
    m_available_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_books_isSet = false;
    m_books_isValid = false;
}

void OAISearchBooks_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchBooks_200_response::fromJsonObject(QJsonObject json) {

    m_available_isValid = ::OpenAPI::fromJsonValue(m_available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    if(json["books"].isArray()){
        auto arr = json["books"].toArray();
        m_books_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QList<OAISearchBooks_200_response_books_inner_inner> item;
                m_books_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_books_isSet = !jval.isNull() && m_books_isValid;
                m_books.push_back(item);
            }
        }
    }
}

QString OAISearchBooks_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchBooks_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(m_available));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_books.size() > 0) {
        
        obj.insert(QString("books"), toJsonValue(m_books));
    }
    return obj;
}

qint32 OAISearchBooks_200_response::getAvailable() const {
    return m_available;
}
void OAISearchBooks_200_response::setAvailable(const qint32 &available) {
    m_available = available;
    m_available_isSet = true;
}

bool OAISearchBooks_200_response::is_available_Set() const{
    return m_available_isSet;
}

bool OAISearchBooks_200_response::is_available_Valid() const{
    return m_available_isValid;
}

qint32 OAISearchBooks_200_response::getNumber() const {
    return m_number;
}
void OAISearchBooks_200_response::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAISearchBooks_200_response::is_number_Set() const{
    return m_number_isSet;
}

bool OAISearchBooks_200_response::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAISearchBooks_200_response::getOffset() const {
    return m_offset;
}
void OAISearchBooks_200_response::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAISearchBooks_200_response::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAISearchBooks_200_response::is_offset_Valid() const{
    return m_offset_isValid;
}

QList<QList<OAISearchBooks_200_response_books_inner_inner>> OAISearchBooks_200_response::getBooks() const {
    return m_books;
}
void OAISearchBooks_200_response::setBooks(const QList<QList<OAISearchBooks_200_response_books_inner_inner>> &books) {
    m_books = books;
    m_books_isSet = true;
}

bool OAISearchBooks_200_response::is_books_Set() const{
    return m_books_isSet;
}

bool OAISearchBooks_200_response::is_books_Valid() const{
    return m_books_isValid;
}

bool OAISearchBooks_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_books.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchBooks_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
