/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMediaApi_H
#define OAI_OAIMediaApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "com.apileague.client.model\OAIInline_response_200_28.h"
#include "com.apileague.client.model\OAIInline_response_200_29.h"
#include "com.apileague.client.model\OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMediaApi : public QObject {
    Q_OBJECT

public:
    OAIMediaApi(const int timeOut = 0);
    ~OAIMediaApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    */
    void detectMainImageColor(const QString &url);

    /**
    * @param[in]  url QString [required]
    * @param[in]  width qint32 [required]
    * @param[in]  height qint32 [required]
    * @param[in]  crop bool [required]
    */
    void rescaleImage(const QString &url, const qint32 &width, const qint32 &height, const bool &crop);

    /**
    * @param[in]  query QString [required]
    * @param[in]  number qint32 [optional]
    */
    void searchRoyaltyFreeImages(const QString &query, const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void detectMainImageColorCallback(OAIHttpRequestWorker *worker);
    void rescaleImageCallback(OAIHttpRequestWorker *worker);
    void searchRoyaltyFreeImagesCallback(OAIHttpRequestWorker *worker);

signals:

    void detectMainImageColorSignal(QList<OAIInline_response_200_29> summary);
    void rescaleImageSignal(OAIObject summary);
    void searchRoyaltyFreeImagesSignal(OAIInline_response_200_28 summary);

    void detectMainImageColorSignalFull(OAIHttpRequestWorker *worker, QList<OAIInline_response_200_29> summary);
    void rescaleImageSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void searchRoyaltyFreeImagesSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_28 summary);

    void detectMainImageColorSignalE(QList<OAIInline_response_200_29> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void rescaleImageSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRoyaltyFreeImagesSignalE(OAIInline_response_200_28 summary, QNetworkReply::NetworkError error_type, QString error_str);

    void detectMainImageColorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rescaleImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchRoyaltyFreeImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
