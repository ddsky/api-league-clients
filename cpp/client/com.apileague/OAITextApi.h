/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextApi_H
#define OAI_OAITextApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "com.apileague.client.model\OAIInline_response_200_16.h"
#include "com.apileague.client.model\OAIInline_response_200_17.h"
#include "com.apileague.client.model\OAIInline_response_200_18.h"
#include "com.apileague.client.model\OAIInline_response_200_19.h"
#include "com.apileague.client.model\OAIInline_response_200_20.h"
#include "com.apileague.client.model\OAIInline_response_200_21.h"
#include "com.apileague.client.model\OAIInline_response_200_22.h"
#include "com.apileague.client.model\OAIInline_response_200_23.h"
#include "com.apileague.client.model\OAIInline_response_200_24.h"
#include "com.apileague.client.model\OAIInline_response_200_25.h"
#include "com.apileague.client.model\OAIInline_response_200_26.h"
#include "com.apileague.client.model\OAIInline_response_200_27.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITextApi : public QObject {
    Q_OBJECT

public:
    OAITextApi(const int timeOut = 0);
    ~OAITextApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  text QString [required]
    * @param[in]  language QString [required]
    */
    void correctSpelling(const QString &text, const QString &language);

    /**
    * @param[in]  text QString [required]
    */
    void detectLanguage(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    void detectSentiment(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    void extractDates(const QString &text);

    /**
    * @param[in]  text QString [required]
    */
    void extractEntities(const QString &text);

    /**
    * @param[in]  word QString [required]
    */
    void listWordSynonyms(const QString &word);

    /**
    * @param[in]  text QString [required]
    */
    void partOfSpeechTagging(const QString &text);

    /**
    * @param[in]  word QString [required]
    */
    void pluralizeWord(const QString &word);

    /**
    * @param[in]  text QString [required]
    */
    void scoreReadability(const QString &text);

    /**
    * @param[in]  title QString [required]
    * @param[in]  text QString [required]
    */
    void scoreText(const QString &title, const QString &text);

    /**
    * @param[in]  word QString [required]
    */
    void singularizeWord(const QString &word);

    /**
    * @param[in]  text QString [required]
    */
    void textStemming(const QString &text);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void correctSpellingCallback(OAIHttpRequestWorker *worker);
    void detectLanguageCallback(OAIHttpRequestWorker *worker);
    void detectSentimentCallback(OAIHttpRequestWorker *worker);
    void extractDatesCallback(OAIHttpRequestWorker *worker);
    void extractEntitiesCallback(OAIHttpRequestWorker *worker);
    void listWordSynonymsCallback(OAIHttpRequestWorker *worker);
    void partOfSpeechTaggingCallback(OAIHttpRequestWorker *worker);
    void pluralizeWordCallback(OAIHttpRequestWorker *worker);
    void scoreReadabilityCallback(OAIHttpRequestWorker *worker);
    void scoreTextCallback(OAIHttpRequestWorker *worker);
    void singularizeWordCallback(OAIHttpRequestWorker *worker);
    void textStemmingCallback(OAIHttpRequestWorker *worker);

signals:

    void correctSpellingSignal(OAIInline_response_200_16 summary);
    void detectLanguageSignal(QList<OAIInline_response_200_17> summary);
    void detectSentimentSignal(OAIInline_response_200_18 summary);
    void extractDatesSignal(OAIInline_response_200_21 summary);
    void extractEntitiesSignal(OAIInline_response_200_27 summary);
    void listWordSynonymsSignal(OAIInline_response_200_22 summary);
    void partOfSpeechTaggingSignal(OAIInline_response_200_23 summary);
    void pluralizeWordSignal(OAIInline_response_200_26 summary);
    void scoreReadabilitySignal(OAIInline_response_200_20 summary);
    void scoreTextSignal(OAIInline_response_200_19 summary);
    void singularizeWordSignal(OAIInline_response_200_25 summary);
    void textStemmingSignal(OAIInline_response_200_24 summary);

    void correctSpellingSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_16 summary);
    void detectLanguageSignalFull(OAIHttpRequestWorker *worker, QList<OAIInline_response_200_17> summary);
    void detectSentimentSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_18 summary);
    void extractDatesSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_21 summary);
    void extractEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_27 summary);
    void listWordSynonymsSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_22 summary);
    void partOfSpeechTaggingSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_23 summary);
    void pluralizeWordSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_26 summary);
    void scoreReadabilitySignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_20 summary);
    void scoreTextSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_19 summary);
    void singularizeWordSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_25 summary);
    void textStemmingSignalFull(OAIHttpRequestWorker *worker, OAIInline_response_200_24 summary);

    void correctSpellingSignalE(OAIInline_response_200_16 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectLanguageSignalE(QList<OAIInline_response_200_17> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void detectSentimentSignalE(OAIInline_response_200_18 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractDatesSignalE(OAIInline_response_200_21 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void extractEntitiesSignalE(OAIInline_response_200_27 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listWordSynonymsSignalE(OAIInline_response_200_22 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partOfSpeechTaggingSignalE(OAIInline_response_200_23 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pluralizeWordSignalE(OAIInline_response_200_26 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreReadabilitySignalE(OAIInline_response_200_20 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreTextSignalE(OAIInline_response_200_19 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void singularizeWordSignalE(OAIInline_response_200_25 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void textStemmingSignalE(OAIInline_response_200_24 summary, QNetworkReply::NetworkError error_type, QString error_str);

    void correctSpellingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void detectSentimentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractDatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void extractEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listWordSynonymsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partOfSpeechTaggingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pluralizeWordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreReadabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void singularizeWordSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void textStemmingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
