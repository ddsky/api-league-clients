/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchDrinksAPI_200_response_drinks_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchDrinksAPI_200_response_drinks_inner::OAISearchDrinksAPI_200_response_drinks_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchDrinksAPI_200_response_drinks_inner::OAISearchDrinksAPI_200_response_drinks_inner() {
    this->initializeModel();
}

OAISearchDrinksAPI_200_response_drinks_inner::~OAISearchDrinksAPI_200_response_drinks_inner() {}

void OAISearchDrinksAPI_200_response_drinks_inner::initializeModel() {

    m_flavors_isSet = false;
    m_flavors_isValid = false;

    m_instructions_isSet = false;
    m_instructions_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_nutrition_isSet = false;
    m_nutrition_isValid = false;

    m_glass_type_isSet = false;
    m_glass_type_isValid = false;

    m_credits_isSet = false;
    m_credits_isValid = false;

    m_price_per_serving_isSet = false;
    m_price_per_serving_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ingredients_isSet = false;
    m_ingredients_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_cuisines_isSet = false;
    m_cuisines_isValid = false;
}

void OAISearchDrinksAPI_200_response_drinks_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchDrinksAPI_200_response_drinks_inner::fromJsonObject(QJsonObject json) {

    m_flavors_isValid = ::OpenAPI::fromJsonValue(m_flavors, json[QString("flavors")]);
    m_flavors_isSet = !json[QString("flavors")].isNull() && m_flavors_isValid;

    m_instructions_isValid = ::OpenAPI::fromJsonValue(m_instructions, json[QString("instructions")]);
    m_instructions_isSet = !json[QString("instructions")].isNull() && m_instructions_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_nutrition_isValid = ::OpenAPI::fromJsonValue(m_nutrition, json[QString("nutrition")]);
    m_nutrition_isSet = !json[QString("nutrition")].isNull() && m_nutrition_isValid;

    m_glass_type_isValid = ::OpenAPI::fromJsonValue(m_glass_type, json[QString("glass_type")]);
    m_glass_type_isSet = !json[QString("glass_type")].isNull() && m_glass_type_isValid;

    m_credits_isValid = ::OpenAPI::fromJsonValue(m_credits, json[QString("credits")]);
    m_credits_isSet = !json[QString("credits")].isNull() && m_credits_isValid;

    m_price_per_serving_isValid = ::OpenAPI::fromJsonValue(m_price_per_serving, json[QString("price_per_serving")]);
    m_price_per_serving_isSet = !json[QString("price_per_serving")].isNull() && m_price_per_serving_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ingredients_isValid = ::OpenAPI::fromJsonValue(m_ingredients, json[QString("ingredients")]);
    m_ingredients_isSet = !json[QString("ingredients")].isNull() && m_ingredients_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_cuisines_isValid = ::OpenAPI::fromJsonValue(m_cuisines, json[QString("cuisines")]);
    m_cuisines_isSet = !json[QString("cuisines")].isNull() && m_cuisines_isValid;
}

QString OAISearchDrinksAPI_200_response_drinks_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchDrinksAPI_200_response_drinks_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_flavors.size() > 0) {
        obj.insert(QString("flavors"), ::OpenAPI::toJsonValue(m_flavors));
    }
    if (m_instructions.size() > 0) {
        obj.insert(QString("instructions"), ::OpenAPI::toJsonValue(m_instructions));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_nutrition.isSet()) {
        obj.insert(QString("nutrition"), ::OpenAPI::toJsonValue(m_nutrition));
    }
    if (m_glass_type_isSet) {
        obj.insert(QString("glass_type"), ::OpenAPI::toJsonValue(m_glass_type));
    }
    if (m_credits.isSet()) {
        obj.insert(QString("credits"), ::OpenAPI::toJsonValue(m_credits));
    }
    if (m_price_per_serving_isSet) {
        obj.insert(QString("price_per_serving"), ::OpenAPI::toJsonValue(m_price_per_serving));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ingredients.size() > 0) {
        obj.insert(QString("ingredients"), ::OpenAPI::toJsonValue(m_ingredients));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_cuisines.size() > 0) {
        obj.insert(QString("cuisines"), ::OpenAPI::toJsonValue(m_cuisines));
    }
    return obj;
}

QList<QString> OAISearchDrinksAPI_200_response_drinks_inner::getFlavors() const {
    return m_flavors;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setFlavors(const QList<QString> &flavors) {
    m_flavors = flavors;
    m_flavors_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_flavors_Set() const{
    return m_flavors_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_flavors_Valid() const{
    return m_flavors_isValid;
}

QList<OAISearchDrinksAPI_200_response_drinks_inner_instructions_inner> OAISearchDrinksAPI_200_response_drinks_inner::getInstructions() const {
    return m_instructions;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setInstructions(const QList<OAISearchDrinksAPI_200_response_drinks_inner_instructions_inner> &instructions) {
    m_instructions = instructions;
    m_instructions_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_instructions_Set() const{
    return m_instructions_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_instructions_Valid() const{
    return m_instructions_isValid;
}

QList<QString> OAISearchDrinksAPI_200_response_drinks_inner::getImages() const {
    return m_images;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setImages(const QList<QString> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_images_Set() const{
    return m_images_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_images_Valid() const{
    return m_images_isValid;
}

OAISearchDrinksAPI_200_response_drinks_inner_nutrition OAISearchDrinksAPI_200_response_drinks_inner::getNutrition() const {
    return m_nutrition;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setNutrition(const OAISearchDrinksAPI_200_response_drinks_inner_nutrition &nutrition) {
    m_nutrition = nutrition;
    m_nutrition_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_nutrition_Set() const{
    return m_nutrition_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_nutrition_Valid() const{
    return m_nutrition_isValid;
}

QString OAISearchDrinksAPI_200_response_drinks_inner::getGlassType() const {
    return m_glass_type;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setGlassType(const QString &glass_type) {
    m_glass_type = glass_type;
    m_glass_type_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_glass_type_Set() const{
    return m_glass_type_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_glass_type_Valid() const{
    return m_glass_type_isValid;
}

OAISearchDrinksAPI_200_response_drinks_inner_credits OAISearchDrinksAPI_200_response_drinks_inner::getCredits() const {
    return m_credits;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setCredits(const OAISearchDrinksAPI_200_response_drinks_inner_credits &credits) {
    m_credits = credits;
    m_credits_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_credits_Set() const{
    return m_credits_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_credits_Valid() const{
    return m_credits_isValid;
}

double OAISearchDrinksAPI_200_response_drinks_inner::getPricePerServing() const {
    return m_price_per_serving;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setPricePerServing(const double &price_per_serving) {
    m_price_per_serving = price_per_serving;
    m_price_per_serving_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_price_per_serving_Set() const{
    return m_price_per_serving_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_price_per_serving_Valid() const{
    return m_price_per_serving_isValid;
}

QString OAISearchDrinksAPI_200_response_drinks_inner::getDescription() const {
    return m_description;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAISearchDrinksAPI_200_response_drinks_inner_ingredients_inner> OAISearchDrinksAPI_200_response_drinks_inner::getIngredients() const {
    return m_ingredients;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setIngredients(const QList<OAISearchDrinksAPI_200_response_drinks_inner_ingredients_inner> &ingredients) {
    m_ingredients = ingredients;
    m_ingredients_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_ingredients_Set() const{
    return m_ingredients_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_ingredients_Valid() const{
    return m_ingredients_isValid;
}

qint32 OAISearchDrinksAPI_200_response_drinks_inner::getId() const {
    return m_id;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISearchDrinksAPI_200_response_drinks_inner::getTitle() const {
    return m_title;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_title_Valid() const{
    return m_title_isValid;
}

QList<QString> OAISearchDrinksAPI_200_response_drinks_inner::getCuisines() const {
    return m_cuisines;
}
void OAISearchDrinksAPI_200_response_drinks_inner::setCuisines(const QList<QString> &cuisines) {
    m_cuisines = cuisines;
    m_cuisines_isSet = true;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_cuisines_Set() const{
    return m_cuisines_isSet;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::is_cuisines_Valid() const{
    return m_cuisines_isValid;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_flavors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_nutrition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_glass_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credits.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_per_serving_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ingredients.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cuisines.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchDrinksAPI_200_response_drinks_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
