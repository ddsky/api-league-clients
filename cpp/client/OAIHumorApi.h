/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHumorApi_H
#define OAI_OAIHumorApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGenerateNonsenseWordAPI_200_response.h"
#include "OAIRandomMemeAPI_200_response.h"
#include "OAISearchGifsAPI_200_response.h"
#include "OAISearchJokesAPI_200_response.h"
#include "OAISearchJokesAPI_200_response_jokes_inner.h"
#include "OAISearchMemesAPI_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHumorApi : public QObject {
    Q_OBJECT

public:
    OAIHumorApi(const int timeOut = 0);
    ~OAIHumorApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void generateNonsenseWordAPI();

    /**
    * @param[in]  include_tags QString [optional]
    * @param[in]  exclude_tags QString [optional]
    * @param[in]  min_rating double [optional]
    * @param[in]  max_length qint32 [optional]
    */
    void randomJokeAPI(const ::OpenAPI::OptionalParam<QString> &include_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &min_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &max_length = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  keywords QString [optional]
    * @param[in]  keywords_in_image bool [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  min_rating double [optional]
    * @param[in]  max_age_days qint32 [optional]
    */
    void randomMemeAPI(const ::OpenAPI::OptionalParam<QString> &keywords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &keywords_in_image = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &min_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &max_age_days = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  number qint32 [optional]
    */
    void searchGifsAPI(const QString &query, const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  keywords QString [optional]
    * @param[in]  include_tags QString [optional]
    * @param[in]  exclude_tags QString [optional]
    * @param[in]  min_rating double [optional]
    * @param[in]  max_length double [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    */
    void searchJokesAPI(const ::OpenAPI::OptionalParam<QString> &keywords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude_tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &min_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &max_length = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  keywords QString [optional]
    * @param[in]  keywords_in_image bool [optional]
    * @param[in]  media_type QString [optional]
    * @param[in]  min_rating double [optional]
    * @param[in]  max_age_days qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  number qint32 [optional]
    */
    void searchMemesAPI(const ::OpenAPI::OptionalParam<QString> &keywords = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &keywords_in_image = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &media_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &min_rating = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &max_age_days = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &number = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void generateNonsenseWordAPICallback(OAIHttpRequestWorker *worker);
    void randomJokeAPICallback(OAIHttpRequestWorker *worker);
    void randomMemeAPICallback(OAIHttpRequestWorker *worker);
    void searchGifsAPICallback(OAIHttpRequestWorker *worker);
    void searchJokesAPICallback(OAIHttpRequestWorker *worker);
    void searchMemesAPICallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void generateNonsenseWordAPISignal(OAIGenerateNonsenseWordAPI_200_response summary);
    void randomJokeAPISignal(OAISearchJokesAPI_200_response_jokes_inner summary);
    void randomMemeAPISignal(OAIRandomMemeAPI_200_response summary);
    void searchGifsAPISignal(OAISearchGifsAPI_200_response summary);
    void searchJokesAPISignal(OAISearchJokesAPI_200_response summary);
    void searchMemesAPISignal(OAISearchMemesAPI_200_response summary);

    void generateNonsenseWordAPISignalFull(OAIHttpRequestWorker *worker, OAIGenerateNonsenseWordAPI_200_response summary);
    void randomJokeAPISignalFull(OAIHttpRequestWorker *worker, OAISearchJokesAPI_200_response_jokes_inner summary);
    void randomMemeAPISignalFull(OAIHttpRequestWorker *worker, OAIRandomMemeAPI_200_response summary);
    void searchGifsAPISignalFull(OAIHttpRequestWorker *worker, OAISearchGifsAPI_200_response summary);
    void searchJokesAPISignalFull(OAIHttpRequestWorker *worker, OAISearchJokesAPI_200_response summary);
    void searchMemesAPISignalFull(OAIHttpRequestWorker *worker, OAISearchMemesAPI_200_response summary);

    Q_DECL_DEPRECATED_X("Use generateNonsenseWordAPISignalError() instead")
    void generateNonsenseWordAPISignalE(OAIGenerateNonsenseWordAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateNonsenseWordAPISignalError(OAIGenerateNonsenseWordAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use randomJokeAPISignalError() instead")
    void randomJokeAPISignalE(OAISearchJokesAPI_200_response_jokes_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void randomJokeAPISignalError(OAISearchJokesAPI_200_response_jokes_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use randomMemeAPISignalError() instead")
    void randomMemeAPISignalE(OAIRandomMemeAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void randomMemeAPISignalError(OAIRandomMemeAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGifsAPISignalError() instead")
    void searchGifsAPISignalE(OAISearchGifsAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGifsAPISignalError(OAISearchGifsAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchJokesAPISignalError() instead")
    void searchJokesAPISignalE(OAISearchJokesAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchJokesAPISignalError(OAISearchJokesAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMemesAPISignalError() instead")
    void searchMemesAPISignalE(OAISearchMemesAPI_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMemesAPISignalError(OAISearchMemesAPI_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use generateNonsenseWordAPISignalErrorFull() instead")
    void generateNonsenseWordAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateNonsenseWordAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use randomJokeAPISignalErrorFull() instead")
    void randomJokeAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void randomJokeAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use randomMemeAPISignalErrorFull() instead")
    void randomMemeAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void randomMemeAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGifsAPISignalErrorFull() instead")
    void searchGifsAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGifsAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchJokesAPISignalErrorFull() instead")
    void searchJokesAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchJokesAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchMemesAPISignalErrorFull() instead")
    void searchMemesAPISignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchMemesAPISignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
