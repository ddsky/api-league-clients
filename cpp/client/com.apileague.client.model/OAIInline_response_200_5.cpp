/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200_5.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200_5::OAIInline_response_200_5(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200_5::OAIInline_response_200_5() {
    this->initializeModel();
}

OAIInline_response_200_5::~OAIInline_response_200_5() {}

void OAIInline_response_200_5::initializeModel() {

    m_memes_isSet = false;
    m_memes_isValid = false;

    m_available_isSet = false;
    m_available_isValid = false;
}

void OAIInline_response_200_5::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200_5::fromJsonObject(QJsonObject json) {

    m_memes_isValid = ::OpenAPI::fromJsonValue(memes, json[QString("memes")]);
    m_memes_isSet = !json[QString("memes")].isNull() && m_memes_isValid;

    m_available_isValid = ::OpenAPI::fromJsonValue(available, json[QString("available")]);
    m_available_isSet = !json[QString("available")].isNull() && m_available_isValid;
}

QString OAIInline_response_200_5::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200_5::asJsonObject() const {
    QJsonObject obj;
    if (memes.size() > 0) {
        obj.insert(QString("memes"), ::OpenAPI::toJsonValue(memes));
    }
    if (m_available_isSet) {
        obj.insert(QString("available"), ::OpenAPI::toJsonValue(available));
    }
    return obj;
}

QList<OAIInline_response_200_5_memes> OAIInline_response_200_5::getMemes() const {
    return memes;
}
void OAIInline_response_200_5::setMemes(const QList<OAIInline_response_200_5_memes> &memes) {
    this->memes = memes;
    this->m_memes_isSet = true;
}

bool OAIInline_response_200_5::is_memes_Set() const{
    return m_memes_isSet;
}

bool OAIInline_response_200_5::is_memes_Valid() const{
    return m_memes_isValid;
}

qint32 OAIInline_response_200_5::getAvailable() const {
    return available;
}
void OAIInline_response_200_5::setAvailable(const qint32 &available) {
    this->available = available;
    this->m_available_isSet = true;
}

bool OAIInline_response_200_5::is_available_Set() const{
    return m_available_isSet;
}

bool OAIInline_response_200_5::is_available_Valid() const{
    return m_available_isValid;
}

bool OAIInline_response_200_5::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (memes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200_5::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
