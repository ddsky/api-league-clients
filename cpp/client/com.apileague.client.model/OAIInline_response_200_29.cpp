/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInline_response_200_29.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInline_response_200_29::OAIInline_response_200_29(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInline_response_200_29::OAIInline_response_200_29() {
    this->initializeModel();
}

OAIInline_response_200_29::~OAIInline_response_200_29() {}

void OAIInline_response_200_29::initializeModel() {

    m_specific_color_isSet = false;
    m_specific_color_isValid = false;

    m_main_color_isSet = false;
    m_main_color_isValid = false;

    m_hex_code_isSet = false;
    m_hex_code_isValid = false;
}

void OAIInline_response_200_29::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInline_response_200_29::fromJsonObject(QJsonObject json) {

    m_specific_color_isValid = ::OpenAPI::fromJsonValue(specific_color, json[QString("specific_color")]);
    m_specific_color_isSet = !json[QString("specific_color")].isNull() && m_specific_color_isValid;

    m_main_color_isValid = ::OpenAPI::fromJsonValue(main_color, json[QString("main_color")]);
    m_main_color_isSet = !json[QString("main_color")].isNull() && m_main_color_isValid;

    m_hex_code_isValid = ::OpenAPI::fromJsonValue(hex_code, json[QString("hex_code")]);
    m_hex_code_isSet = !json[QString("hex_code")].isNull() && m_hex_code_isValid;
}

QString OAIInline_response_200_29::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInline_response_200_29::asJsonObject() const {
    QJsonObject obj;
    if (m_specific_color_isSet) {
        obj.insert(QString("specific_color"), ::OpenAPI::toJsonValue(specific_color));
    }
    if (m_main_color_isSet) {
        obj.insert(QString("main_color"), ::OpenAPI::toJsonValue(main_color));
    }
    if (m_hex_code_isSet) {
        obj.insert(QString("hex_code"), ::OpenAPI::toJsonValue(hex_code));
    }
    return obj;
}

QString OAIInline_response_200_29::getSpecificColor() const {
    return specific_color;
}
void OAIInline_response_200_29::setSpecificColor(const QString &specific_color) {
    this->specific_color = specific_color;
    this->m_specific_color_isSet = true;
}

bool OAIInline_response_200_29::is_specific_color_Set() const{
    return m_specific_color_isSet;
}

bool OAIInline_response_200_29::is_specific_color_Valid() const{
    return m_specific_color_isValid;
}

QString OAIInline_response_200_29::getMainColor() const {
    return main_color;
}
void OAIInline_response_200_29::setMainColor(const QString &main_color) {
    this->main_color = main_color;
    this->m_main_color_isSet = true;
}

bool OAIInline_response_200_29::is_main_color_Set() const{
    return m_main_color_isSet;
}

bool OAIInline_response_200_29::is_main_color_Valid() const{
    return m_main_color_isValid;
}

QString OAIInline_response_200_29::getHexCode() const {
    return hex_code;
}
void OAIInline_response_200_29::setHexCode(const QString &hex_code) {
    this->hex_code = hex_code;
    this->m_hex_code_isSet = true;
}

bool OAIInline_response_200_29::is_hex_code_Set() const{
    return m_hex_code_isSet;
}

bool OAIInline_response_200_29::is_hex_code_Valid() const{
    return m_hex_code_isValid;
}

bool OAIInline_response_200_29::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_specific_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_main_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hex_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInline_response_200_29::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
