=begin
#API League

#API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.0.0
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::ArtApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ArtApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::ArtApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ArtApi' do
    it 'should create an instance of ArtApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::ArtApi)
    end
  end

  # unit tests for image_to_ascii_art_by_url
  # Image to Ascii Art by URL
  # Convert an image to ASCII art. You can pass the image URL as a query parameter. The API returns the ASCII art as plain text. This endpoint is using the GET method and an image URL as a query parameter.
  # @param url The URL to the image.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :width The maximum width of the image (default 400, max. 500).
  # @option opts [Integer] :height The maximum height of the image (default 400, max. 500).
  # @return [String]
  describe 'image_to_ascii_art_by_url test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for random_poem
  # Random Poem
  # Retrieve a random poem by many famous authors. You can filter poem&#39;s by length (number of lines).
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :min_lines The minimum number of lines of the poem.
  # @option opts [Integer] :max_lines The maximum number of lines of the poem.
  # @return [RandomPoem200Response]
  describe 'random_poem test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
