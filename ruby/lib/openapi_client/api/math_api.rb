=begin
#API League

#API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.3.0
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module OpenapiClient
  class MathApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Convert Units
    # Convert units from one to another. The API returns the amount and the unit of the target unit.
    # @param source_amount [Float] The source amount.
    # @param source_unit [String] The source unit.
    # @param target_unit [String] The unit to which should be converted.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :food_name An optional food name. For converting foods the food is relevant as they have different densities.
    # @return [ConvertUnits200Response]
    def convert_units(source_amount, source_unit, target_unit, opts = {})
      data, _status_code, _headers = convert_units_with_http_info(source_amount, source_unit, target_unit, opts)
      data
    end

    # Convert Units
    # Convert units from one to another. The API returns the amount and the unit of the target unit.
    # @param source_amount [Float] The source amount.
    # @param source_unit [String] The source unit.
    # @param target_unit [String] The unit to which should be converted.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :food_name An optional food name. For converting foods the food is relevant as they have different densities.
    # @return [Array<(ConvertUnits200Response, Integer, Hash)>] ConvertUnits200Response data, response status code and response headers
    def convert_units_with_http_info(source_amount, source_unit, target_unit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MathApi.convert_units ...'
      end
      # verify the required parameter 'source_amount' is set
      if @api_client.config.client_side_validation && source_amount.nil?
        fail ArgumentError, "Missing the required parameter 'source_amount' when calling MathApi.convert_units"
      end
      if @api_client.config.client_side_validation && source_amount > 99999999
        fail ArgumentError, 'invalid value for "source_amount" when calling MathApi.convert_units, must be smaller than or equal to 99999999.'
      end

      if @api_client.config.client_side_validation && source_amount < 0
        fail ArgumentError, 'invalid value for "source_amount" when calling MathApi.convert_units, must be greater than or equal to 0.'
      end

      # verify the required parameter 'source_unit' is set
      if @api_client.config.client_side_validation && source_unit.nil?
        fail ArgumentError, "Missing the required parameter 'source_unit' when calling MathApi.convert_units"
      end
      if @api_client.config.client_side_validation && source_unit.to_s.length > 100
        fail ArgumentError, 'invalid value for "source_unit" when calling MathApi.convert_units, the character length must be smaller than or equal to 100.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && source_unit !~ pattern
        fail ArgumentError, "invalid value for 'source_unit' when calling MathApi.convert_units, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'target_unit' is set
      if @api_client.config.client_side_validation && target_unit.nil?
        fail ArgumentError, "Missing the required parameter 'target_unit' when calling MathApi.convert_units"
      end
      if @api_client.config.client_side_validation && target_unit.to_s.length > 100
        fail ArgumentError, 'invalid value for "target_unit" when calling MathApi.convert_units, the character length must be smaller than or equal to 100.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && target_unit !~ pattern
        fail ArgumentError, "invalid value for 'target_unit' when calling MathApi.convert_units, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'food_name'].nil? && opts[:'food_name'].to_s.length > 200
        fail ArgumentError, 'invalid value for "opts[:"food_name"]" when calling MathApi.convert_units, the character length must be smaller than or equal to 200.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'food_name'].nil? && opts[:'food_name'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"food_name\"]' when calling MathApi.convert_units, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/convert-units'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'source-amount'] = source_amount
      query_params[:'source-unit'] = source_unit
      query_params[:'target-unit'] = target_unit
      query_params[:'food-name'] = opts[:'food_name'] if !opts[:'food_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConvertUnits200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"MathApi.convert_units",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MathApi#convert_units\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
