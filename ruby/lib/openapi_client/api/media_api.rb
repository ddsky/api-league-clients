=begin
#API League

#API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.6.4
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MediaApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Detect Main Image Color API
    # Detect the main color of an image. The API returns a list of colors and their hex codes. The API supports images in the following formats: JPEG, PNG, and GIF.
    # @param url [String] The url of the image for which the colors should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<DetectMainImageColorAPI200ResponseInner>]
    def detect_main_image_color_api(url, opts = {})
      data, _status_code, _headers = detect_main_image_color_api_with_http_info(url, opts)
      data
    end

    # Detect Main Image Color API
    # Detect the main color of an image. The API returns a list of colors and their hex codes. The API supports images in the following formats: JPEG, PNG, and GIF.
    # @param url [String] The url of the image for which the colors should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DetectMainImageColorAPI200ResponseInner>, Integer, Hash)>] Array<DetectMainImageColorAPI200ResponseInner> data, response status code and response headers
    def detect_main_image_color_api_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.detect_main_image_color_api ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling MediaApi.detect_main_image_color_api"
      end
      if @api_client.config.client_side_validation && url.to_s.length > 1000
        fail ArgumentError, 'invalid value for "url" when calling MediaApi.detect_main_image_color_api, the character length must be smaller than or equal to 1000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && url !~ pattern
        fail ArgumentError, "invalid value for 'url' when calling MediaApi.detect_main_image_color_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/detect-color'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DetectMainImageColorAPI200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"MediaApi.detect_main_image_color_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#detect_main_image_color_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rescale Image API
    # Rescale an image to a specific width and height. The image will be resized to fit the specified width and height while maintaining the original aspect ratio unless the crop parameter is set to true. The image will be returned in the same format as the original image.
    # @param url [String] The url of the image to be rescaled.
    # @param width [Integer] The desired width of the rescaled image.
    # @param height [Integer] The desired height of the rescaled image.
    # @param crop [Boolean] Whether the image should be cropped. If true, the returned image will have exactly the given width and height and some content might have been cropped from the left/right or top/bottom. If this parameter is false, the image will keep its ratio but will be resized to fill the given box. Some content might be outside the box though.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def rescale_image_api(url, width, height, crop, opts = {})
      data, _status_code, _headers = rescale_image_api_with_http_info(url, width, height, crop, opts)
      data
    end

    # Rescale Image API
    # Rescale an image to a specific width and height. The image will be resized to fit the specified width and height while maintaining the original aspect ratio unless the crop parameter is set to true. The image will be returned in the same format as the original image.
    # @param url [String] The url of the image to be rescaled.
    # @param width [Integer] The desired width of the rescaled image.
    # @param height [Integer] The desired height of the rescaled image.
    # @param crop [Boolean] Whether the image should be cropped. If true, the returned image will have exactly the given width and height and some content might have been cropped from the left/right or top/bottom. If this parameter is false, the image will keep its ratio but will be resized to fill the given box. Some content might be outside the box though.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def rescale_image_api_with_http_info(url, width, height, crop, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.rescale_image_api ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling MediaApi.rescale_image_api"
      end
      if @api_client.config.client_side_validation && url.to_s.length > 1000
        fail ArgumentError, 'invalid value for "url" when calling MediaApi.rescale_image_api, the character length must be smaller than or equal to 1000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && url !~ pattern
        fail ArgumentError, "invalid value for 'url' when calling MediaApi.rescale_image_api, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'width' is set
      if @api_client.config.client_side_validation && width.nil?
        fail ArgumentError, "Missing the required parameter 'width' when calling MediaApi.rescale_image_api"
      end
      if @api_client.config.client_side_validation && width > 5000
        fail ArgumentError, 'invalid value for "width" when calling MediaApi.rescale_image_api, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && width < 1
        fail ArgumentError, 'invalid value for "width" when calling MediaApi.rescale_image_api, must be greater than or equal to 1.'
      end

      # verify the required parameter 'height' is set
      if @api_client.config.client_side_validation && height.nil?
        fail ArgumentError, "Missing the required parameter 'height' when calling MediaApi.rescale_image_api"
      end
      if @api_client.config.client_side_validation && height > 5000
        fail ArgumentError, 'invalid value for "height" when calling MediaApi.rescale_image_api, must be smaller than or equal to 5000.'
      end

      if @api_client.config.client_side_validation && height < 1
        fail ArgumentError, 'invalid value for "height" when calling MediaApi.rescale_image_api, must be greater than or equal to 1.'
      end

      # verify the required parameter 'crop' is set
      if @api_client.config.client_side_validation && crop.nil?
        fail ArgumentError, "Missing the required parameter 'crop' when calling MediaApi.rescale_image_api"
      end
      # resource path
      local_var_path = '/rescale-image'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url
      query_params[:'width'] = width
      query_params[:'height'] = height
      query_params[:'crop'] = crop

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"MediaApi.rescale_image_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#rescale_image_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Icons API
    # Search through millions of icons to match any topic you want.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :only_public_domain If true, only public domain icons will be returned.
    # @option opts [Integer] :number The number of icons to return in range [1,100]
    # @return [SearchIconsAPI200Response]
    def search_icons_api(query, opts = {})
      data, _status_code, _headers = search_icons_api_with_http_info(query, opts)
      data
    end

    # Search Icons API
    # Search through millions of icons to match any topic you want.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :only_public_domain If true, only public domain icons will be returned.
    # @option opts [Integer] :number The number of icons to return in range [1,100]
    # @return [Array<(SearchIconsAPI200Response, Integer, Hash)>] SearchIconsAPI200Response data, response status code and response headers
    def search_icons_api_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.search_icons_api ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling MediaApi.search_icons_api"
      end
      if @api_client.config.client_side_validation && query.to_s.length > 300
        fail ArgumentError, 'invalid value for "query" when calling MediaApi.search_icons_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && query !~ pattern
        fail ArgumentError, "invalid value for 'query' when calling MediaApi.search_icons_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling MediaApi.search_icons_api, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling MediaApi.search_icons_api, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/search-icons'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'only-public-domain'] = opts[:'only_public_domain'] if !opts[:'only_public_domain'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchIconsAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"MediaApi.search_icons_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#search_icons_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Royalty Free Images API
    # Search through hundreds of thousands of royalty free images to match any topic you want. The images are returned in a list with the URL, width, and height of the image. Additionally, you can find the license type and link of the image.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of images to return in range [1,100]
    # @return [SearchRoyaltyFreeImagesAPI200Response]
    def search_royalty_free_images_api(query, opts = {})
      data, _status_code, _headers = search_royalty_free_images_api_with_http_info(query, opts)
      data
    end

    # Search Royalty Free Images API
    # Search through hundreds of thousands of royalty free images to match any topic you want. The images are returned in a list with the URL, width, and height of the image. Additionally, you can find the license type and link of the image.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of images to return in range [1,100]
    # @return [Array<(SearchRoyaltyFreeImagesAPI200Response, Integer, Hash)>] SearchRoyaltyFreeImagesAPI200Response data, response status code and response headers
    def search_royalty_free_images_api_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.search_royalty_free_images_api ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling MediaApi.search_royalty_free_images_api"
      end
      if @api_client.config.client_side_validation && query.to_s.length > 300
        fail ArgumentError, 'invalid value for "query" when calling MediaApi.search_royalty_free_images_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && query !~ pattern
        fail ArgumentError, "invalid value for 'query' when calling MediaApi.search_royalty_free_images_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling MediaApi.search_royalty_free_images_api, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling MediaApi.search_royalty_free_images_api, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/search-images'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchRoyaltyFreeImagesAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"MediaApi.search_royalty_free_images_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#search_royalty_free_images_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Vector Search API
    # Search through over 700,000 free to use vector icons. The license is either \"PUBLIC_DOMAIN\" or \"ATTRIBUTION\". If it is \"ATTRIBUTION\" just attribute the author somewhere in your project.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of vectors to skip, between 0 and 1000
    # @option opts [Integer] :number The number of vectors to return in range [1,10]
    # @return [VectorSearchAPI200Response]
    def vector_search_api(query, opts = {})
      data, _status_code, _headers = vector_search_api_with_http_info(query, opts)
      data
    end

    # Vector Search API
    # Search through over 700,000 free to use vector icons. The license is either \&quot;PUBLIC_DOMAIN\&quot; or \&quot;ATTRIBUTION\&quot;. If it is \&quot;ATTRIBUTION\&quot; just attribute the author somewhere in your project.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset The number of vectors to skip, between 0 and 1000
    # @option opts [Integer] :number The number of vectors to return in range [1,10]
    # @return [Array<(VectorSearchAPI200Response, Integer, Hash)>] VectorSearchAPI200Response data, response status code and response headers
    def vector_search_api_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MediaApi.vector_search_api ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling MediaApi.vector_search_api"
      end
      if @api_client.config.client_side_validation && query.to_s.length > 300
        fail ArgumentError, 'invalid value for "query" when calling MediaApi.vector_search_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && query !~ pattern
        fail ArgumentError, "invalid value for 'query' when calling MediaApi.vector_search_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling MediaApi.vector_search_api, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling MediaApi.vector_search_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling MediaApi.vector_search_api, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling MediaApi.vector_search_api, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/search-vectors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VectorSearchAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"MediaApi.vector_search_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MediaApi#vector_search_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
