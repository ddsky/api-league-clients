=begin
#API League

#API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.6.4
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class HumorApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Generate Nonsense Word API
    # Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
    # @param [Hash] opts the optional parameters
    # @return [GenerateNonsenseWordAPI200Response]
    def generate_nonsense_word_api(opts = {})
      data, _status_code, _headers = generate_nonsense_word_api_with_http_info(opts)
      data
    end

    # Generate Nonsense Word API
    # Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateNonsenseWordAPI200Response, Integer, Hash)>] GenerateNonsenseWordAPI200Response data, response status code and response headers
    def generate_nonsense_word_api_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumorApi.generate_nonsense_word_api ...'
      end
      # resource path
      local_var_path = '/generate-nonsense-word'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateNonsenseWordAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"HumorApi.generate_nonsense_word_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumorApi#generate_nonsense_word_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Random Joke API
    # This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \"nsfw\" or \"religious\".
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include_tags A comma-separated list of tags the jokes should have.
    # @option opts [String] :exclude_tags A comma-separated list of tags the jokes must not have.
    # @option opts [Float] :min_rating The minimum rating in range [0.0,1.0] of the jokes.
    # @option opts [Integer] :max_length The maximum length of the joke in letters.
    # @return [SearchJokesAPI200ResponseJokesInner]
    def random_joke_api(opts = {})
      data, _status_code, _headers = random_joke_api_with_http_info(opts)
      data
    end

    # Random Joke API
    # This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :include_tags A comma-separated list of tags the jokes should have.
    # @option opts [String] :exclude_tags A comma-separated list of tags the jokes must not have.
    # @option opts [Float] :min_rating The minimum rating in range [0.0,1.0] of the jokes.
    # @option opts [Integer] :max_length The maximum length of the joke in letters.
    # @return [Array<(SearchJokesAPI200ResponseJokesInner, Integer, Hash)>] SearchJokesAPI200ResponseJokesInner data, response status code and response headers
    def random_joke_api_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumorApi.random_joke_api ...'
      end
      if @api_client.config.client_side_validation && !opts[:'include_tags'].nil? && opts[:'include_tags'].to_s.length > 300
        fail ArgumentError, 'invalid value for "opts[:"include_tags"]" when calling HumorApi.random_joke_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'include_tags'].nil? && opts[:'include_tags'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"include_tags\"]' when calling HumorApi.random_joke_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'exclude_tags'].nil? && opts[:'exclude_tags'].to_s.length > 300
        fail ArgumentError, 'invalid value for "opts[:"exclude_tags"]" when calling HumorApi.random_joke_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'exclude_tags'].nil? && opts[:'exclude_tags'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"exclude_tags\"]' when calling HumorApi.random_joke_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] > 1
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling HumorApi.random_joke_api, must be smaller than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling HumorApi.random_joke_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling HumorApi.random_joke_api, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] < 1
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling HumorApi.random_joke_api, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/retrieve-random-joke'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'include-tags'] = opts[:'include_tags'] if !opts[:'include_tags'].nil?
      query_params[:'exclude-tags'] = opts[:'exclude_tags'] if !opts[:'exclude_tags'].nil?
      query_params[:'min-rating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'max-length'] = opts[:'max_length'] if !opts[:'max_length'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchJokesAPI200ResponseJokesInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"HumorApi.random_joke_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumorApi#random_joke_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Random Meme API
    # Get a random meme out of over 300,000+ memes. To get the latest memes, you can use the max-age-days parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma-separated list of words that must occur in the meme.
    # @option opts [Boolean] :keywords_in_image Whether the keywords must occur in the image.
    # @option opts [String] :media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;).
    # @option opts [Float] :min_rating The minimum rating in range [0.0,1.0] of the meme.
    # @option opts [Integer] :max_age_days The maximum age of the meme in days.
    # @return [RandomMemeAPI200Response]
    def random_meme_api(opts = {})
      data, _status_code, _headers = random_meme_api_with_http_info(opts)
      data
    end

    # Random Meme API
    # Get a random meme out of over 300,000+ memes. To get the latest memes, you can use the max-age-days parameter.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma-separated list of words that must occur in the meme.
    # @option opts [Boolean] :keywords_in_image Whether the keywords must occur in the image.
    # @option opts [String] :media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;).
    # @option opts [Float] :min_rating The minimum rating in range [0.0,1.0] of the meme.
    # @option opts [Integer] :max_age_days The maximum age of the meme in days.
    # @return [Array<(RandomMemeAPI200Response, Integer, Hash)>] RandomMemeAPI200Response data, response status code and response headers
    def random_meme_api_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumorApi.random_meme_api ...'
      end
      if @api_client.config.client_side_validation && !opts[:'keywords'].nil? && opts[:'keywords'].to_s.length > 300
        fail ArgumentError, 'invalid value for "opts[:"keywords"]" when calling HumorApi.random_meme_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'keywords'].nil? && opts[:'keywords'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"keywords\"]' when calling HumorApi.random_meme_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'media_type'].nil? && opts[:'media_type'].to_s.length > 10
        fail ArgumentError, 'invalid value for "opts[:"media_type"]" when calling HumorApi.random_meme_api, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'media_type'].nil? && opts[:'media_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"media_type\"]' when calling HumorApi.random_meme_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] > 1
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling HumorApi.random_meme_api, must be smaller than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling HumorApi.random_meme_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_age_days'].nil? && opts[:'max_age_days'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"max_age_days"]" when calling HumorApi.random_meme_api, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_age_days'].nil? && opts[:'max_age_days'] < 0
        fail ArgumentError, 'invalid value for "opts[:"max_age_days"]" when calling HumorApi.random_meme_api, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/retrieve-random-meme'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keywords'] = opts[:'keywords'] if !opts[:'keywords'].nil?
      query_params[:'keywords-in-image'] = opts[:'keywords_in_image'] if !opts[:'keywords_in_image'].nil?
      query_params[:'media-type'] = opts[:'media_type'] if !opts[:'media_type'].nil?
      query_params[:'min-rating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'max-age-days'] = opts[:'max_age_days'] if !opts[:'max_age_days'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RandomMemeAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"HumorApi.random_meme_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumorApi#random_meme_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Gifs API
    # Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of gifs to return in range [1,10]
    # @return [SearchGifsAPI200Response]
    def search_gifs_api(query, opts = {})
      data, _status_code, _headers = search_gifs_api_with_http_info(query, opts)
      data
    end

    # Search Gifs API
    # Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of gifs to return in range [1,10]
    # @return [Array<(SearchGifsAPI200Response, Integer, Hash)>] SearchGifsAPI200Response data, response status code and response headers
    def search_gifs_api_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumorApi.search_gifs_api ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling HumorApi.search_gifs_api"
      end
      if @api_client.config.client_side_validation && query.to_s.length > 300
        fail ArgumentError, 'invalid value for "query" when calling HumorApi.search_gifs_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && query !~ pattern
        fail ArgumentError, "invalid value for 'query' when calling HumorApi.search_gifs_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 10
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling HumorApi.search_gifs_api, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling HumorApi.search_gifs_api, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/search-gifs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchGifsAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"HumorApi.search_gifs_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumorApi#search_gifs_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Jokes API
    # With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma-separated list of words that must occur in the joke.
    # @option opts [String] :include_tags A comma-separated list of tags the jokes should have.
    # @option opts [String] :exclude_tags A comma-separated list of tags the jokes must not have.
    # @option opts [Float] :min_rating The minimum rating in range [0.0,1.0] of the jokes.
    # @option opts [Float] :max_length The maximum length of the joke in letters.
    # @option opts [Integer] :offset The number of jokes to skip, between 0 and 1000.
    # @option opts [Integer] :number The number of jokes, between 1 and 10.
    # @return [SearchJokesAPI200Response]
    def search_jokes_api(opts = {})
      data, _status_code, _headers = search_jokes_api_with_http_info(opts)
      data
    end

    # Search Jokes API
    # With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma-separated list of words that must occur in the joke.
    # @option opts [String] :include_tags A comma-separated list of tags the jokes should have.
    # @option opts [String] :exclude_tags A comma-separated list of tags the jokes must not have.
    # @option opts [Float] :min_rating The minimum rating in range [0.0,1.0] of the jokes.
    # @option opts [Float] :max_length The maximum length of the joke in letters.
    # @option opts [Integer] :offset The number of jokes to skip, between 0 and 1000.
    # @option opts [Integer] :number The number of jokes, between 1 and 10.
    # @return [Array<(SearchJokesAPI200Response, Integer, Hash)>] SearchJokesAPI200Response data, response status code and response headers
    def search_jokes_api_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumorApi.search_jokes_api ...'
      end
      if @api_client.config.client_side_validation && !opts[:'keywords'].nil? && opts[:'keywords'].to_s.length > 300
        fail ArgumentError, 'invalid value for "opts[:"keywords"]" when calling HumorApi.search_jokes_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'keywords'].nil? && opts[:'keywords'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"keywords\"]' when calling HumorApi.search_jokes_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'include_tags'].nil? && opts[:'include_tags'].to_s.length > 300
        fail ArgumentError, 'invalid value for "opts[:"include_tags"]" when calling HumorApi.search_jokes_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'include_tags'].nil? && opts[:'include_tags'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"include_tags\"]' when calling HumorApi.search_jokes_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'exclude_tags'].nil? && opts[:'exclude_tags'].to_s.length > 300
        fail ArgumentError, 'invalid value for "opts[:"exclude_tags"]" when calling HumorApi.search_jokes_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'exclude_tags'].nil? && opts[:'exclude_tags'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"exclude_tags\"]' when calling HumorApi.search_jokes_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] > 1
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling HumorApi.search_jokes_api, must be smaller than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling HumorApi.search_jokes_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] > 1
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling HumorApi.search_jokes_api, must be smaller than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] < 0
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling HumorApi.search_jokes_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling HumorApi.search_jokes_api, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling HumorApi.search_jokes_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 10
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling HumorApi.search_jokes_api, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling HumorApi.search_jokes_api, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/search-jokes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keywords'] = opts[:'keywords'] if !opts[:'keywords'].nil?
      query_params[:'include-tags'] = opts[:'include_tags'] if !opts[:'include_tags'].nil?
      query_params[:'exclude-tags'] = opts[:'exclude_tags'] if !opts[:'exclude_tags'].nil?
      query_params[:'min-rating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'max-length'] = opts[:'max_length'] if !opts[:'max_length'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchJokesAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"HumorApi.search_jokes_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumorApi#search_jokes_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Memes API
    # Search over 300,000 memes by keyword, rating, and age. Most memes are stills (images) but using the media-type you can also get videos. You can even search for text within memes. You'll surely find something funny.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma-separated list of words that must occur in the meme.
    # @option opts [Boolean] :keywords_in_image Whether the keywords must occur in the image.
    # @option opts [String] :media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;).
    # @option opts [Float] :min_rating The minimum rating in range [0.0,1.0] of the meme.
    # @option opts [Integer] :max_age_days The maximum age of the meme in days.
    # @option opts [Integer] :offset The number of memes to skip, between 0 and 1000.
    # @option opts [Integer] :number The number of memes, between 1 and 10.
    # @return [SearchMemesAPI200Response]
    def search_memes_api(opts = {})
      data, _status_code, _headers = search_memes_api_with_http_info(opts)
      data
    end

    # Search Memes API
    # Search over 300,000 memes by keyword, rating, and age. Most memes are stills (images) but using the media-type you can also get videos. You can even search for text within memes. You&#39;ll surely find something funny.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :keywords A comma-separated list of words that must occur in the meme.
    # @option opts [Boolean] :keywords_in_image Whether the keywords must occur in the image.
    # @option opts [String] :media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;).
    # @option opts [Float] :min_rating The minimum rating in range [0.0,1.0] of the meme.
    # @option opts [Integer] :max_age_days The maximum age of the meme in days.
    # @option opts [Integer] :offset The number of memes to skip, between 0 and 1000.
    # @option opts [Integer] :number The number of memes, between 1 and 10.
    # @return [Array<(SearchMemesAPI200Response, Integer, Hash)>] SearchMemesAPI200Response data, response status code and response headers
    def search_memes_api_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: HumorApi.search_memes_api ...'
      end
      if @api_client.config.client_side_validation && !opts[:'keywords'].nil? && opts[:'keywords'].to_s.length > 300
        fail ArgumentError, 'invalid value for "opts[:"keywords"]" when calling HumorApi.search_memes_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'keywords'].nil? && opts[:'keywords'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"keywords\"]' when calling HumorApi.search_memes_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'media_type'].nil? && opts[:'media_type'].to_s.length > 10
        fail ArgumentError, 'invalid value for "opts[:"media_type"]" when calling HumorApi.search_memes_api, the character length must be smaller than or equal to 10.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && !opts[:'media_type'].nil? && opts[:'media_type'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"media_type\"]' when calling HumorApi.search_memes_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] > 1
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling HumorApi.search_memes_api, must be smaller than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_rating'].nil? && opts[:'min_rating'] < 0
        fail ArgumentError, 'invalid value for "opts[:"min_rating"]" when calling HumorApi.search_memes_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_age_days'].nil? && opts[:'max_age_days'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"max_age_days"]" when calling HumorApi.search_memes_api, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_age_days'].nil? && opts[:'max_age_days'] < 0
        fail ArgumentError, 'invalid value for "opts[:"max_age_days"]" when calling HumorApi.search_memes_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling HumorApi.search_memes_api, must be smaller than or equal to 1000.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling HumorApi.search_memes_api, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 10
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling HumorApi.search_memes_api, must be smaller than or equal to 10.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling HumorApi.search_memes_api, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/search-memes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'keywords'] = opts[:'keywords'] if !opts[:'keywords'].nil?
      query_params[:'keywords-in-image'] = opts[:'keywords_in_image'] if !opts[:'keywords_in_image'].nil?
      query_params[:'media-type'] = opts[:'media_type'] if !opts[:'media_type'].nil?
      query_params[:'min-rating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'max-age-days'] = opts[:'max_age_days'] if !opts[:'max_age_days'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchMemesAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"HumorApi.search_memes_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: HumorApi#search_memes_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
