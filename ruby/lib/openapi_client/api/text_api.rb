=begin
#API League

#API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.0
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class TextApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Correct Spelling
    # The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
    # @param text [String] The text to be corrected.
    # @param language [String] The language of the text, one of en, de, es, fr, or it.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20016]
    def correct_spelling(text, language, opts = {})
      data, _status_code, _headers = correct_spelling_with_http_info(text, language, opts)
      data
    end

    # Correct Spelling
    # The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
    # @param text [String] The text to be corrected.
    # @param language [String] The language of the text, one of en, de, es, fr, or it.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20016, Integer, Hash)>] InlineResponse20016 data, response status code and response headers
    def correct_spelling_with_http_info(text, language, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.correct_spelling ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.correct_spelling"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.correct_spelling, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.correct_spelling, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'language' is set
      if @api_client.config.client_side_validation && language.nil?
        fail ArgumentError, "Missing the required parameter 'language' when calling TextApi.correct_spelling"
      end
      if @api_client.config.client_side_validation && language.to_s.length > 2
        fail ArgumentError, 'invalid value for "language" when calling TextApi.correct_spelling, the character length must be smaller than or equal to 2.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && language !~ pattern
        fail ArgumentError, "invalid value for 'language' when calling TextApi.correct_spelling, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/correct-spelling'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text
      query_params[:'language'] = language

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20016'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.correct_spelling",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#correct_spelling\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect Language
    # Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
    # @param text [String] The text for which the language should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<InlineResponse20017>]
    def detect_language(text, opts = {})
      data, _status_code, _headers = detect_language_with_http_info(text, opts)
      data
    end

    # Detect Language
    # Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
    # @param text [String] The text for which the language should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<InlineResponse20017>, Integer, Hash)>] Array<InlineResponse20017> data, response status code and response headers
    def detect_language_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.detect_language ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.detect_language"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.detect_language, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.detect_language, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/detect-language'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<InlineResponse20017>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.detect_language",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#detect_language\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect Sentiment
    # Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
    # @param text [String] The text for which the sentiment should be detected.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20018]
    def detect_sentiment(text, opts = {})
      data, _status_code, _headers = detect_sentiment_with_http_info(text, opts)
      data
    end

    # Detect Sentiment
    # Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
    # @param text [String] The text for which the sentiment should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20018, Integer, Hash)>] InlineResponse20018 data, response status code and response headers
    def detect_sentiment_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.detect_sentiment ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.detect_sentiment"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.detect_sentiment, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.detect_sentiment, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/detect-sentiment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20018'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.detect_sentiment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#detect_sentiment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Dates
    # Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \"April 5th, 2035\", \"04/05/2035\", or \"05.04.2035\". The normalized date is the date in the form of a timestamp (milliseconds since 1970).
    # @param text [String] The text from which dates should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20021]
    def extract_dates(text, opts = {})
      data, _status_code, _headers = extract_dates_with_http_info(text, opts)
      data
    end

    # Extract Dates
    # Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
    # @param text [String] The text from which dates should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20021, Integer, Hash)>] InlineResponse20021 data, response status code and response headers
    def extract_dates_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.extract_dates ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.extract_dates"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.extract_dates, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.extract_dates, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/extract-dates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20021'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.extract_dates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#extract_dates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Entities
    # Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \"Canada\" represents the concept of a country. The word \"Jim Carrey\" represents the concept of a person. The word \"Tesla\" represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
    # @param text [String] The text from which entities should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20027]
    def extract_entities(text, opts = {})
      data, _status_code, _headers = extract_entities_with_http_info(text, opts)
      data
    end

    # Extract Entities
    # Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
    # @param text [String] The text from which entities should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20027, Integer, Hash)>] InlineResponse20027 data, response status code and response headers
    def extract_entities_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.extract_entities ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.extract_entities"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.extract_entities, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.extract_entities, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/extract-entities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20027'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.extract_entities",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#extract_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Word Synonyms
    # Return synonyms of a word.
    # @param word [String] The (noun) word for which a list of synonyms should be returned.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20022]
    def list_word_synonyms(word, opts = {})
      data, _status_code, _headers = list_word_synonyms_with_http_info(word, opts)
      data
    end

    # List Word Synonyms
    # Return synonyms of a word.
    # @param word [String] The (noun) word for which a list of synonyms should be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20022, Integer, Hash)>] InlineResponse20022 data, response status code and response headers
    def list_word_synonyms_with_http_info(word, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.list_word_synonyms ...'
      end
      # verify the required parameter 'word' is set
      if @api_client.config.client_side_validation && word.nil?
        fail ArgumentError, "Missing the required parameter 'word' when calling TextApi.list_word_synonyms"
      end
      if @api_client.config.client_side_validation && word.to_s.length > 50
        fail ArgumentError, 'invalid value for "word" when calling TextApi.list_word_synonyms, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && word !~ pattern
        fail ArgumentError, "invalid value for 'word' when calling TextApi.list_word_synonyms, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/list-synonyms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'word'] = word

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20022'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.list_word_synonyms",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#list_word_synonyms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Part of Speech Tagging
    # Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
    # @param text [String] The text to tag the part of speech.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20023]
    def part_of_speech_tagging(text, opts = {})
      data, _status_code, _headers = part_of_speech_tagging_with_http_info(text, opts)
      data
    end

    # Part of Speech Tagging
    # Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
    # @param text [String] The text to tag the part of speech.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20023, Integer, Hash)>] InlineResponse20023 data, response status code and response headers
    def part_of_speech_tagging_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.part_of_speech_tagging ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.part_of_speech_tagging"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.part_of_speech_tagging, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.part_of_speech_tagging, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/tag-pos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20023'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.part_of_speech_tagging",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#part_of_speech_tagging\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pluralize Word
    # Find the plural form of a word.
    # @param word [String] The (noun) word for which the plural form should be found.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20026]
    def pluralize_word(word, opts = {})
      data, _status_code, _headers = pluralize_word_with_http_info(word, opts)
      data
    end

    # Pluralize Word
    # Find the plural form of a word.
    # @param word [String] The (noun) word for which the plural form should be found.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20026, Integer, Hash)>] InlineResponse20026 data, response status code and response headers
    def pluralize_word_with_http_info(word, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.pluralize_word ...'
      end
      # verify the required parameter 'word' is set
      if @api_client.config.client_side_validation && word.nil?
        fail ArgumentError, "Missing the required parameter 'word' when calling TextApi.pluralize_word"
      end
      if @api_client.config.client_side_validation && word.to_s.length > 50
        fail ArgumentError, 'invalid value for "word" when calling TextApi.pluralize_word, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && word !~ pattern
        fail ArgumentError, "invalid value for 'word' when calling TextApi.pluralize_word, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/pluralize-word'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'word'] = word

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20026'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.pluralize_word",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#pluralize_word\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Score Readability
    # Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
    # @param text [String] The text to score for readability.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20020]
    def score_readability(text, opts = {})
      data, _status_code, _headers = score_readability_with_http_info(text, opts)
      data
    end

    # Score Readability
    # Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
    # @param text [String] The text to score for readability.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20020, Integer, Hash)>] InlineResponse20020 data, response status code and response headers
    def score_readability_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.score_readability ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.score_readability"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.score_readability, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.score_readability, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/score-readability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20020'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.score_readability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#score_readability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Score Text
    # Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
    # @param title [String] The title of the text to score.
    # @param text [String] The text to score for multiple metrics.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20019]
    def score_text(title, text, opts = {})
      data, _status_code, _headers = score_text_with_http_info(title, text, opts)
      data
    end

    # Score Text
    # Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
    # @param title [String] The title of the text to score.
    # @param text [String] The text to score for multiple metrics.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20019, Integer, Hash)>] InlineResponse20019 data, response status code and response headers
    def score_text_with_http_info(title, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.score_text ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling TextApi.score_text"
      end
      if @api_client.config.client_side_validation && title.to_s.length > 10000
        fail ArgumentError, 'invalid value for "title" when calling TextApi.score_text, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && title !~ pattern
        fail ArgumentError, "invalid value for 'title' when calling TextApi.score_text, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.score_text"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.score_text, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.score_text, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/score-text'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = title
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20019'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.score_text",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#score_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Singularize Word
    # Find the singular form of a word.
    # @param word [String] The (noun) word for which the singular form should be found.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20025]
    def singularize_word(word, opts = {})
      data, _status_code, _headers = singularize_word_with_http_info(word, opts)
      data
    end

    # Singularize Word
    # Find the singular form of a word.
    # @param word [String] The (noun) word for which the singular form should be found.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20025, Integer, Hash)>] InlineResponse20025 data, response status code and response headers
    def singularize_word_with_http_info(word, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.singularize_word ...'
      end
      # verify the required parameter 'word' is set
      if @api_client.config.client_side_validation && word.nil?
        fail ArgumentError, "Missing the required parameter 'word' when calling TextApi.singularize_word"
      end
      if @api_client.config.client_side_validation && word.to_s.length > 50
        fail ArgumentError, 'invalid value for "word" when calling TextApi.singularize_word, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && word !~ pattern
        fail ArgumentError, "invalid value for 'word' when calling TextApi.singularize_word, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/singularize-word'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'word'] = word

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20025'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.singularize_word",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#singularize_word\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Text Stemming
    # The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
    # @param text [String] The text to be stemmed.
    # @param [Hash] opts the optional parameters
    # @return [InlineResponse20024]
    def text_stemming(text, opts = {})
      data, _status_code, _headers = text_stemming_with_http_info(text, opts)
      data
    end

    # Text Stemming
    # The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
    # @param text [String] The text to be stemmed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineResponse20024, Integer, Hash)>] InlineResponse20024 data, response status code and response headers
    def text_stemming_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.text_stemming ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.text_stemming"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.text_stemming, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.text_stemming, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/stem-text'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'InlineResponse20024'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.text_stemming",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#text_stemming\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
