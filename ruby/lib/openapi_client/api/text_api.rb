=begin
#API League

#API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.6.4
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class TextApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Correct Spelling API
    # The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
    # @param text [String] The text to be corrected.
    # @param language [String] The language of the text, one of en, de, es, fr, or it.
    # @param [Hash] opts the optional parameters
    # @return [CorrectSpellingAPI200Response]
    def correct_spelling_api(text, language, opts = {})
      data, _status_code, _headers = correct_spelling_api_with_http_info(text, language, opts)
      data
    end

    # Correct Spelling API
    # The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
    # @param text [String] The text to be corrected.
    # @param language [String] The language of the text, one of en, de, es, fr, or it.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CorrectSpellingAPI200Response, Integer, Hash)>] CorrectSpellingAPI200Response data, response status code and response headers
    def correct_spelling_api_with_http_info(text, language, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.correct_spelling_api ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.correct_spelling_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.correct_spelling_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.correct_spelling_api, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'language' is set
      if @api_client.config.client_side_validation && language.nil?
        fail ArgumentError, "Missing the required parameter 'language' when calling TextApi.correct_spelling_api"
      end
      if @api_client.config.client_side_validation && language.to_s.length > 2
        fail ArgumentError, 'invalid value for "language" when calling TextApi.correct_spelling_api, the character length must be smaller than or equal to 2.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && language !~ pattern
        fail ArgumentError, "invalid value for 'language' when calling TextApi.correct_spelling_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/correct-spelling'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text
      query_params[:'language'] = language

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CorrectSpellingAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.correct_spelling_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#correct_spelling_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect Gender by Name API
    # Detect the likelihood that a name is given to a male or female (aka to \"genderize\" a name). While there are more than two genders, this API is limited to the binary classification as the name is given to the baby when it is born and only the sex is known.
    # @param name [String] The name of the perso for which the sentiment should be detected.
    # @param [Hash] opts the optional parameters
    # @return [DetectGenderByNameAPI200Response]
    def detect_gender_by_name_api(name, opts = {})
      data, _status_code, _headers = detect_gender_by_name_api_with_http_info(name, opts)
      data
    end

    # Detect Gender by Name API
    # Detect the likelihood that a name is given to a male or female (aka to \&quot;genderize\&quot; a name). While there are more than two genders, this API is limited to the binary classification as the name is given to the baby when it is born and only the sex is known.
    # @param name [String] The name of the perso for which the sentiment should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectGenderByNameAPI200Response, Integer, Hash)>] DetectGenderByNameAPI200Response data, response status code and response headers
    def detect_gender_by_name_api_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.detect_gender_by_name_api ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling TextApi.detect_gender_by_name_api"
      end
      if @api_client.config.client_side_validation && name.to_s.length > 30
        fail ArgumentError, 'invalid value for "name" when calling TextApi.detect_gender_by_name_api, the character length must be smaller than or equal to 30.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && name !~ pattern
        fail ArgumentError, "invalid value for 'name' when calling TextApi.detect_gender_by_name_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/detect-gender'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DetectGenderByNameAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.detect_gender_by_name_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#detect_gender_by_name_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect Language API
    # Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
    # @param text [String] The text for which the language should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<DetectLanguageAPI200ResponseInner>]
    def detect_language_api(text, opts = {})
      data, _status_code, _headers = detect_language_api_with_http_info(text, opts)
      data
    end

    # Detect Language API
    # Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
    # @param text [String] The text for which the language should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<DetectLanguageAPI200ResponseInner>, Integer, Hash)>] Array<DetectLanguageAPI200ResponseInner> data, response status code and response headers
    def detect_language_api_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.detect_language_api ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.detect_language_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.detect_language_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.detect_language_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/detect-language'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<DetectLanguageAPI200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.detect_language_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#detect_language_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Detect Sentiment API
    # Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
    # @param text [String] The text for which the sentiment should be detected.
    # @param [Hash] opts the optional parameters
    # @return [DetectSentimentAPI200Response]
    def detect_sentiment_api(text, opts = {})
      data, _status_code, _headers = detect_sentiment_api_with_http_info(text, opts)
      data
    end

    # Detect Sentiment API
    # Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
    # @param text [String] The text for which the sentiment should be detected.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetectSentimentAPI200Response, Integer, Hash)>] DetectSentimentAPI200Response data, response status code and response headers
    def detect_sentiment_api_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.detect_sentiment_api ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.detect_sentiment_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.detect_sentiment_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.detect_sentiment_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/detect-sentiment'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DetectSentimentAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.detect_sentiment_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#detect_sentiment_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Dates API
    # Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \"April 5th, 2035\", \"04/05/2035\", or \"05.04.2035\". The normalized date is the date in the form of a timestamp (milliseconds since 1970).
    # @param text [String] The text from which dates should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [ExtractDatesAPI200Response]
    def extract_dates_api(text, opts = {})
      data, _status_code, _headers = extract_dates_api_with_http_info(text, opts)
      data
    end

    # Extract Dates API
    # Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
    # @param text [String] The text from which dates should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtractDatesAPI200Response, Integer, Hash)>] ExtractDatesAPI200Response data, response status code and response headers
    def extract_dates_api_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.extract_dates_api ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.extract_dates_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.extract_dates_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.extract_dates_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/extract-dates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExtractDatesAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.extract_dates_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#extract_dates_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Entities API
    # Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \"Canada\" represents the concept of a country. The word \"Jim Carrey\" represents the concept of a person. The word \"Tesla\" represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
    # @param text [String] The text from which entities should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [ExtractEntitiesAPI200Response]
    def extract_entities_api(text, opts = {})
      data, _status_code, _headers = extract_entities_api_with_http_info(text, opts)
      data
    end

    # Extract Entities API
    # Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
    # @param text [String] The text from which entities should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtractEntitiesAPI200Response, Integer, Hash)>] ExtractEntitiesAPI200Response data, response status code and response headers
    def extract_entities_api_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.extract_entities_api ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.extract_entities_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.extract_entities_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.extract_entities_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/extract-entities'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExtractEntitiesAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.extract_entities_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#extract_entities_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Word Synonyms API
    # Return synonyms of a word.
    # @param word [String] The (noun) word for which a list of synonyms should be returned.
    # @param [Hash] opts the optional parameters
    # @return [ListWordSynonymsAPI200Response]
    def list_word_synonyms_api(word, opts = {})
      data, _status_code, _headers = list_word_synonyms_api_with_http_info(word, opts)
      data
    end

    # List Word Synonyms API
    # Return synonyms of a word.
    # @param word [String] The (noun) word for which a list of synonyms should be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListWordSynonymsAPI200Response, Integer, Hash)>] ListWordSynonymsAPI200Response data, response status code and response headers
    def list_word_synonyms_api_with_http_info(word, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.list_word_synonyms_api ...'
      end
      # verify the required parameter 'word' is set
      if @api_client.config.client_side_validation && word.nil?
        fail ArgumentError, "Missing the required parameter 'word' when calling TextApi.list_word_synonyms_api"
      end
      if @api_client.config.client_side_validation && word.to_s.length > 50
        fail ArgumentError, 'invalid value for "word" when calling TextApi.list_word_synonyms_api, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && word !~ pattern
        fail ArgumentError, "invalid value for 'word' when calling TextApi.list_word_synonyms_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/list-synonyms'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'word'] = word

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListWordSynonymsAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.list_word_synonyms_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#list_word_synonyms_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pluralize Word API
    # Find the plural form of a word.
    # @param word [String] The (noun) word for which the plural form should be found.
    # @param [Hash] opts the optional parameters
    # @return [PluralizeWordAPI200Response]
    def pluralize_word_api(word, opts = {})
      data, _status_code, _headers = pluralize_word_api_with_http_info(word, opts)
      data
    end

    # Pluralize Word API
    # Find the plural form of a word.
    # @param word [String] The (noun) word for which the plural form should be found.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PluralizeWordAPI200Response, Integer, Hash)>] PluralizeWordAPI200Response data, response status code and response headers
    def pluralize_word_api_with_http_info(word, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.pluralize_word_api ...'
      end
      # verify the required parameter 'word' is set
      if @api_client.config.client_side_validation && word.nil?
        fail ArgumentError, "Missing the required parameter 'word' when calling TextApi.pluralize_word_api"
      end
      if @api_client.config.client_side_validation && word.to_s.length > 50
        fail ArgumentError, 'invalid value for "word" when calling TextApi.pluralize_word_api, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && word !~ pattern
        fail ArgumentError, "invalid value for 'word' when calling TextApi.pluralize_word_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/pluralize-word'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'word'] = word

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PluralizeWordAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.pluralize_word_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#pluralize_word_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Score Readability API
    # Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
    # @param text [String] The text to score for readability.
    # @param [Hash] opts the optional parameters
    # @return [ScoreReadabilityAPI200Response]
    def score_readability_api(text, opts = {})
      data, _status_code, _headers = score_readability_api_with_http_info(text, opts)
      data
    end

    # Score Readability API
    # Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
    # @param text [String] The text to score for readability.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScoreReadabilityAPI200Response, Integer, Hash)>] ScoreReadabilityAPI200Response data, response status code and response headers
    def score_readability_api_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.score_readability_api ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.score_readability_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.score_readability_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.score_readability_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/score-readability'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ScoreReadabilityAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.score_readability_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#score_readability_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Score Text API
    # Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
    # @param title [String] The title of the text to score.
    # @param text [String] The text to score for multiple metrics.
    # @param [Hash] opts the optional parameters
    # @return [ScoreTextAPI200Response]
    def score_text_api(title, text, opts = {})
      data, _status_code, _headers = score_text_api_with_http_info(title, text, opts)
      data
    end

    # Score Text API
    # Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
    # @param title [String] The title of the text to score.
    # @param text [String] The text to score for multiple metrics.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ScoreTextAPI200Response, Integer, Hash)>] ScoreTextAPI200Response data, response status code and response headers
    def score_text_api_with_http_info(title, text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.score_text_api ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling TextApi.score_text_api"
      end
      if @api_client.config.client_side_validation && title.to_s.length > 10000
        fail ArgumentError, 'invalid value for "title" when calling TextApi.score_text_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && title !~ pattern
        fail ArgumentError, "invalid value for 'title' when calling TextApi.score_text_api, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.score_text_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.score_text_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.score_text_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/score-text'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = title
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ScoreTextAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.score_text_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#score_text_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Singularize Word API
    # Find the singular form of a word.
    # @param word [String] The (noun) word for which the singular form should be found.
    # @param [Hash] opts the optional parameters
    # @return [SingularizeWordAPI200Response]
    def singularize_word_api(word, opts = {})
      data, _status_code, _headers = singularize_word_api_with_http_info(word, opts)
      data
    end

    # Singularize Word API
    # Find the singular form of a word.
    # @param word [String] The (noun) word for which the singular form should be found.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SingularizeWordAPI200Response, Integer, Hash)>] SingularizeWordAPI200Response data, response status code and response headers
    def singularize_word_api_with_http_info(word, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.singularize_word_api ...'
      end
      # verify the required parameter 'word' is set
      if @api_client.config.client_side_validation && word.nil?
        fail ArgumentError, "Missing the required parameter 'word' when calling TextApi.singularize_word_api"
      end
      if @api_client.config.client_side_validation && word.to_s.length > 50
        fail ArgumentError, 'invalid value for "word" when calling TextApi.singularize_word_api, the character length must be smaller than or equal to 50.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && word !~ pattern
        fail ArgumentError, "invalid value for 'word' when calling TextApi.singularize_word_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/singularize-word'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'word'] = word

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SingularizeWordAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.singularize_word_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#singularize_word_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Stem Text API
    # The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
    # @param text [String] The text to be stemmed.
    # @param [Hash] opts the optional parameters
    # @return [StemTextAPI200Response]
    def stem_text_api(text, opts = {})
      data, _status_code, _headers = stem_text_api_with_http_info(text, opts)
      data
    end

    # Stem Text API
    # The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
    # @param text [String] The text to be stemmed.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StemTextAPI200Response, Integer, Hash)>] StemTextAPI200Response data, response status code and response headers
    def stem_text_api_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.stem_text_api ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.stem_text_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.stem_text_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.stem_text_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/stem-text'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StemTextAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.stem_text_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#stem_text_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tag Part of Speech API
    # Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
    # @param text [String] The text to tag the part of speech.
    # @param [Hash] opts the optional parameters
    # @return [TagPartOfSpeechAPI200Response]
    def tag_part_of_speech_api(text, opts = {})
      data, _status_code, _headers = tag_part_of_speech_api_with_http_info(text, opts)
      data
    end

    # Tag Part of Speech API
    # Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
    # @param text [String] The text to tag the part of speech.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TagPartOfSpeechAPI200Response, Integer, Hash)>] TagPartOfSpeechAPI200Response data, response status code and response headers
    def tag_part_of_speech_api_with_http_info(text, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TextApi.tag_part_of_speech_api ...'
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling TextApi.tag_part_of_speech_api"
      end
      if @api_client.config.client_side_validation && text.to_s.length > 10000
        fail ArgumentError, 'invalid value for "text" when calling TextApi.tag_part_of_speech_api, the character length must be smaller than or equal to 10000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && text !~ pattern
        fail ArgumentError, "invalid value for 'text' when calling TextApi.tag_part_of_speech_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/tag-pos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'text'] = text

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'TagPartOfSpeechAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"TextApi.tag_part_of_speech_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TextApi#tag_part_of_speech_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
