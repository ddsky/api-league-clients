=begin
#API League

#API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.2.0
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'cgi'

module OpenapiClient
  class KnowledgeApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Random Quote
    # This API returns a random quote from a collection of quotes. The quotes are from famous people and are in English.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :min_length The minimum length of the quote in letters.
    # @option opts [Integer] :max_length The maximum length of the quote in letters.
    # @return [RandomQuote200Response]
    def random_quote(opts = {})
      data, _status_code, _headers = random_quote_with_http_info(opts)
      data
    end

    # Random Quote
    # This API returns a random quote from a collection of quotes. The quotes are from famous people and are in English.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :min_length The minimum length of the quote in letters.
    # @option opts [Integer] :max_length The maximum length of the quote in letters.
    # @return [Array<(RandomQuote200Response, Integer, Hash)>] RandomQuote200Response data, response status code and response headers
    def random_quote_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeApi.random_quote ...'
      end
      if @api_client.config.client_side_validation && !opts[:'min_length'].nil? && opts[:'min_length'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"min_length"]" when calling KnowledgeApi.random_quote, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'min_length'].nil? && opts[:'min_length'] < 1
        fail ArgumentError, 'invalid value for "opts[:"min_length"]" when calling KnowledgeApi.random_quote, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling KnowledgeApi.random_quote, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] < 1
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling KnowledgeApi.random_quote, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/retrieve-random-quote'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'min-length'] = opts[:'min_length'] if !opts[:'min_length'].nil?
      query_params[:'max-length'] = opts[:'max_length'] if !opts[:'max_length'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RandomQuote200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"KnowledgeApi.random_quote",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeApi#random_quote\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Random Trivia
    # This endpoint returns a random piece of trivia.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_length The maximum length of the trivia in letters.
    # @return [RandomTrivia200Response]
    def random_trivia(opts = {})
      data, _status_code, _headers = random_trivia_with_http_info(opts)
      data
    end

    # Random Trivia
    # This endpoint returns a random piece of trivia.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :max_length The maximum length of the trivia in letters.
    # @return [Array<(RandomTrivia200Response, Integer, Hash)>] RandomTrivia200Response data, response status code and response headers
    def random_trivia_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KnowledgeApi.random_trivia ...'
      end
      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling KnowledgeApi.random_trivia, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'max_length'].nil? && opts[:'max_length'] < 0
        fail ArgumentError, 'invalid value for "opts[:"max_length"]" when calling KnowledgeApi.random_trivia, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/retrieve-random-trivia'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'max-length'] = opts[:'max_length'] if !opts[:'max_length'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RandomTrivia200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"KnowledgeApi.random_trivia",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KnowledgeApi#random_trivia\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
