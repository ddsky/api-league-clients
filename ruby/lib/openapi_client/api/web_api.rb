=begin
#API League

#API League is a Hub for World Class APIs.

The version of the OpenAPI document: 1.6.4
Contact: mail@apileague.com
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class WebApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Extract Authors API
    # Extracts the authors from a given URL. This API is useful for extracting the authors from a blog post or news article. The API will return a list of authors with their names and links to their profiles if available.
    # @param url [String] The url with the article from which authors should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [ExtractAuthorsAPI200Response]
    def extract_authors_api(url, opts = {})
      data, _status_code, _headers = extract_authors_api_with_http_info(url, opts)
      data
    end

    # Extract Authors API
    # Extracts the authors from a given URL. This API is useful for extracting the authors from a blog post or news article. The API will return a list of authors with their names and links to their profiles if available.
    # @param url [String] The url with the article from which authors should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtractAuthorsAPI200Response, Integer, Hash)>] ExtractAuthorsAPI200Response data, response status code and response headers
    def extract_authors_api_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebApi.extract_authors_api ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling WebApi.extract_authors_api"
      end
      if @api_client.config.client_side_validation && url.to_s.length > 1000
        fail ArgumentError, 'invalid value for "url" when calling WebApi.extract_authors_api, the character length must be smaller than or equal to 1000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && url !~ pattern
        fail ArgumentError, "invalid value for 'url' when calling WebApi.extract_authors_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/extract-authors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExtractAuthorsAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"WebApi.extract_authors_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebApi#extract_authors_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Content from a Web Page API
    # Extract the main content from a web page. This API is useful for extracting the main text, title, and images from a web page. It can be used to create a summary of the content of a web page, or to extract the main content of a web page to display it in a different format.
    # @param url [String] The url for which the content will be extracted.
    # @param [Hash] opts the optional parameters
    # @return [ExtractContentFromAWebPageAPI200Response]
    def extract_content_from_a_web_page_api(url, opts = {})
      data, _status_code, _headers = extract_content_from_a_web_page_api_with_http_info(url, opts)
      data
    end

    # Extract Content from a Web Page API
    # Extract the main content from a web page. This API is useful for extracting the main text, title, and images from a web page. It can be used to create a summary of the content of a web page, or to extract the main content of a web page to display it in a different format.
    # @param url [String] The url for which the content will be extracted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtractContentFromAWebPageAPI200Response, Integer, Hash)>] ExtractContentFromAWebPageAPI200Response data, response status code and response headers
    def extract_content_from_a_web_page_api_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebApi.extract_content_from_a_web_page_api ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling WebApi.extract_content_from_a_web_page_api"
      end
      if @api_client.config.client_side_validation && url.to_s.length > 1000
        fail ArgumentError, 'invalid value for "url" when calling WebApi.extract_content_from_a_web_page_api, the character length must be smaller than or equal to 1000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && url !~ pattern
        fail ArgumentError, "invalid value for 'url' when calling WebApi.extract_content_from_a_web_page_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/extract-content'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExtractContentFromAWebPageAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"WebApi.extract_content_from_a_web_page_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebApi#extract_content_from_a_web_page_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Publish Date API
    # Extract the publish date of an article (news or blog). The API will return the publish date of the article if it can be found. The date returned is in the format YYYY-MM-DD.
    # @param url [String] The url for which the publish date should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [ExtractPublishDateAPI200Response]
    def extract_publish_date_api(url, opts = {})
      data, _status_code, _headers = extract_publish_date_api_with_http_info(url, opts)
      data
    end

    # Extract Publish Date API
    # Extract the publish date of an article (news or blog). The API will return the publish date of the article if it can be found. The date returned is in the format YYYY-MM-DD.
    # @param url [String] The url for which the publish date should be extracted.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExtractPublishDateAPI200Response, Integer, Hash)>] ExtractPublishDateAPI200Response data, response status code and response headers
    def extract_publish_date_api_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebApi.extract_publish_date_api ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling WebApi.extract_publish_date_api"
      end
      if @api_client.config.client_side_validation && url.to_s.length > 1000
        fail ArgumentError, 'invalid value for "url" when calling WebApi.extract_publish_date_api, the character length must be smaller than or equal to 1000.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && url !~ pattern
        fail ArgumentError, "invalid value for 'url' when calling WebApi.extract_publish_date_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/extract-publish-date'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ExtractPublishDateAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"WebApi.extract_publish_date_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebApi#extract_publish_date_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Page Rank API
    # This API allows you to retrieve the page rank of a given URL. The API returns the page rank, the position of the URL in the search results, and the percentile of the page rank.
    # @param domain [String] The domain for which the page rank should be returned.
    # @param [Hash] opts the optional parameters
    # @return [RetrievePageRankAPI200Response]
    def retrieve_page_rank_api(domain, opts = {})
      data, _status_code, _headers = retrieve_page_rank_api_with_http_info(domain, opts)
      data
    end

    # Retrieve Page Rank API
    # This API allows you to retrieve the page rank of a given URL. The API returns the page rank, the position of the URL in the search results, and the percentile of the page rank.
    # @param domain [String] The domain for which the page rank should be returned.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RetrievePageRankAPI200Response, Integer, Hash)>] RetrievePageRankAPI200Response data, response status code and response headers
    def retrieve_page_rank_api_with_http_info(domain, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebApi.retrieve_page_rank_api ...'
      end
      # verify the required parameter 'domain' is set
      if @api_client.config.client_side_validation && domain.nil?
        fail ArgumentError, "Missing the required parameter 'domain' when calling WebApi.retrieve_page_rank_api"
      end
      if @api_client.config.client_side_validation && domain.to_s.length > 100
        fail ArgumentError, 'invalid value for "domain" when calling WebApi.retrieve_page_rank_api, the character length must be smaller than or equal to 100.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && domain !~ pattern
        fail ArgumentError, "invalid value for 'domain' when calling WebApi.retrieve_page_rank_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/retrieve-page-rank'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'domain'] = domain

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RetrievePageRankAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"WebApi.retrieve_page_rank_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebApi#retrieve_page_rank_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Web API
    # Search the web for a given query. The API returns a list of results with the title, summary, and URL.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of results to return in range [1,50]
    # @return [SearchWebAPI200Response]
    def search_web_api(query, opts = {})
      data, _status_code, _headers = search_web_api_with_http_info(query, opts)
      data
    end

    # Search Web API
    # Search the web for a given query. The API returns a list of results with the title, summary, and URL.
    # @param query [String] The search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The number of results to return in range [1,50]
    # @return [Array<(SearchWebAPI200Response, Integer, Hash)>] SearchWebAPI200Response data, response status code and response headers
    def search_web_api_with_http_info(query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebApi.search_web_api ...'
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling WebApi.search_web_api"
      end
      if @api_client.config.client_side_validation && query.to_s.length > 300
        fail ArgumentError, 'invalid value for "query" when calling WebApi.search_web_api, the character length must be smaller than or equal to 300.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && query !~ pattern
        fail ArgumentError, "invalid value for 'query' when calling WebApi.search_web_api, must conform to the pattern #{pattern}."
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 50
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling WebApi.search_web_api, must be smaller than or equal to 50.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling WebApi.search_web_api, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/search-web'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = query
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchWebAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"WebApi.search_web_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebApi#search_web_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify Email Address API
    # This email checker API allows you to validate an email address. The validation will parse the name if possible and check whether the email is not just a disposable junk email address. The API will also check if the email is from a free provider like Gmail, Yahoo, or Hotmail.
    # @param email [String] The email address to verify.
    # @param [Hash] opts the optional parameters
    # @return [VerifyEmailAddressAPI200Response]
    def verify_email_address_api(email, opts = {})
      data, _status_code, _headers = verify_email_address_api_with_http_info(email, opts)
      data
    end

    # Verify Email Address API
    # This email checker API allows you to validate an email address. The validation will parse the name if possible and check whether the email is not just a disposable junk email address. The API will also check if the email is from a free provider like Gmail, Yahoo, or Hotmail.
    # @param email [String] The email address to verify.
    # @param [Hash] opts the optional parameters
    # @return [Array<(VerifyEmailAddressAPI200Response, Integer, Hash)>] VerifyEmailAddressAPI200Response data, response status code and response headers
    def verify_email_address_api_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WebApi.verify_email_address_api ...'
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling WebApi.verify_email_address_api"
      end
      if @api_client.config.client_side_validation && email.to_s.length > 100
        fail ArgumentError, 'invalid value for "email" when calling WebApi.verify_email_address_api, the character length must be smaller than or equal to 100.'
      end

      pattern = Regexp.new(/./)
      if @api_client.config.client_side_validation && email !~ pattern
        fail ArgumentError, "invalid value for 'email' when calling WebApi.verify_email_address_api, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/verify-email'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyEmailAddressAPI200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKey', 'headerApiKey']

      new_options = opts.merge(
        :operation => :"WebApi.verify_email_address_api",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WebApi#verify_email_address_api\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
