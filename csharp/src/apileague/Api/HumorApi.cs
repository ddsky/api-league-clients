/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: mail@apileague.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using apileague.Client;
using apileague.Model;

namespace apileague.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHumorApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Generate Nonsense Word
        /// </summary>
        /// <remarks>
        /// Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateNonsenseWord200Response</returns>
        GenerateNonsenseWord200Response GenerateNonsenseWord(int operationIndex = 0);

        /// <summary>
        /// Generate Nonsense Word
        /// </summary>
        /// <remarks>
        /// Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateNonsenseWord200Response</returns>
        ApiResponse<GenerateNonsenseWord200Response> GenerateNonsenseWordWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Random Joke
        /// </summary>
        /// <remarks>
        /// This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchJokes200ResponseJokesInner</returns>
        SearchJokes200ResponseJokesInner RandomJoke(string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), int? maxLength = default(int?), int operationIndex = 0);

        /// <summary>
        /// Random Joke
        /// </summary>
        /// <remarks>
        /// This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchJokes200ResponseJokesInner</returns>
        ApiResponse<SearchJokes200ResponseJokesInner> RandomJokeWithHttpInfo(string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), int? maxLength = default(int?), int operationIndex = 0);
        /// <summary>
        /// Random Meme
        /// </summary>
        /// <remarks>
        /// Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RandomMeme200Response</returns>
        RandomMeme200Response RandomMeme(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int operationIndex = 0);

        /// <summary>
        /// Random Meme
        /// </summary>
        /// <remarks>
        /// Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RandomMeme200Response</returns>
        ApiResponse<RandomMeme200Response> RandomMemeWithHttpInfo(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Gifs
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="number">The number of gifs to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGifs200Response</returns>
        SearchGifs200Response SearchGifs(string query, int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Gifs
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="number">The number of gifs to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGifs200Response</returns>
        ApiResponse<SearchGifs200Response> SearchGifsWithHttpInfo(string query, int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Jokes
        /// </summary>
        /// <remarks>
        /// With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the joke. (optional)</param>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="offset">The number of jokes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of jokes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchJokes200Response</returns>
        SearchJokes200Response SearchJokes(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), double? maxLength = default(double?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Jokes
        /// </summary>
        /// <remarks>
        /// With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the joke. (optional)</param>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="offset">The number of jokes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of jokes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchJokes200Response</returns>
        ApiResponse<SearchJokes200Response> SearchJokesWithHttpInfo(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), double? maxLength = default(double?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Memes
        /// </summary>
        /// <remarks>
        /// With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="offset">The number of memes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of memes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchMemes200Response</returns>
        SearchMemes200Response SearchMemes(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Memes
        /// </summary>
        /// <remarks>
        /// With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="offset">The number of memes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of memes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchMemes200Response</returns>
        ApiResponse<SearchMemes200Response> SearchMemesWithHttpInfo(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHumorApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Generate Nonsense Word
        /// </summary>
        /// <remarks>
        /// Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateNonsenseWord200Response</returns>
        System.Threading.Tasks.Task<GenerateNonsenseWord200Response> GenerateNonsenseWordAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Generate Nonsense Word
        /// </summary>
        /// <remarks>
        /// Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateNonsenseWord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GenerateNonsenseWord200Response>> GenerateNonsenseWordWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Random Joke
        /// </summary>
        /// <remarks>
        /// This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJokes200ResponseJokesInner</returns>
        System.Threading.Tasks.Task<SearchJokes200ResponseJokesInner> RandomJokeAsync(string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), int? maxLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Random Joke
        /// </summary>
        /// <remarks>
        /// This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJokes200ResponseJokesInner)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchJokes200ResponseJokesInner>> RandomJokeWithHttpInfoAsync(string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), int? maxLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Random Meme
        /// </summary>
        /// <remarks>
        /// Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RandomMeme200Response</returns>
        System.Threading.Tasks.Task<RandomMeme200Response> RandomMemeAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Random Meme
        /// </summary>
        /// <remarks>
        /// Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RandomMeme200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RandomMeme200Response>> RandomMemeWithHttpInfoAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Gifs
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="number">The number of gifs to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGifs200Response</returns>
        System.Threading.Tasks.Task<SearchGifs200Response> SearchGifsAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Gifs
        /// </summary>
        /// <remarks>
        /// Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="number">The number of gifs to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGifs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchGifs200Response>> SearchGifsWithHttpInfoAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Jokes
        /// </summary>
        /// <remarks>
        /// With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the joke. (optional)</param>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="offset">The number of jokes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of jokes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJokes200Response</returns>
        System.Threading.Tasks.Task<SearchJokes200Response> SearchJokesAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), double? maxLength = default(double?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Jokes
        /// </summary>
        /// <remarks>
        /// With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the joke. (optional)</param>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="offset">The number of jokes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of jokes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJokes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchJokes200Response>> SearchJokesWithHttpInfoAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), double? maxLength = default(double?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Memes
        /// </summary>
        /// <remarks>
        /// With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="offset">The number of memes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of memes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchMemes200Response</returns>
        System.Threading.Tasks.Task<SearchMemes200Response> SearchMemesAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Memes
        /// </summary>
        /// <remarks>
        /// With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="offset">The number of memes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of memes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchMemes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchMemes200Response>> SearchMemesWithHttpInfoAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHumorApi : IHumorApiSync, IHumorApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HumorApi : IHumorApi
    {
        private apileague.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HumorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HumorApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HumorApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HumorApi(string basePath)
        {
            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                new apileague.Client.Configuration { BasePath = basePath }
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HumorApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HumorApi(apileague.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HumorApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HumorApi(apileague.Client.ISynchronousClient client, apileague.Client.IAsynchronousClient asyncClient, apileague.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public apileague.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public apileague.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public apileague.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public apileague.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Generate Nonsense Word Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GenerateNonsenseWord200Response</returns>
        public GenerateNonsenseWord200Response GenerateNonsenseWord(int operationIndex = 0)
        {
            apileague.Client.ApiResponse<GenerateNonsenseWord200Response> localVarResponse = GenerateNonsenseWordWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Nonsense Word Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GenerateNonsenseWord200Response</returns>
        public apileague.Client.ApiResponse<GenerateNonsenseWord200Response> GenerateNonsenseWordWithHttpInfo(int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HumorApi.GenerateNonsenseWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GenerateNonsenseWord200Response>("/generate-nonsense-word", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateNonsenseWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Generate Nonsense Word Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GenerateNonsenseWord200Response</returns>
        public async System.Threading.Tasks.Task<GenerateNonsenseWord200Response> GenerateNonsenseWordAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<GenerateNonsenseWord200Response> localVarResponse = await GenerateNonsenseWordWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Generate Nonsense Word Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GenerateNonsenseWord200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<GenerateNonsenseWord200Response>> GenerateNonsenseWordWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HumorApi.GenerateNonsenseWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GenerateNonsenseWord200Response>("/generate-nonsense-word", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GenerateNonsenseWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Joke This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchJokes200ResponseJokesInner</returns>
        public SearchJokes200ResponseJokesInner RandomJoke(string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), int? maxLength = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchJokes200ResponseJokesInner> localVarResponse = RandomJokeWithHttpInfo(includeTags, excludeTags, minRating, maxLength);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Joke This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchJokes200ResponseJokesInner</returns>
        public apileague.Client.ApiResponse<SearchJokes200ResponseJokesInner> RandomJokeWithHttpInfo(string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), int? maxLength = default(int?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-length", maxLength));
            }

            localVarRequestOptions.Operation = "HumorApi.RandomJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchJokes200ResponseJokesInner>("/retrieve-random-joke", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Joke This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJokes200ResponseJokesInner</returns>
        public async System.Threading.Tasks.Task<SearchJokes200ResponseJokesInner> RandomJokeAsync(string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), int? maxLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchJokes200ResponseJokesInner> localVarResponse = await RandomJokeWithHttpInfoAsync(includeTags, excludeTags, minRating, maxLength, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Joke This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJokes200ResponseJokesInner)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchJokes200ResponseJokesInner>> RandomJokeWithHttpInfoAsync(string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), int? maxLength = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-length", maxLength));
            }

            localVarRequestOptions.Operation = "HumorApi.RandomJoke";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchJokes200ResponseJokesInner>("/retrieve-random-joke", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomJoke", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Meme Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RandomMeme200Response</returns>
        public RandomMeme200Response RandomMeme(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<RandomMeme200Response> localVarResponse = RandomMemeWithHttpInfo(keywords, keywordsInImage, mediaType, minRating, maxAgeDays);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Meme Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RandomMeme200Response</returns>
        public apileague.Client.ApiResponse<RandomMeme200Response> RandomMemeWithHttpInfo(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsInImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords-in-image", keywordsInImage));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "media-type", mediaType));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxAgeDays != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-age-days", maxAgeDays));
            }

            localVarRequestOptions.Operation = "HumorApi.RandomMeme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RandomMeme200Response>("/retrieve-random-meme", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomMeme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Random Meme Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RandomMeme200Response</returns>
        public async System.Threading.Tasks.Task<RandomMeme200Response> RandomMemeAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<RandomMeme200Response> localVarResponse = await RandomMemeWithHttpInfoAsync(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Random Meme Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RandomMeme200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<RandomMeme200Response>> RandomMemeWithHttpInfoAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsInImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords-in-image", keywordsInImage));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "media-type", mediaType));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxAgeDays != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-age-days", maxAgeDays));
            }

            localVarRequestOptions.Operation = "HumorApi.RandomMeme";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RandomMeme200Response>("/retrieve-random-meme", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RandomMeme", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Gifs Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="number">The number of gifs to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchGifs200Response</returns>
        public SearchGifs200Response SearchGifs(string query, int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchGifs200Response> localVarResponse = SearchGifsWithHttpInfo(query, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Gifs Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="number">The number of gifs to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchGifs200Response</returns>
        public apileague.Client.ApiResponse<SearchGifs200Response> SearchGifsWithHttpInfo(string query, int? number = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'query' when calling HumorApi->SearchGifs");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "HumorApi.SearchGifs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchGifs200Response>("/search-gifs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGifs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Gifs Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="number">The number of gifs to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchGifs200Response</returns>
        public async System.Threading.Tasks.Task<SearchGifs200Response> SearchGifsAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchGifs200Response> localVarResponse = await SearchGifsWithHttpInfoAsync(query, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Gifs Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query.</param>
        /// <param name="number">The number of gifs to return in range [1,10] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchGifs200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchGifs200Response>> SearchGifsWithHttpInfoAsync(string query, int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'query' is set
            if (query == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'query' when calling HumorApi->SearchGifs");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "HumorApi.SearchGifs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchGifs200Response>("/search-gifs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchGifs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Jokes With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the joke. (optional)</param>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="offset">The number of jokes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of jokes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchJokes200Response</returns>
        public SearchJokes200Response SearchJokes(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), double? maxLength = default(double?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchJokes200Response> localVarResponse = SearchJokesWithHttpInfo(keywords, includeTags, excludeTags, minRating, maxLength, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Jokes With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the joke. (optional)</param>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="offset">The number of jokes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of jokes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchJokes200Response</returns>
        public apileague.Client.ApiResponse<SearchJokes200Response> SearchJokesWithHttpInfo(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), double? maxLength = default(double?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-length", maxLength));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "HumorApi.SearchJokes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchJokes200Response>("/search-jokes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchJokes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Jokes With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the joke. (optional)</param>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="offset">The number of jokes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of jokes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchJokes200Response</returns>
        public async System.Threading.Tasks.Task<SearchJokes200Response> SearchJokesAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), double? maxLength = default(double?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchJokes200Response> localVarResponse = await SearchJokesWithHttpInfoAsync(keywords, includeTags, excludeTags, minRating, maxLength, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Jokes With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the joke. (optional)</param>
        /// <param name="includeTags">A comma-separated list of tags the jokes should have. (optional)</param>
        /// <param name="excludeTags">A comma-separated list of tags the jokes must not have. (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the jokes. (optional)</param>
        /// <param name="maxLength">The maximum length of the joke in letters. (optional)</param>
        /// <param name="offset">The number of jokes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of jokes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchJokes200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchJokes200Response>> SearchJokesWithHttpInfoAsync(string? keywords = default(string?), string? includeTags = default(string?), string? excludeTags = default(string?), double? minRating = default(double?), double? maxLength = default(double?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (includeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "include-tags", includeTags));
            }
            if (excludeTags != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-tags", excludeTags));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxLength != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-length", maxLength));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "HumorApi.SearchJokes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchJokes200Response>("/search-jokes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchJokes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Memes With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="offset">The number of memes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of memes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchMemes200Response</returns>
        public SearchMemes200Response SearchMemes(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchMemes200Response> localVarResponse = SearchMemesWithHttpInfo(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Memes With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="offset">The number of memes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of memes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchMemes200Response</returns>
        public apileague.Client.ApiResponse<SearchMemes200Response> SearchMemesWithHttpInfo(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsInImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords-in-image", keywordsInImage));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "media-type", mediaType));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxAgeDays != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-age-days", maxAgeDays));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "HumorApi.SearchMemes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchMemes200Response>("/search-memes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Memes With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="offset">The number of memes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of memes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchMemes200Response</returns>
        public async System.Threading.Tasks.Task<SearchMemes200Response> SearchMemesAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchMemes200Response> localVarResponse = await SearchMemesWithHttpInfoAsync(keywords, keywordsInImage, mediaType, minRating, maxAgeDays, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Memes With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="keywords">A comma-separated list of words that must occur in the meme. (optional)</param>
        /// <param name="keywordsInImage">Whether the keywords must occur in the image. (optional)</param>
        /// <param name="mediaType">The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)</param>
        /// <param name="minRating">The minimum rating in range [0.0,1.0] of the meme. (optional)</param>
        /// <param name="maxAgeDays">The maximum age of the meme in days. (optional)</param>
        /// <param name="offset">The number of memes to skip, between 0 and 1000. (optional)</param>
        /// <param name="number">The number of memes, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchMemes200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchMemes200Response>> SearchMemesWithHttpInfoAsync(string? keywords = default(string?), bool? keywordsInImage = default(bool?), string? mediaType = default(string?), double? minRating = default(double?), int? maxAgeDays = default(int?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (keywords != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords", keywords));
            }
            if (keywordsInImage != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "keywords-in-image", keywordsInImage));
            }
            if (mediaType != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "media-type", mediaType));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (maxAgeDays != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-age-days", maxAgeDays));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "HumorApi.SearchMemes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchMemes200Response>("/search-memes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchMemes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
