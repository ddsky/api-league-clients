/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using apileague.Client;
using apileague.Model;

namespace apileague.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITextApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Correct Spelling
        /// </summary>
        /// <remarks>
        /// The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be corrected.</param>
        /// <param name="language">The language of the text, one of en, de, es, fr, or it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorrectSpelling200Response</returns>
        CorrectSpelling200Response CorrectSpelling(string text, string language, int operationIndex = 0);

        /// <summary>
        /// Correct Spelling
        /// </summary>
        /// <remarks>
        /// The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be corrected.</param>
        /// <param name="language">The language of the text, one of en, de, es, fr, or it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorrectSpelling200Response</returns>
        ApiResponse<CorrectSpelling200Response> CorrectSpellingWithHttpInfo(string text, string language, int operationIndex = 0);
        /// <summary>
        /// Detect Language
        /// </summary>
        /// <remarks>
        /// Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the language should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DetectLanguage200ResponseInner&gt;</returns>
        List<DetectLanguage200ResponseInner> DetectLanguage(string text, int operationIndex = 0);

        /// <summary>
        /// Detect Language
        /// </summary>
        /// <remarks>
        /// Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the language should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DetectLanguage200ResponseInner&gt;</returns>
        ApiResponse<List<DetectLanguage200ResponseInner>> DetectLanguageWithHttpInfo(string text, int operationIndex = 0);
        /// <summary>
        /// Detect Sentiment
        /// </summary>
        /// <remarks>
        /// Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the sentiment should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DetectSentiment200Response</returns>
        DetectSentiment200Response DetectSentiment(string text, int operationIndex = 0);

        /// <summary>
        /// Detect Sentiment
        /// </summary>
        /// <remarks>
        /// Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the sentiment should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DetectSentiment200Response</returns>
        ApiResponse<DetectSentiment200Response> DetectSentimentWithHttpInfo(string text, int operationIndex = 0);
        /// <summary>
        /// Extract Dates
        /// </summary>
        /// <remarks>
        /// Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which dates should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractDates200Response</returns>
        ExtractDates200Response ExtractDates(string text, int operationIndex = 0);

        /// <summary>
        /// Extract Dates
        /// </summary>
        /// <remarks>
        /// Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which dates should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractDates200Response</returns>
        ApiResponse<ExtractDates200Response> ExtractDatesWithHttpInfo(string text, int operationIndex = 0);
        /// <summary>
        /// Extract Entities
        /// </summary>
        /// <remarks>
        /// Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which entities should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractEntities200Response</returns>
        ExtractEntities200Response ExtractEntities(string text, int operationIndex = 0);

        /// <summary>
        /// Extract Entities
        /// </summary>
        /// <remarks>
        /// Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which entities should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractEntities200Response</returns>
        ApiResponse<ExtractEntities200Response> ExtractEntitiesWithHttpInfo(string text, int operationIndex = 0);
        /// <summary>
        /// List Word Synonyms
        /// </summary>
        /// <remarks>
        /// Return synonyms of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which a list of synonyms should be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWordSynonyms200Response</returns>
        ListWordSynonyms200Response ListWordSynonyms(string word, int operationIndex = 0);

        /// <summary>
        /// List Word Synonyms
        /// </summary>
        /// <remarks>
        /// Return synonyms of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which a list of synonyms should be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWordSynonyms200Response</returns>
        ApiResponse<ListWordSynonyms200Response> ListWordSynonymsWithHttpInfo(string word, int operationIndex = 0);
        /// <summary>
        /// Part of Speech Tagging
        /// </summary>
        /// <remarks>
        /// Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to tag the part of speech.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PartOfSpeechTagging200Response</returns>
        PartOfSpeechTagging200Response PartOfSpeechTagging(string text, int operationIndex = 0);

        /// <summary>
        /// Part of Speech Tagging
        /// </summary>
        /// <remarks>
        /// Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to tag the part of speech.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PartOfSpeechTagging200Response</returns>
        ApiResponse<PartOfSpeechTagging200Response> PartOfSpeechTaggingWithHttpInfo(string text, int operationIndex = 0);
        /// <summary>
        /// Pluralize Word
        /// </summary>
        /// <remarks>
        /// Find the plural form of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the plural form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PluralizeWord200Response</returns>
        PluralizeWord200Response PluralizeWord(string word, int operationIndex = 0);

        /// <summary>
        /// Pluralize Word
        /// </summary>
        /// <remarks>
        /// Find the plural form of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the plural form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PluralizeWord200Response</returns>
        ApiResponse<PluralizeWord200Response> PluralizeWordWithHttpInfo(string word, int operationIndex = 0);
        /// <summary>
        /// Score Readability
        /// </summary>
        /// <remarks>
        /// Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to score for readability.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScoreReadability200Response</returns>
        ScoreReadability200Response ScoreReadability(string text, int operationIndex = 0);

        /// <summary>
        /// Score Readability
        /// </summary>
        /// <remarks>
        /// Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to score for readability.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScoreReadability200Response</returns>
        ApiResponse<ScoreReadability200Response> ScoreReadabilityWithHttpInfo(string text, int operationIndex = 0);
        /// <summary>
        /// Score Text
        /// </summary>
        /// <remarks>
        /// Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the text to score.</param>
        /// <param name="text">The text to score for multiple metrics.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScoreText200Response</returns>
        ScoreText200Response ScoreText(string title, string text, int operationIndex = 0);

        /// <summary>
        /// Score Text
        /// </summary>
        /// <remarks>
        /// Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the text to score.</param>
        /// <param name="text">The text to score for multiple metrics.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScoreText200Response</returns>
        ApiResponse<ScoreText200Response> ScoreTextWithHttpInfo(string title, string text, int operationIndex = 0);
        /// <summary>
        /// Singularize Word
        /// </summary>
        /// <remarks>
        /// Find the singular form of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the singular form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SingularizeWord200Response</returns>
        SingularizeWord200Response SingularizeWord(string word, int operationIndex = 0);

        /// <summary>
        /// Singularize Word
        /// </summary>
        /// <remarks>
        /// Find the singular form of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the singular form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SingularizeWord200Response</returns>
        ApiResponse<SingularizeWord200Response> SingularizeWordWithHttpInfo(string word, int operationIndex = 0);
        /// <summary>
        /// Text Stemming
        /// </summary>
        /// <remarks>
        /// The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be stemmed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextStemming200Response</returns>
        TextStemming200Response TextStemming(string text, int operationIndex = 0);

        /// <summary>
        /// Text Stemming
        /// </summary>
        /// <remarks>
        /// The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be stemmed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextStemming200Response</returns>
        ApiResponse<TextStemming200Response> TextStemmingWithHttpInfo(string text, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITextApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Correct Spelling
        /// </summary>
        /// <remarks>
        /// The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be corrected.</param>
        /// <param name="language">The language of the text, one of en, de, es, fr, or it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorrectSpelling200Response</returns>
        System.Threading.Tasks.Task<CorrectSpelling200Response> CorrectSpellingAsync(string text, string language, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Correct Spelling
        /// </summary>
        /// <remarks>
        /// The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be corrected.</param>
        /// <param name="language">The language of the text, one of en, de, es, fr, or it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorrectSpelling200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CorrectSpelling200Response>> CorrectSpellingWithHttpInfoAsync(string text, string language, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detect Language
        /// </summary>
        /// <remarks>
        /// Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the language should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DetectLanguage200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<DetectLanguage200ResponseInner>> DetectLanguageAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detect Language
        /// </summary>
        /// <remarks>
        /// Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the language should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DetectLanguage200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DetectLanguage200ResponseInner>>> DetectLanguageWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Detect Sentiment
        /// </summary>
        /// <remarks>
        /// Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the sentiment should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DetectSentiment200Response</returns>
        System.Threading.Tasks.Task<DetectSentiment200Response> DetectSentimentAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Detect Sentiment
        /// </summary>
        /// <remarks>
        /// Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the sentiment should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DetectSentiment200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetectSentiment200Response>> DetectSentimentWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract Dates
        /// </summary>
        /// <remarks>
        /// Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which dates should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractDates200Response</returns>
        System.Threading.Tasks.Task<ExtractDates200Response> ExtractDatesAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract Dates
        /// </summary>
        /// <remarks>
        /// Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which dates should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractDates200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractDates200Response>> ExtractDatesWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract Entities
        /// </summary>
        /// <remarks>
        /// Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which entities should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractEntities200Response</returns>
        System.Threading.Tasks.Task<ExtractEntities200Response> ExtractEntitiesAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract Entities
        /// </summary>
        /// <remarks>
        /// Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which entities should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractEntities200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractEntities200Response>> ExtractEntitiesWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Word Synonyms
        /// </summary>
        /// <remarks>
        /// Return synonyms of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which a list of synonyms should be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWordSynonyms200Response</returns>
        System.Threading.Tasks.Task<ListWordSynonyms200Response> ListWordSynonymsAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Word Synonyms
        /// </summary>
        /// <remarks>
        /// Return synonyms of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which a list of synonyms should be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWordSynonyms200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListWordSynonyms200Response>> ListWordSynonymsWithHttpInfoAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Part of Speech Tagging
        /// </summary>
        /// <remarks>
        /// Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to tag the part of speech.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartOfSpeechTagging200Response</returns>
        System.Threading.Tasks.Task<PartOfSpeechTagging200Response> PartOfSpeechTaggingAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Part of Speech Tagging
        /// </summary>
        /// <remarks>
        /// Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to tag the part of speech.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartOfSpeechTagging200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartOfSpeechTagging200Response>> PartOfSpeechTaggingWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Pluralize Word
        /// </summary>
        /// <remarks>
        /// Find the plural form of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the plural form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluralizeWord200Response</returns>
        System.Threading.Tasks.Task<PluralizeWord200Response> PluralizeWordAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Pluralize Word
        /// </summary>
        /// <remarks>
        /// Find the plural form of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the plural form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluralizeWord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PluralizeWord200Response>> PluralizeWordWithHttpInfoAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Score Readability
        /// </summary>
        /// <remarks>
        /// Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to score for readability.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScoreReadability200Response</returns>
        System.Threading.Tasks.Task<ScoreReadability200Response> ScoreReadabilityAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Score Readability
        /// </summary>
        /// <remarks>
        /// Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to score for readability.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScoreReadability200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScoreReadability200Response>> ScoreReadabilityWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Score Text
        /// </summary>
        /// <remarks>
        /// Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the text to score.</param>
        /// <param name="text">The text to score for multiple metrics.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScoreText200Response</returns>
        System.Threading.Tasks.Task<ScoreText200Response> ScoreTextAsync(string title, string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Score Text
        /// </summary>
        /// <remarks>
        /// Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the text to score.</param>
        /// <param name="text">The text to score for multiple metrics.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScoreText200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ScoreText200Response>> ScoreTextWithHttpInfoAsync(string title, string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Singularize Word
        /// </summary>
        /// <remarks>
        /// Find the singular form of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the singular form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingularizeWord200Response</returns>
        System.Threading.Tasks.Task<SingularizeWord200Response> SingularizeWordAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Singularize Word
        /// </summary>
        /// <remarks>
        /// Find the singular form of a word.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the singular form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingularizeWord200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SingularizeWord200Response>> SingularizeWordWithHttpInfoAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Text Stemming
        /// </summary>
        /// <remarks>
        /// The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be stemmed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextStemming200Response</returns>
        System.Threading.Tasks.Task<TextStemming200Response> TextStemmingAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Text Stemming
        /// </summary>
        /// <remarks>
        /// The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be stemmed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextStemming200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TextStemming200Response>> TextStemmingWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITextApi : ITextApiSync, ITextApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TextApi : ITextApi
    {
        private apileague.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TextApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TextApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TextApi(string basePath)
        {
            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                new apileague.Client.Configuration { BasePath = basePath }
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TextApi(apileague.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TextApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TextApi(apileague.Client.ISynchronousClient client, apileague.Client.IAsynchronousClient asyncClient, apileague.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public apileague.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public apileague.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public apileague.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public apileague.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Correct Spelling The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be corrected.</param>
        /// <param name="language">The language of the text, one of en, de, es, fr, or it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CorrectSpelling200Response</returns>
        public CorrectSpelling200Response CorrectSpelling(string text, string language, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<CorrectSpelling200Response> localVarResponse = CorrectSpellingWithHttpInfo(text, language);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Correct Spelling The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be corrected.</param>
        /// <param name="language">The language of the text, one of en, de, es, fr, or it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CorrectSpelling200Response</returns>
        public apileague.Client.ApiResponse<CorrectSpelling200Response> CorrectSpellingWithHttpInfo(string text, string language, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->CorrectSpelling");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'language' when calling TextApi->CorrectSpelling");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "language", language));

            localVarRequestOptions.Operation = "TextApi.CorrectSpelling";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CorrectSpelling200Response>("/correct-spelling", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CorrectSpelling", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Correct Spelling The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be corrected.</param>
        /// <param name="language">The language of the text, one of en, de, es, fr, or it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CorrectSpelling200Response</returns>
        public async System.Threading.Tasks.Task<CorrectSpelling200Response> CorrectSpellingAsync(string text, string language, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<CorrectSpelling200Response> localVarResponse = await CorrectSpellingWithHttpInfoAsync(text, language, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Correct Spelling The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be corrected.</param>
        /// <param name="language">The language of the text, one of en, de, es, fr, or it.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CorrectSpelling200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<CorrectSpelling200Response>> CorrectSpellingWithHttpInfoAsync(string text, string language, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->CorrectSpelling");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'language' when calling TextApi->CorrectSpelling");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "language", language));

            localVarRequestOptions.Operation = "TextApi.CorrectSpelling";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CorrectSpelling200Response>("/correct-spelling", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CorrectSpelling", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect Language Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the language should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;DetectLanguage200ResponseInner&gt;</returns>
        public List<DetectLanguage200ResponseInner> DetectLanguage(string text, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<List<DetectLanguage200ResponseInner>> localVarResponse = DetectLanguageWithHttpInfo(text);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Language Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the language should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;DetectLanguage200ResponseInner&gt;</returns>
        public apileague.Client.ApiResponse<List<DetectLanguage200ResponseInner>> DetectLanguageWithHttpInfo(string text, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->DetectLanguage");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.DetectLanguage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<DetectLanguage200ResponseInner>>("/detect-language", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectLanguage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect Language Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the language should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;DetectLanguage200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<DetectLanguage200ResponseInner>> DetectLanguageAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<List<DetectLanguage200ResponseInner>> localVarResponse = await DetectLanguageWithHttpInfoAsync(text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Language Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the language should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;DetectLanguage200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<List<DetectLanguage200ResponseInner>>> DetectLanguageWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->DetectLanguage");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.DetectLanguage";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<DetectLanguage200ResponseInner>>("/detect-language", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectLanguage", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect Sentiment Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the sentiment should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DetectSentiment200Response</returns>
        public DetectSentiment200Response DetectSentiment(string text, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<DetectSentiment200Response> localVarResponse = DetectSentimentWithHttpInfo(text);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Sentiment Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the sentiment should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DetectSentiment200Response</returns>
        public apileague.Client.ApiResponse<DetectSentiment200Response> DetectSentimentWithHttpInfo(string text, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->DetectSentiment");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.DetectSentiment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DetectSentiment200Response>("/detect-sentiment", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectSentiment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Detect Sentiment Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the sentiment should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DetectSentiment200Response</returns>
        public async System.Threading.Tasks.Task<DetectSentiment200Response> DetectSentimentAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<DetectSentiment200Response> localVarResponse = await DetectSentimentWithHttpInfoAsync(text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Detect Sentiment Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text for which the sentiment should be detected.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DetectSentiment200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<DetectSentiment200Response>> DetectSentimentWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->DetectSentiment");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.DetectSentiment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DetectSentiment200Response>("/detect-sentiment", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DetectSentiment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Dates Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which dates should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractDates200Response</returns>
        public ExtractDates200Response ExtractDates(string text, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<ExtractDates200Response> localVarResponse = ExtractDatesWithHttpInfo(text);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Dates Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which dates should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractDates200Response</returns>
        public apileague.Client.ApiResponse<ExtractDates200Response> ExtractDatesWithHttpInfo(string text, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->ExtractDates");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.ExtractDates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtractDates200Response>("/extract-dates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Dates Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which dates should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractDates200Response</returns>
        public async System.Threading.Tasks.Task<ExtractDates200Response> ExtractDatesAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<ExtractDates200Response> localVarResponse = await ExtractDatesWithHttpInfoAsync(text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Dates Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \&quot;April 5th, 2035\&quot;, \&quot;04/05/2035\&quot;, or \&quot;05.04.2035\&quot;. The normalized date is the date in the form of a timestamp (milliseconds since 1970).
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which dates should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractDates200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<ExtractDates200Response>> ExtractDatesWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->ExtractDates");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.ExtractDates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtractDates200Response>("/extract-dates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractDates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Entities Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which entities should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractEntities200Response</returns>
        public ExtractEntities200Response ExtractEntities(string text, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<ExtractEntities200Response> localVarResponse = ExtractEntitiesWithHttpInfo(text);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Entities Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which entities should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractEntities200Response</returns>
        public apileague.Client.ApiResponse<ExtractEntities200Response> ExtractEntitiesWithHttpInfo(string text, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->ExtractEntities");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.ExtractEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtractEntities200Response>("/extract-entities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Entities Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which entities should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractEntities200Response</returns>
        public async System.Threading.Tasks.Task<ExtractEntities200Response> ExtractEntitiesAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<ExtractEntities200Response> localVarResponse = await ExtractEntitiesWithHttpInfoAsync(text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Entities Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \&quot;Canada\&quot; represents the concept of a country. The word \&quot;Jim Carrey\&quot; represents the concept of a person. The word \&quot;Tesla\&quot; represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text from which entities should be extracted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractEntities200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<ExtractEntities200Response>> ExtractEntitiesWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->ExtractEntities");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.ExtractEntities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtractEntities200Response>("/extract-entities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractEntities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Word Synonyms Return synonyms of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which a list of synonyms should be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListWordSynonyms200Response</returns>
        public ListWordSynonyms200Response ListWordSynonyms(string word, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<ListWordSynonyms200Response> localVarResponse = ListWordSynonymsWithHttpInfo(word);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Word Synonyms Return synonyms of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which a list of synonyms should be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListWordSynonyms200Response</returns>
        public apileague.Client.ApiResponse<ListWordSynonyms200Response> ListWordSynonymsWithHttpInfo(string word, int operationIndex = 0)
        {
            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'word' when calling TextApi->ListWordSynonyms");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "word", word));

            localVarRequestOptions.Operation = "TextApi.ListWordSynonyms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListWordSynonyms200Response>("/list-synonyms", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWordSynonyms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Word Synonyms Return synonyms of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which a list of synonyms should be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListWordSynonyms200Response</returns>
        public async System.Threading.Tasks.Task<ListWordSynonyms200Response> ListWordSynonymsAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<ListWordSynonyms200Response> localVarResponse = await ListWordSynonymsWithHttpInfoAsync(word, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Word Synonyms Return synonyms of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which a list of synonyms should be returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListWordSynonyms200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<ListWordSynonyms200Response>> ListWordSynonymsWithHttpInfoAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'word' when calling TextApi->ListWordSynonyms");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "word", word));

            localVarRequestOptions.Operation = "TextApi.ListWordSynonyms";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListWordSynonyms200Response>("/list-synonyms", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListWordSynonyms", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Part of Speech Tagging Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to tag the part of speech.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PartOfSpeechTagging200Response</returns>
        public PartOfSpeechTagging200Response PartOfSpeechTagging(string text, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<PartOfSpeechTagging200Response> localVarResponse = PartOfSpeechTaggingWithHttpInfo(text);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Part of Speech Tagging Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to tag the part of speech.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PartOfSpeechTagging200Response</returns>
        public apileague.Client.ApiResponse<PartOfSpeechTagging200Response> PartOfSpeechTaggingWithHttpInfo(string text, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->PartOfSpeechTagging");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.PartOfSpeechTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PartOfSpeechTagging200Response>("/tag-pos", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartOfSpeechTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Part of Speech Tagging Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to tag the part of speech.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PartOfSpeechTagging200Response</returns>
        public async System.Threading.Tasks.Task<PartOfSpeechTagging200Response> PartOfSpeechTaggingAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<PartOfSpeechTagging200Response> localVarResponse = await PartOfSpeechTaggingWithHttpInfoAsync(text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Part of Speech Tagging Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to tag the part of speech.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PartOfSpeechTagging200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<PartOfSpeechTagging200Response>> PartOfSpeechTaggingWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->PartOfSpeechTagging");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.PartOfSpeechTagging";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PartOfSpeechTagging200Response>("/tag-pos", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PartOfSpeechTagging", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pluralize Word Find the plural form of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the plural form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PluralizeWord200Response</returns>
        public PluralizeWord200Response PluralizeWord(string word, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<PluralizeWord200Response> localVarResponse = PluralizeWordWithHttpInfo(word);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pluralize Word Find the plural form of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the plural form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PluralizeWord200Response</returns>
        public apileague.Client.ApiResponse<PluralizeWord200Response> PluralizeWordWithHttpInfo(string word, int operationIndex = 0)
        {
            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'word' when calling TextApi->PluralizeWord");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "word", word));

            localVarRequestOptions.Operation = "TextApi.PluralizeWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PluralizeWord200Response>("/pluralize-word", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluralizeWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Pluralize Word Find the plural form of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the plural form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PluralizeWord200Response</returns>
        public async System.Threading.Tasks.Task<PluralizeWord200Response> PluralizeWordAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<PluralizeWord200Response> localVarResponse = await PluralizeWordWithHttpInfoAsync(word, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Pluralize Word Find the plural form of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the plural form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PluralizeWord200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<PluralizeWord200Response>> PluralizeWordWithHttpInfoAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'word' when calling TextApi->PluralizeWord");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "word", word));

            localVarRequestOptions.Operation = "TextApi.PluralizeWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PluralizeWord200Response>("/pluralize-word", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PluralizeWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Score Readability Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to score for readability.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScoreReadability200Response</returns>
        public ScoreReadability200Response ScoreReadability(string text, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<ScoreReadability200Response> localVarResponse = ScoreReadabilityWithHttpInfo(text);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Score Readability Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to score for readability.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScoreReadability200Response</returns>
        public apileague.Client.ApiResponse<ScoreReadability200Response> ScoreReadabilityWithHttpInfo(string text, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->ScoreReadability");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.ScoreReadability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScoreReadability200Response>("/score-readability", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScoreReadability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Score Readability Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to score for readability.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScoreReadability200Response</returns>
        public async System.Threading.Tasks.Task<ScoreReadability200Response> ScoreReadabilityAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<ScoreReadability200Response> localVarResponse = await ScoreReadabilityWithHttpInfoAsync(text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Score Readability Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to score for readability.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScoreReadability200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<ScoreReadability200Response>> ScoreReadabilityWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->ScoreReadability");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.ScoreReadability";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScoreReadability200Response>("/score-readability", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScoreReadability", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Score Text Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the text to score.</param>
        /// <param name="text">The text to score for multiple metrics.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ScoreText200Response</returns>
        public ScoreText200Response ScoreText(string title, string text, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<ScoreText200Response> localVarResponse = ScoreTextWithHttpInfo(title, text);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Score Text Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the text to score.</param>
        /// <param name="text">The text to score for multiple metrics.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ScoreText200Response</returns>
        public apileague.Client.ApiResponse<ScoreText200Response> ScoreTextWithHttpInfo(string title, string text, int operationIndex = 0)
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'title' when calling TextApi->ScoreText");
            }

            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->ScoreText");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.ScoreText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ScoreText200Response>("/score-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScoreText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Score Text Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the text to score.</param>
        /// <param name="text">The text to score for multiple metrics.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ScoreText200Response</returns>
        public async System.Threading.Tasks.Task<ScoreText200Response> ScoreTextAsync(string title, string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<ScoreText200Response> localVarResponse = await ScoreTextWithHttpInfoAsync(title, text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Score Text Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="title">The title of the text to score.</param>
        /// <param name="text">The text to score for multiple metrics.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ScoreText200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<ScoreText200Response>> ScoreTextWithHttpInfoAsync(string title, string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'title' is set
            if (title == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'title' when calling TextApi->ScoreText");
            }

            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->ScoreText");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "title", title));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.ScoreText";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ScoreText200Response>("/score-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScoreText", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Singularize Word Find the singular form of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the singular form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SingularizeWord200Response</returns>
        public SingularizeWord200Response SingularizeWord(string word, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SingularizeWord200Response> localVarResponse = SingularizeWordWithHttpInfo(word);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Singularize Word Find the singular form of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the singular form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SingularizeWord200Response</returns>
        public apileague.Client.ApiResponse<SingularizeWord200Response> SingularizeWordWithHttpInfo(string word, int operationIndex = 0)
        {
            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'word' when calling TextApi->SingularizeWord");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "word", word));

            localVarRequestOptions.Operation = "TextApi.SingularizeWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SingularizeWord200Response>("/singularize-word", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingularizeWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Singularize Word Find the singular form of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the singular form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SingularizeWord200Response</returns>
        public async System.Threading.Tasks.Task<SingularizeWord200Response> SingularizeWordAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SingularizeWord200Response> localVarResponse = await SingularizeWordWithHttpInfoAsync(word, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Singularize Word Find the singular form of a word.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="word">The (noun) word for which the singular form should be found.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SingularizeWord200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SingularizeWord200Response>> SingularizeWordWithHttpInfoAsync(string word, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'word' is set
            if (word == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'word' when calling TextApi->SingularizeWord");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "word", word));

            localVarRequestOptions.Operation = "TextApi.SingularizeWord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SingularizeWord200Response>("/singularize-word", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SingularizeWord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Text Stemming The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be stemmed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TextStemming200Response</returns>
        public TextStemming200Response TextStemming(string text, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<TextStemming200Response> localVarResponse = TextStemmingWithHttpInfo(text);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Text Stemming The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be stemmed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TextStemming200Response</returns>
        public apileague.Client.ApiResponse<TextStemming200Response> TextStemmingWithHttpInfo(string text, int operationIndex = 0)
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->TextStemming");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.TextStemming";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TextStemming200Response>("/stem-text", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextStemming", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Text Stemming The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be stemmed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TextStemming200Response</returns>
        public async System.Threading.Tasks.Task<TextStemming200Response> TextStemmingAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<TextStemming200Response> localVarResponse = await TextStemmingWithHttpInfoAsync(text, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Text Stemming The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to be stemmed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TextStemming200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<TextStemming200Response>> TextStemmingWithHttpInfoAsync(string text, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'text' is set
            if (text == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'text' when calling TextApi->TextStemming");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));

            localVarRequestOptions.Operation = "TextApi.TextStemming";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TextStemming200Response>("/stem-text", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TextStemming", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
