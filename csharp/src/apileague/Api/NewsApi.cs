/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using apileague.Client;
using apileague.Model;

namespace apileague.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Extract News API
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNewsAPI200Response</returns>
        ExtractNewsAPI200Response ExtractNewsAPI(string url, bool analyze, int operationIndex = 0);

        /// <summary>
        /// Extract News API
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNewsAPI200Response</returns>
        ApiResponse<ExtractNewsAPI200Response> ExtractNewsAPIWithHttpInfo(string url, bool analyze, int operationIndex = 0);
        /// <summary>
        /// Search News API
        /// </summary>
        /// <remarks>
        /// Search and filter millions of news from over 200 countries in 90 languages by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (ORG, PER, or LOC). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchNewsAPI200Response</returns>
        SearchNewsAPI200Response SearchNewsAPI(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search News API
        /// </summary>
        /// <remarks>
        /// Search and filter millions of news from over 200 countries in 90 languages by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (ORG, PER, or LOC). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchNewsAPI200Response</returns>
        ApiResponse<SearchNewsAPI200Response> SearchNewsAPIWithHttpInfo(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Top News API
        /// </summary>
        /// <remarks>
        /// Get the top news from a country (over 220 are supported) in a language (over 90 are supported) for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopNewsAPI200Response</returns>
        TopNewsAPI200Response TopNewsAPI(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Top News API
        /// </summary>
        /// <remarks>
        /// Get the top news from a country (over 220 are supported) in a language (over 90 are supported) for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopNewsAPI200Response</returns>
        ApiResponse<TopNewsAPI200Response> TopNewsAPIWithHttpInfo(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Extract News API
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNewsAPI200Response</returns>
        System.Threading.Tasks.Task<ExtractNewsAPI200Response> ExtractNewsAPIAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract News API
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNewsAPI200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractNewsAPI200Response>> ExtractNewsAPIWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search News API
        /// </summary>
        /// <remarks>
        /// Search and filter millions of news from over 200 countries in 90 languages by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (ORG, PER, or LOC). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNewsAPI200Response</returns>
        System.Threading.Tasks.Task<SearchNewsAPI200Response> SearchNewsAPIAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search News API
        /// </summary>
        /// <remarks>
        /// Search and filter millions of news from over 200 countries in 90 languages by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (ORG, PER, or LOC). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNewsAPI200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchNewsAPI200Response>> SearchNewsAPIWithHttpInfoAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Top News API
        /// </summary>
        /// <remarks>
        /// Get the top news from a country (over 220 are supported) in a language (over 90 are supported) for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopNewsAPI200Response</returns>
        System.Threading.Tasks.Task<TopNewsAPI200Response> TopNewsAPIAsync(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Top News API
        /// </summary>
        /// <remarks>
        /// Get the top news from a country (over 220 are supported) in a language (over 90 are supported) for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopNewsAPI200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TopNewsAPI200Response>> TopNewsAPIWithHttpInfoAsync(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApi : INewsApiSync, INewsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NewsApi : INewsApi
    {
        private apileague.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi(string basePath)
        {
            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                new apileague.Client.Configuration { BasePath = basePath }
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NewsApi(apileague.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NewsApi(apileague.Client.ISynchronousClient client, apileague.Client.IAsynchronousClient asyncClient, apileague.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public apileague.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public apileague.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public apileague.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public apileague.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Extract News API Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNewsAPI200Response</returns>
        public ExtractNewsAPI200Response ExtractNewsAPI(string url, bool analyze, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<ExtractNewsAPI200Response> localVarResponse = ExtractNewsAPIWithHttpInfo(url, analyze);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News API Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNewsAPI200Response</returns>
        public apileague.Client.ApiResponse<ExtractNewsAPI200Response> ExtractNewsAPIWithHttpInfo(string url, bool analyze, int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNewsAPI");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNewsAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtractNewsAPI200Response>("/extract-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNewsAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract News API Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNewsAPI200Response</returns>
        public async System.Threading.Tasks.Task<ExtractNewsAPI200Response> ExtractNewsAPIAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<ExtractNewsAPI200Response> localVarResponse = await ExtractNewsAPIWithHttpInfoAsync(url, analyze, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News API Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNewsAPI200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<ExtractNewsAPI200Response>> ExtractNewsAPIWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNewsAPI");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNewsAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtractNewsAPI200Response>("/extract-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNewsAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search News API Search and filter millions of news from over 200 countries in 90 languages by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (ORG, PER, or LOC). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchNewsAPI200Response</returns>
        public SearchNewsAPI200Response SearchNewsAPI(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchNewsAPI200Response> localVarResponse = SearchNewsAPIWithHttpInfo(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, categories, entities, locationFilter, sort, sortDirection, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search News API Search and filter millions of news from over 200 countries in 90 languages by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (ORG, PER, or LOC). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchNewsAPI200Response</returns>
        public apileague.Client.ApiResponse<SearchNewsAPI200Response> SearchNewsAPIWithHttpInfo(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (text != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            }
            if (sourceCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "source-countries", sourceCountries));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-sentiment", minSentiment));
            }
            if (maxSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-sentiment", maxSentiment));
            }
            if (earliestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-date", earliestPublishDate));
            }
            if (latestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-date", latestPublishDate));
            }
            if (newsSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "news-sources", newsSources));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "categories", categories));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "entities", entities));
            }
            if (locationFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "location-filter", locationFilter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "NewsApi.SearchNewsAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchNewsAPI200Response>("/search-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNewsAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search News API Search and filter millions of news from over 200 countries in 90 languages by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (ORG, PER, or LOC). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNewsAPI200Response</returns>
        public async System.Threading.Tasks.Task<SearchNewsAPI200Response> SearchNewsAPIAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchNewsAPI200Response> localVarResponse = await SearchNewsAPIWithHttpInfoAsync(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, categories, entities, locationFilter, sort, sortDirection, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search News API Search and filter millions of news from over 200 countries in 90 languages by text, date, location, category, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content (at least 3 characters, maximum 100 characters). By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford. You can also exclude terms by putting a minus sign (-) in front of the term, e.g. tesla -ford. (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="categories">A comma-separated list of categories. Only news from any of the given categories will be returned. Possible categories are politics, sports, business, technology, entertainment, health, science, lifestyle, travel, culture, education, environment, other. (optional)</param>
        /// <param name="entities">Filter news by entities (ORG, PER, or LOC). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNewsAPI200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchNewsAPI200Response>> SearchNewsAPIWithHttpInfoAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? categories = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (text != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            }
            if (sourceCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "source-countries", sourceCountries));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-sentiment", minSentiment));
            }
            if (maxSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-sentiment", maxSentiment));
            }
            if (earliestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-date", earliestPublishDate));
            }
            if (latestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-date", latestPublishDate));
            }
            if (newsSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "news-sources", newsSources));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (categories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "categories", categories));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "entities", entities));
            }
            if (locationFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "location-filter", locationFilter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "NewsApi.SearchNewsAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchNewsAPI200Response>("/search-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNewsAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Top News API Get the top news from a country (over 220 are supported) in a language (over 90 are supported) for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>TopNewsAPI200Response</returns>
        public TopNewsAPI200Response TopNewsAPI(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<TopNewsAPI200Response> localVarResponse = TopNewsAPIWithHttpInfo(sourceCountry, language, date, headlinesOnly);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Top News API Get the top news from a country (over 220 are supported) in a language (over 90 are supported) for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of TopNewsAPI200Response</returns>
        public apileague.Client.ApiResponse<TopNewsAPI200Response> TopNewsAPIWithHttpInfo(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'sourceCountry' is set
            if (sourceCountry == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'sourceCountry' when calling NewsApi->TopNewsAPI");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'language' when calling NewsApi->TopNewsAPI");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "source-country", sourceCountry));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (headlinesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "headlines-only", headlinesOnly));
            }

            localVarRequestOptions.Operation = "NewsApi.TopNewsAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<TopNewsAPI200Response>("/retrieve-top-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopNewsAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Top News API Get the top news from a country (over 220 are supported) in a language (over 90 are supported) for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TopNewsAPI200Response</returns>
        public async System.Threading.Tasks.Task<TopNewsAPI200Response> TopNewsAPIAsync(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<TopNewsAPI200Response> localVarResponse = await TopNewsAPIWithHttpInfoAsync(sourceCountry, language, date, headlinesOnly, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Top News API Get the top news from a country (over 220 are supported) in a language (over 90 are supported) for a specific date. The top news are clustered from multiple sources in the given country. The more news in a cluster the higher the cluster is ranked.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sourceCountry">The ISO 3166 country code of the country for which top news should be retrieved.</param>
        /// <param name="language">The ISO 6391 language code of the top news. The language must be one spoken in the source-country.</param>
        /// <param name="date">The date for which the top news should be retrieved. If no date is given, the current day is assumed. (optional)</param>
        /// <param name="headlinesOnly">Whether to only return basic information such as id, title, and url of the news. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TopNewsAPI200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<TopNewsAPI200Response>> TopNewsAPIWithHttpInfoAsync(string sourceCountry, string language, string? date = default(string?), bool? headlinesOnly = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sourceCountry' is set
            if (sourceCountry == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'sourceCountry' when calling NewsApi->TopNewsAPI");
            }

            // verify the required parameter 'language' is set
            if (language == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'language' when calling NewsApi->TopNewsAPI");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "source-country", sourceCountry));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            if (date != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "date", date));
            }
            if (headlinesOnly != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "headlines-only", headlinesOnly));
            }

            localVarRequestOptions.Operation = "NewsApi.TopNewsAPI";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<TopNewsAPI200Response>("/retrieve-top-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TopNewsAPI", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
