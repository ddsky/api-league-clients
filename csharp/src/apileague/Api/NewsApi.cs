/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using apileague.Client;
using apileague.Model;

namespace apileague.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNews200Response</returns>
        ExtractNews200Response ExtractNews(string url, bool analyze, int operationIndex = 0);

        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNews200Response</returns>
        ApiResponse<ExtractNews200Response> ExtractNewsWithHttpInfo(string url, bool analyze, int operationIndex = 0);
        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time or sentiment). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchNews200Response</returns>
        SearchNews200Response SearchNews(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time or sentiment). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchNews200Response</returns>
        ApiResponse<SearchNews200Response> SearchNewsWithHttpInfo(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNews200Response</returns>
        System.Threading.Tasks.Task<ExtractNews200Response> ExtractNewsAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract News
        /// </summary>
        /// <remarks>
        /// Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNews200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractNews200Response>> ExtractNewsWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time or sentiment). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNews200Response</returns>
        System.Threading.Tasks.Task<SearchNews200Response> SearchNewsAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search News
        /// </summary>
        /// <remarks>
        /// Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time or sentiment). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNews200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchNews200Response>> SearchNewsWithHttpInfoAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INewsApi : INewsApiSync, INewsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NewsApi : INewsApi
    {
        private apileague.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NewsApi(string basePath)
        {
            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                new apileague.Client.Configuration { BasePath = basePath }
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NewsApi(apileague.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NewsApi(apileague.Client.ISynchronousClient client, apileague.Client.IAsynchronousClient asyncClient, apileague.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public apileague.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public apileague.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public apileague.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public apileague.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Extract News Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ExtractNews200Response</returns>
        public ExtractNews200Response ExtractNews(string url, bool analyze, int operationIndex = 0)
        {
            apileague.Client.ApiResponse<ExtractNews200Response> localVarResponse = ExtractNewsWithHttpInfo(url, analyze);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ExtractNews200Response</returns>
        public apileague.Client.ApiResponse<ExtractNews200Response> ExtractNewsWithHttpInfo(string url, bool analyze, int operationIndex = 0)
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNews");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ExtractNews200Response>("/extract-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract News Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractNews200Response</returns>
        public async System.Threading.Tasks.Task<ExtractNews200Response> ExtractNewsAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<ExtractNews200Response> localVarResponse = await ExtractNewsWithHttpInfoAsync(url, analyze, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract News Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="url">The url of the news.</param>
        /// <param name="analyze">Whether to analyze the news (extract entities etc.)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractNews200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<ExtractNews200Response>> ExtractNewsWithHttpInfoAsync(string url, bool analyze, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'url' is set
            if (url == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'url' when calling NewsApi->ExtractNews");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "url", url));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "analyze", analyze));

            localVarRequestOptions.Operation = "NewsApi.ExtractNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ExtractNews200Response>("/extract-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search News Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time or sentiment). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchNews200Response</returns>
        public SearchNews200Response SearchNews(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchNews200Response> localVarResponse = SearchNewsWithHttpInfo(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, sort, sortDirection, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search News Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time or sentiment). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchNews200Response</returns>
        public apileague.Client.ApiResponse<SearchNews200Response> SearchNewsWithHttpInfo(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (text != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            }
            if (sourceCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "source-countries", sourceCountries));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-sentiment", minSentiment));
            }
            if (maxSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-sentiment", maxSentiment));
            }
            if (earliestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-date", earliestPublishDate));
            }
            if (latestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-date", latestPublishDate));
            }
            if (newsSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "news-sources", newsSources));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "entities", entities));
            }
            if (locationFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "location-filter", locationFilter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "NewsApi.SearchNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchNews200Response>("/search-news", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search News Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time or sentiment). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchNews200Response</returns>
        public async System.Threading.Tasks.Task<SearchNews200Response> SearchNewsAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchNews200Response> localVarResponse = await SearchNewsWithHttpInfoAsync(text, sourceCountries, language, minSentiment, maxSentiment, earliestPublishDate, latestPublishDate, newsSources, authors, entities, locationFilter, sort, sortDirection, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search News Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="text">The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)</param>
        /// <param name="sourceCountries">A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)</param>
        /// <param name="language">The ISO 6391 language code of the news. (optional)</param>
        /// <param name="minSentiment">The minimal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="maxSentiment">The maximal sentiment of the news in range [-1,1]. (optional)</param>
        /// <param name="earliestPublishDate">The news must have been published after this date. (optional)</param>
        /// <param name="latestPublishDate">The news must have been published before this date. (optional)</param>
        /// <param name="newsSources">A comma-separated list of news sources from which the news should originate. (optional)</param>
        /// <param name="authors">A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)</param>
        /// <param name="entities">Filter news by entities (see semantic types). (optional)</param>
        /// <param name="locationFilter">Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)</param>
        /// <param name="sort">The sorting criteria (publish-time or sentiment). (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of news to skip in range [0,10000] (optional)</param>
        /// <param name="number">The number of news to return in range [1,100] (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchNews200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchNews200Response>> SearchNewsWithHttpInfoAsync(string? text = default(string?), string? sourceCountries = default(string?), string? language = default(string?), double? minSentiment = default(double?), double? maxSentiment = default(double?), string? earliestPublishDate = default(string?), string? latestPublishDate = default(string?), string? newsSources = default(string?), string? authors = default(string?), string? entities = default(string?), string? locationFilter = default(string?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (text != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "text", text));
            }
            if (sourceCountries != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "source-countries", sourceCountries));
            }
            if (language != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "language", language));
            }
            if (minSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-sentiment", minSentiment));
            }
            if (maxSentiment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-sentiment", maxSentiment));
            }
            if (earliestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "earliest-publish-date", earliestPublishDate));
            }
            if (latestPublishDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "latest-publish-date", latestPublishDate));
            }
            if (newsSources != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "news-sources", newsSources));
            }
            if (authors != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "authors", authors));
            }
            if (entities != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "entities", entities));
            }
            if (locationFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "location-filter", locationFilter));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "NewsApi.SearchNews";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchNews200Response>("/search-news", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchNews", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
