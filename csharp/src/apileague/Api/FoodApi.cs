/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.3
 * Contact: mail@apileague.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using apileague.Client;
using apileague.Model;

namespace apileague.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoodApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Compute Nutrition
        /// </summary>
        /// <remarks>
        /// Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of the ingredients of the recipe.</param>
        /// <param name="servings">The number of servings the ingredients make. Nutrition is computed per serving. (optional)</param>
        /// <param name="reduceOils">If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComputeNutrition200Response</returns>
        ComputeNutrition200Response ComputeNutrition(string ingredients, int? servings = default(int?), bool? reduceOils = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Compute Nutrition
        /// </summary>
        /// <remarks>
        /// Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of the ingredients of the recipe.</param>
        /// <param name="servings">The number of servings the ingredients make. Nutrition is computed per serving. (optional)</param>
        /// <param name="reduceOils">If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComputeNutrition200Response</returns>
        ApiResponse<ComputeNutrition200Response> ComputeNutritionWithHttpInfo(string ingredients, int? servings = default(int?), bool? reduceOils = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Recipe Information
        /// </summary>
        /// <remarks>
        /// Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the recipe to retrieve.</param>
        /// <param name="addWinePairing">Whether to pair a wine to the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveRecipeInformation200Response</returns>
        RetrieveRecipeInformation200Response RetrieveRecipeInformation(int id, bool? addWinePairing = default(bool?), int operationIndex = 0);

        /// <summary>
        /// Retrieve Recipe Information
        /// </summary>
        /// <remarks>
        /// Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the recipe to retrieve.</param>
        /// <param name="addWinePairing">Whether to pair a wine to the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveRecipeInformation200Response</returns>
        ApiResponse<RetrieveRecipeInformation200Response> RetrieveRecipeInformationWithHttpInfo(int id, bool? addWinePairing = default(bool?), int operationIndex = 0);
        /// <summary>
        /// Search Drinks
        /// </summary>
        /// <remarks>
        /// Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="glassTypes">A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)</param>
        /// <param name="flavors">A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)</param>
        /// <param name="diet">The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the drinks. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the drink must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the drink can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the drink must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the drink can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the drink must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the drink can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the drink must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the drink can have per serving. (optional)</param>
        /// <param name="minAlcoholPercent">The minimum alcohol percentage the drink must have. (optional)</param>
        /// <param name="maxAlcoholPercent">The maximum alcohol percentage the drink can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the drink must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the drink can have per serving. (optional)</param>
        /// <param name="sort">The attribute by which to sort the drinks. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of drinks to skip, between 0 and 90. (optional)</param>
        /// <param name="number">The number of drinks, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchDrinks200Response</returns>
        SearchDrinks200Response SearchDrinks(string? query = default(string?), string? glassTypes = default(string?), string? flavors = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minAlcoholPercent = default(double?), double? maxAlcoholPercent = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Drinks
        /// </summary>
        /// <remarks>
        /// Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="glassTypes">A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)</param>
        /// <param name="flavors">A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)</param>
        /// <param name="diet">The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the drinks. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the drink must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the drink can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the drink must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the drink can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the drink must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the drink can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the drink must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the drink can have per serving. (optional)</param>
        /// <param name="minAlcoholPercent">The minimum alcohol percentage the drink must have. (optional)</param>
        /// <param name="maxAlcoholPercent">The maximum alcohol percentage the drink can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the drink must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the drink can have per serving. (optional)</param>
        /// <param name="sort">The attribute by which to sort the drinks. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of drinks to skip, between 0 and 90. (optional)</param>
        /// <param name="number">The number of drinks, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchDrinks200Response</returns>
        ApiResponse<SearchDrinks200Response> SearchDrinksWithHttpInfo(string? query = default(string?), string? glassTypes = default(string?), string? flavors = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minAlcoholPercent = default(double?), double? maxAlcoholPercent = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="cuisines">The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)</param>
        /// <param name="excludeCuisines">The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)</param>
        /// <param name="mealType">The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)</param>
        /// <param name="diet">The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="maxTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have per serving. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of recipes to skip, between 0 and 900. (optional)</param>
        /// <param name="number">The number of recipes, between 1 and 100. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchRecipes200Response</returns>
        SearchRecipes200Response SearchRecipes(string? query = default(string?), string? cuisines = default(string?), string? excludeCuisines = default(string?), string? mealType = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), int? maxTime = default(int?), int? minServings = default(int?), int? maxServings = default(int?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minSugar = default(double?), double? maxSugar = default(double?), double? minFiber = default(double?), double? maxFiber = default(double?), double? minFolate = default(double?), double? maxFolate = default(double?), double? minFolicAcid = default(double?), double? maxFolicAcid = default(double?), double? minIodine = default(double?), double? maxIodine = default(double?), double? minIron = default(double?), double? maxIron = default(double?), double? minZinc = default(double?), double? maxZinc = default(double?), double? minMagnesium = default(double?), double? maxMagnesium = default(double?), double? minManganese = default(double?), double? maxManganese = default(double?), double? minPhosphorus = default(double?), double? maxPhosphorus = default(double?), double? minPotassium = default(double?), double? maxPotassium = default(double?), double? minSodium = default(double?), double? maxSodium = default(double?), double? minSelenium = default(double?), double? maxSelenium = default(double?), double? minCopper = default(double?), double? maxCopper = default(double?), double? minCalcium = default(double?), double? maxCalcium = default(double?), double? minCholine = default(double?), double? maxCholine = default(double?), double? minCholesterol = default(double?), double? maxCholesterol = default(double?), double? minFluoride = default(double?), double? maxFluoride = default(double?), double? minAlcohol = default(double?), double? maxAlcohol = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), double? minSaturatedFat = default(double?), double? maxSaturatedFat = default(double?), double? minVitaminA = default(double?), double? maxVitaminA = default(double?), double? minVitaminC = default(double?), double? maxVitaminC = default(double?), double? minVitaminD = default(double?), double? maxVitaminD = default(double?), double? minVitaminE = default(double?), double? maxVitaminE = default(double?), double? minVitaminK = default(double?), double? maxVitaminK = default(double?), double? minVitaminB1 = default(double?), double? maxVitaminB1 = default(double?), double? minVitaminB2 = default(double?), double? maxVitaminB2 = default(double?), double? minVitaminB3 = default(double?), double? maxVitaminB3 = default(double?), double? minVitaminB5 = default(double?), double? maxVitaminB5 = default(double?), double? minVitaminB6 = default(double?), double? maxVitaminB6 = default(double?), double? minVitaminB12 = default(double?), double? maxVitaminB12 = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);

        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="cuisines">The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)</param>
        /// <param name="excludeCuisines">The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)</param>
        /// <param name="mealType">The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)</param>
        /// <param name="diet">The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="maxTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have per serving. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of recipes to skip, between 0 and 900. (optional)</param>
        /// <param name="number">The number of recipes, between 1 and 100. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchRecipes200Response</returns>
        ApiResponse<SearchRecipes200Response> SearchRecipesWithHttpInfo(string? query = default(string?), string? cuisines = default(string?), string? excludeCuisines = default(string?), string? mealType = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), int? maxTime = default(int?), int? minServings = default(int?), int? maxServings = default(int?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minSugar = default(double?), double? maxSugar = default(double?), double? minFiber = default(double?), double? maxFiber = default(double?), double? minFolate = default(double?), double? maxFolate = default(double?), double? minFolicAcid = default(double?), double? maxFolicAcid = default(double?), double? minIodine = default(double?), double? maxIodine = default(double?), double? minIron = default(double?), double? maxIron = default(double?), double? minZinc = default(double?), double? maxZinc = default(double?), double? minMagnesium = default(double?), double? maxMagnesium = default(double?), double? minManganese = default(double?), double? maxManganese = default(double?), double? minPhosphorus = default(double?), double? maxPhosphorus = default(double?), double? minPotassium = default(double?), double? maxPotassium = default(double?), double? minSodium = default(double?), double? maxSodium = default(double?), double? minSelenium = default(double?), double? maxSelenium = default(double?), double? minCopper = default(double?), double? maxCopper = default(double?), double? minCalcium = default(double?), double? maxCalcium = default(double?), double? minCholine = default(double?), double? maxCholine = default(double?), double? minCholesterol = default(double?), double? maxCholesterol = default(double?), double? minFluoride = default(double?), double? maxFluoride = default(double?), double? minAlcohol = default(double?), double? maxAlcohol = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), double? minSaturatedFat = default(double?), double? maxSaturatedFat = default(double?), double? minVitaminA = default(double?), double? maxVitaminA = default(double?), double? minVitaminC = default(double?), double? maxVitaminC = default(double?), double? minVitaminD = default(double?), double? maxVitaminD = default(double?), double? minVitaminE = default(double?), double? maxVitaminE = default(double?), double? minVitaminK = default(double?), double? maxVitaminK = default(double?), double? minVitaminB1 = default(double?), double? maxVitaminB1 = default(double?), double? minVitaminB2 = default(double?), double? maxVitaminB2 = default(double?), double? minVitaminB3 = default(double?), double? maxVitaminB3 = default(double?), double? minVitaminB5 = default(double?), double? maxVitaminB5 = default(double?), double? minVitaminB6 = default(double?), double? maxVitaminB6 = default(double?), double? minVitaminB12 = default(double?), double? maxVitaminB12 = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0);
        /// <summary>
        /// Search Restaurants
        /// </summary>
        /// <remarks>
        /// Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">The latitude to search around.</param>
        /// <param name="lon">The longitude to search around.</param>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="distance">The maximum distance of the restaurant in miles around the given location. (optional)</param>
        /// <param name="budget">The budget in USD for the meal. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurants in range [0,5]. (optional)</param>
        /// <param name="cuisine">The cuisine that the restaurants should support. (optional)</param>
        /// <param name="isOpen">Whether the restaurants have to be open now. (optional)</param>
        /// <param name="page">The page of the results. (optional)</param>
        /// <param name="sort">The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchRestaurants200Response</returns>
        SearchRestaurants200Response SearchRestaurants(double lat, double lon, string? query = default(string?), int? distance = default(int?), double? budget = default(double?), double? minRating = default(double?), string? cuisine = default(string?), bool? isOpen = default(bool?), int? page = default(int?), string? sort = default(string?), int operationIndex = 0);

        /// <summary>
        /// Search Restaurants
        /// </summary>
        /// <remarks>
        /// Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">The latitude to search around.</param>
        /// <param name="lon">The longitude to search around.</param>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="distance">The maximum distance of the restaurant in miles around the given location. (optional)</param>
        /// <param name="budget">The budget in USD for the meal. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurants in range [0,5]. (optional)</param>
        /// <param name="cuisine">The cuisine that the restaurants should support. (optional)</param>
        /// <param name="isOpen">Whether the restaurants have to be open now. (optional)</param>
        /// <param name="page">The page of the results. (optional)</param>
        /// <param name="sort">The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchRestaurants200Response</returns>
        ApiResponse<SearchRestaurants200Response> SearchRestaurantsWithHttpInfo(double lat, double lon, string? query = default(string?), int? distance = default(int?), double? budget = default(double?), double? minRating = default(double?), string? cuisine = default(string?), bool? isOpen = default(bool?), int? page = default(int?), string? sort = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoodApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Compute Nutrition
        /// </summary>
        /// <remarks>
        /// Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of the ingredients of the recipe.</param>
        /// <param name="servings">The number of servings the ingredients make. Nutrition is computed per serving. (optional)</param>
        /// <param name="reduceOils">If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComputeNutrition200Response</returns>
        System.Threading.Tasks.Task<ComputeNutrition200Response> ComputeNutritionAsync(string ingredients, int? servings = default(int?), bool? reduceOils = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Compute Nutrition
        /// </summary>
        /// <remarks>
        /// Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of the ingredients of the recipe.</param>
        /// <param name="servings">The number of servings the ingredients make. Nutrition is computed per serving. (optional)</param>
        /// <param name="reduceOils">If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComputeNutrition200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ComputeNutrition200Response>> ComputeNutritionWithHttpInfoAsync(string ingredients, int? servings = default(int?), bool? reduceOils = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Recipe Information
        /// </summary>
        /// <remarks>
        /// Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the recipe to retrieve.</param>
        /// <param name="addWinePairing">Whether to pair a wine to the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveRecipeInformation200Response</returns>
        System.Threading.Tasks.Task<RetrieveRecipeInformation200Response> RetrieveRecipeInformationAsync(int id, bool? addWinePairing = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Recipe Information
        /// </summary>
        /// <remarks>
        /// Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the recipe to retrieve.</param>
        /// <param name="addWinePairing">Whether to pair a wine to the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveRecipeInformation200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RetrieveRecipeInformation200Response>> RetrieveRecipeInformationWithHttpInfoAsync(int id, bool? addWinePairing = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Drinks
        /// </summary>
        /// <remarks>
        /// Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="glassTypes">A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)</param>
        /// <param name="flavors">A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)</param>
        /// <param name="diet">The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the drinks. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the drink must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the drink can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the drink must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the drink can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the drink must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the drink can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the drink must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the drink can have per serving. (optional)</param>
        /// <param name="minAlcoholPercent">The minimum alcohol percentage the drink must have. (optional)</param>
        /// <param name="maxAlcoholPercent">The maximum alcohol percentage the drink can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the drink must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the drink can have per serving. (optional)</param>
        /// <param name="sort">The attribute by which to sort the drinks. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of drinks to skip, between 0 and 90. (optional)</param>
        /// <param name="number">The number of drinks, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchDrinks200Response</returns>
        System.Threading.Tasks.Task<SearchDrinks200Response> SearchDrinksAsync(string? query = default(string?), string? glassTypes = default(string?), string? flavors = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minAlcoholPercent = default(double?), double? maxAlcoholPercent = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Drinks
        /// </summary>
        /// <remarks>
        /// Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="glassTypes">A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)</param>
        /// <param name="flavors">A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)</param>
        /// <param name="diet">The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the drinks. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the drink must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the drink can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the drink must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the drink can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the drink must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the drink can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the drink must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the drink can have per serving. (optional)</param>
        /// <param name="minAlcoholPercent">The minimum alcohol percentage the drink must have. (optional)</param>
        /// <param name="maxAlcoholPercent">The maximum alcohol percentage the drink can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the drink must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the drink can have per serving. (optional)</param>
        /// <param name="sort">The attribute by which to sort the drinks. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of drinks to skip, between 0 and 90. (optional)</param>
        /// <param name="number">The number of drinks, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchDrinks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchDrinks200Response>> SearchDrinksWithHttpInfoAsync(string? query = default(string?), string? glassTypes = default(string?), string? flavors = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minAlcoholPercent = default(double?), double? maxAlcoholPercent = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="cuisines">The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)</param>
        /// <param name="excludeCuisines">The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)</param>
        /// <param name="mealType">The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)</param>
        /// <param name="diet">The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="maxTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have per serving. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of recipes to skip, between 0 and 900. (optional)</param>
        /// <param name="number">The number of recipes, between 1 and 100. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchRecipes200Response</returns>
        System.Threading.Tasks.Task<SearchRecipes200Response> SearchRecipesAsync(string? query = default(string?), string? cuisines = default(string?), string? excludeCuisines = default(string?), string? mealType = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), int? maxTime = default(int?), int? minServings = default(int?), int? maxServings = default(int?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minSugar = default(double?), double? maxSugar = default(double?), double? minFiber = default(double?), double? maxFiber = default(double?), double? minFolate = default(double?), double? maxFolate = default(double?), double? minFolicAcid = default(double?), double? maxFolicAcid = default(double?), double? minIodine = default(double?), double? maxIodine = default(double?), double? minIron = default(double?), double? maxIron = default(double?), double? minZinc = default(double?), double? maxZinc = default(double?), double? minMagnesium = default(double?), double? maxMagnesium = default(double?), double? minManganese = default(double?), double? maxManganese = default(double?), double? minPhosphorus = default(double?), double? maxPhosphorus = default(double?), double? minPotassium = default(double?), double? maxPotassium = default(double?), double? minSodium = default(double?), double? maxSodium = default(double?), double? minSelenium = default(double?), double? maxSelenium = default(double?), double? minCopper = default(double?), double? maxCopper = default(double?), double? minCalcium = default(double?), double? maxCalcium = default(double?), double? minCholine = default(double?), double? maxCholine = default(double?), double? minCholesterol = default(double?), double? maxCholesterol = default(double?), double? minFluoride = default(double?), double? maxFluoride = default(double?), double? minAlcohol = default(double?), double? maxAlcohol = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), double? minSaturatedFat = default(double?), double? maxSaturatedFat = default(double?), double? minVitaminA = default(double?), double? maxVitaminA = default(double?), double? minVitaminC = default(double?), double? maxVitaminC = default(double?), double? minVitaminD = default(double?), double? maxVitaminD = default(double?), double? minVitaminE = default(double?), double? maxVitaminE = default(double?), double? minVitaminK = default(double?), double? maxVitaminK = default(double?), double? minVitaminB1 = default(double?), double? maxVitaminB1 = default(double?), double? minVitaminB2 = default(double?), double? maxVitaminB2 = default(double?), double? minVitaminB3 = default(double?), double? maxVitaminB3 = default(double?), double? minVitaminB5 = default(double?), double? maxVitaminB5 = default(double?), double? minVitaminB6 = default(double?), double? maxVitaminB6 = default(double?), double? minVitaminB12 = default(double?), double? maxVitaminB12 = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Recipes
        /// </summary>
        /// <remarks>
        /// Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="cuisines">The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)</param>
        /// <param name="excludeCuisines">The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)</param>
        /// <param name="mealType">The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)</param>
        /// <param name="diet">The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="maxTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have per serving. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of recipes to skip, between 0 and 900. (optional)</param>
        /// <param name="number">The number of recipes, between 1 and 100. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchRecipes200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchRecipes200Response>> SearchRecipesWithHttpInfoAsync(string? query = default(string?), string? cuisines = default(string?), string? excludeCuisines = default(string?), string? mealType = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), int? maxTime = default(int?), int? minServings = default(int?), int? maxServings = default(int?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minSugar = default(double?), double? maxSugar = default(double?), double? minFiber = default(double?), double? maxFiber = default(double?), double? minFolate = default(double?), double? maxFolate = default(double?), double? minFolicAcid = default(double?), double? maxFolicAcid = default(double?), double? minIodine = default(double?), double? maxIodine = default(double?), double? minIron = default(double?), double? maxIron = default(double?), double? minZinc = default(double?), double? maxZinc = default(double?), double? minMagnesium = default(double?), double? maxMagnesium = default(double?), double? minManganese = default(double?), double? maxManganese = default(double?), double? minPhosphorus = default(double?), double? maxPhosphorus = default(double?), double? minPotassium = default(double?), double? maxPotassium = default(double?), double? minSodium = default(double?), double? maxSodium = default(double?), double? minSelenium = default(double?), double? maxSelenium = default(double?), double? minCopper = default(double?), double? maxCopper = default(double?), double? minCalcium = default(double?), double? maxCalcium = default(double?), double? minCholine = default(double?), double? maxCholine = default(double?), double? minCholesterol = default(double?), double? maxCholesterol = default(double?), double? minFluoride = default(double?), double? maxFluoride = default(double?), double? minAlcohol = default(double?), double? maxAlcohol = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), double? minSaturatedFat = default(double?), double? maxSaturatedFat = default(double?), double? minVitaminA = default(double?), double? maxVitaminA = default(double?), double? minVitaminC = default(double?), double? maxVitaminC = default(double?), double? minVitaminD = default(double?), double? maxVitaminD = default(double?), double? minVitaminE = default(double?), double? maxVitaminE = default(double?), double? minVitaminK = default(double?), double? maxVitaminK = default(double?), double? minVitaminB1 = default(double?), double? maxVitaminB1 = default(double?), double? minVitaminB2 = default(double?), double? maxVitaminB2 = default(double?), double? minVitaminB3 = default(double?), double? maxVitaminB3 = default(double?), double? minVitaminB5 = default(double?), double? maxVitaminB5 = default(double?), double? minVitaminB6 = default(double?), double? maxVitaminB6 = default(double?), double? minVitaminB12 = default(double?), double? maxVitaminB12 = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search Restaurants
        /// </summary>
        /// <remarks>
        /// Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">The latitude to search around.</param>
        /// <param name="lon">The longitude to search around.</param>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="distance">The maximum distance of the restaurant in miles around the given location. (optional)</param>
        /// <param name="budget">The budget in USD for the meal. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurants in range [0,5]. (optional)</param>
        /// <param name="cuisine">The cuisine that the restaurants should support. (optional)</param>
        /// <param name="isOpen">Whether the restaurants have to be open now. (optional)</param>
        /// <param name="page">The page of the results. (optional)</param>
        /// <param name="sort">The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchRestaurants200Response</returns>
        System.Threading.Tasks.Task<SearchRestaurants200Response> SearchRestaurantsAsync(double lat, double lon, string? query = default(string?), int? distance = default(int?), double? budget = default(double?), double? minRating = default(double?), string? cuisine = default(string?), bool? isOpen = default(bool?), int? page = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search Restaurants
        /// </summary>
        /// <remarks>
        /// Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </remarks>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">The latitude to search around.</param>
        /// <param name="lon">The longitude to search around.</param>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="distance">The maximum distance of the restaurant in miles around the given location. (optional)</param>
        /// <param name="budget">The budget in USD for the meal. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurants in range [0,5]. (optional)</param>
        /// <param name="cuisine">The cuisine that the restaurants should support. (optional)</param>
        /// <param name="isOpen">Whether the restaurants have to be open now. (optional)</param>
        /// <param name="page">The page of the results. (optional)</param>
        /// <param name="sort">The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchRestaurants200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SearchRestaurants200Response>> SearchRestaurantsWithHttpInfoAsync(double lat, double lon, string? query = default(string?), int? distance = default(int?), double? budget = default(double?), double? minRating = default(double?), string? cuisine = default(string?), bool? isOpen = default(bool?), int? page = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFoodApi : IFoodApiSync, IFoodApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FoodApi : IFoodApi
    {
        private apileague.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FoodApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoodApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoodApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FoodApi(string basePath)
        {
            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                new apileague.Client.Configuration { BasePath = basePath }
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoodApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FoodApi(apileague.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = apileague.Client.Configuration.MergeConfigurations(
                apileague.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new apileague.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new apileague.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FoodApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FoodApi(apileague.Client.ISynchronousClient client, apileague.Client.IAsynchronousClient asyncClient, apileague.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = apileague.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public apileague.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public apileague.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public apileague.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public apileague.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Compute Nutrition Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of the ingredients of the recipe.</param>
        /// <param name="servings">The number of servings the ingredients make. Nutrition is computed per serving. (optional)</param>
        /// <param name="reduceOils">If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ComputeNutrition200Response</returns>
        public ComputeNutrition200Response ComputeNutrition(string ingredients, int? servings = default(int?), bool? reduceOils = default(bool?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<ComputeNutrition200Response> localVarResponse = ComputeNutritionWithHttpInfo(ingredients, servings, reduceOils);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Compute Nutrition Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of the ingredients of the recipe.</param>
        /// <param name="servings">The number of servings the ingredients make. Nutrition is computed per serving. (optional)</param>
        /// <param name="reduceOils">If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ComputeNutrition200Response</returns>
        public apileague.Client.ApiResponse<ComputeNutrition200Response> ComputeNutritionWithHttpInfo(string ingredients, int? servings = default(int?), bool? reduceOils = default(bool?), int operationIndex = 0)
        {
            // verify the required parameter 'ingredients' is set
            if (ingredients == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'ingredients' when calling FoodApi->ComputeNutrition");
            }

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "ingredients", ingredients));
            if (servings != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "servings", servings));
            }
            if (reduceOils != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "reduce-oils", reduceOils));
            }

            localVarRequestOptions.Operation = "FoodApi.ComputeNutrition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ComputeNutrition200Response>("/compute-nutrition", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComputeNutrition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Compute Nutrition Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of the ingredients of the recipe.</param>
        /// <param name="servings">The number of servings the ingredients make. Nutrition is computed per serving. (optional)</param>
        /// <param name="reduceOils">If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ComputeNutrition200Response</returns>
        public async System.Threading.Tasks.Task<ComputeNutrition200Response> ComputeNutritionAsync(string ingredients, int? servings = default(int?), bool? reduceOils = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<ComputeNutrition200Response> localVarResponse = await ComputeNutritionWithHttpInfoAsync(ingredients, servings, reduceOils, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Compute Nutrition Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ingredients">A comma-separated list of the ingredients of the recipe.</param>
        /// <param name="servings">The number of servings the ingredients make. Nutrition is computed per serving. (optional)</param>
        /// <param name="reduceOils">If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ComputeNutrition200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<ComputeNutrition200Response>> ComputeNutritionWithHttpInfoAsync(string ingredients, int? servings = default(int?), bool? reduceOils = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'ingredients' is set
            if (ingredients == null)
            {
                throw new apileague.Client.ApiException(400, "Missing required parameter 'ingredients' when calling FoodApi->ComputeNutrition");
            }


            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "ingredients", ingredients));
            if (servings != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "servings", servings));
            }
            if (reduceOils != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "reduce-oils", reduceOils));
            }

            localVarRequestOptions.Operation = "FoodApi.ComputeNutrition";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ComputeNutrition200Response>("/compute-nutrition", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ComputeNutrition", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Recipe Information Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the recipe to retrieve.</param>
        /// <param name="addWinePairing">Whether to pair a wine to the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RetrieveRecipeInformation200Response</returns>
        public RetrieveRecipeInformation200Response RetrieveRecipeInformation(int id, bool? addWinePairing = default(bool?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<RetrieveRecipeInformation200Response> localVarResponse = RetrieveRecipeInformationWithHttpInfo(id, addWinePairing);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Recipe Information Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the recipe to retrieve.</param>
        /// <param name="addWinePairing">Whether to pair a wine to the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RetrieveRecipeInformation200Response</returns>
        public apileague.Client.ApiResponse<RetrieveRecipeInformation200Response> RetrieveRecipeInformationWithHttpInfo(int id, bool? addWinePairing = default(bool?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (addWinePairing != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "add-wine-pairing", addWinePairing));
            }

            localVarRequestOptions.Operation = "FoodApi.RetrieveRecipeInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RetrieveRecipeInformation200Response>("/retrieve-recipe", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveRecipeInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Recipe Information Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the recipe to retrieve.</param>
        /// <param name="addWinePairing">Whether to pair a wine to the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RetrieveRecipeInformation200Response</returns>
        public async System.Threading.Tasks.Task<RetrieveRecipeInformation200Response> RetrieveRecipeInformationAsync(int id, bool? addWinePairing = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<RetrieveRecipeInformation200Response> localVarResponse = await RetrieveRecipeInformationWithHttpInfoAsync(id, addWinePairing, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Recipe Information Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the recipe to retrieve.</param>
        /// <param name="addWinePairing">Whether to pair a wine to the recipe. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RetrieveRecipeInformation200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<RetrieveRecipeInformation200Response>> RetrieveRecipeInformationWithHttpInfoAsync(int id, bool? addWinePairing = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            if (addWinePairing != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "add-wine-pairing", addWinePairing));
            }

            localVarRequestOptions.Operation = "FoodApi.RetrieveRecipeInformation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RetrieveRecipeInformation200Response>("/retrieve-recipe", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveRecipeInformation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Drinks Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="glassTypes">A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)</param>
        /// <param name="flavors">A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)</param>
        /// <param name="diet">The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the drinks. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the drink must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the drink can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the drink must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the drink can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the drink must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the drink can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the drink must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the drink can have per serving. (optional)</param>
        /// <param name="minAlcoholPercent">The minimum alcohol percentage the drink must have. (optional)</param>
        /// <param name="maxAlcoholPercent">The maximum alcohol percentage the drink can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the drink must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the drink can have per serving. (optional)</param>
        /// <param name="sort">The attribute by which to sort the drinks. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of drinks to skip, between 0 and 90. (optional)</param>
        /// <param name="number">The number of drinks, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchDrinks200Response</returns>
        public SearchDrinks200Response SearchDrinks(string? query = default(string?), string? glassTypes = default(string?), string? flavors = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minAlcoholPercent = default(double?), double? maxAlcoholPercent = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchDrinks200Response> localVarResponse = SearchDrinksWithHttpInfo(query, glassTypes, flavors, diet, includeIngredients, excludeIngredients, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, minAlcoholPercent, maxAlcoholPercent, minCaffeine, maxCaffeine, sort, sortDirection, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Drinks Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="glassTypes">A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)</param>
        /// <param name="flavors">A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)</param>
        /// <param name="diet">The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the drinks. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the drink must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the drink can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the drink must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the drink can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the drink must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the drink can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the drink must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the drink can have per serving. (optional)</param>
        /// <param name="minAlcoholPercent">The minimum alcohol percentage the drink must have. (optional)</param>
        /// <param name="maxAlcoholPercent">The maximum alcohol percentage the drink can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the drink must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the drink can have per serving. (optional)</param>
        /// <param name="sort">The attribute by which to sort the drinks. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of drinks to skip, between 0 and 90. (optional)</param>
        /// <param name="number">The number of drinks, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchDrinks200Response</returns>
        public apileague.Client.ApiResponse<SearchDrinks200Response> SearchDrinksWithHttpInfo(string? query = default(string?), string? glassTypes = default(string?), string? flavors = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minAlcoholPercent = default(double?), double? maxAlcoholPercent = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (glassTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "glass-types", glassTypes));
            }
            if (flavors != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "flavors", flavors));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "include-ingredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-ingredients", excludeIngredients));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-calories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-calories", maxCalories));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-carbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-carbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-protein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-protein", maxProtein));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-fat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-fat", maxFat));
            }
            if (minAlcoholPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-alcohol-percent", minAlcoholPercent));
            }
            if (maxAlcoholPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-alcohol-percent", maxAlcoholPercent));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-caffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-caffeine", maxCaffeine));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "FoodApi.SearchDrinks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchDrinks200Response>("/search-drinks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDrinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Drinks Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="glassTypes">A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)</param>
        /// <param name="flavors">A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)</param>
        /// <param name="diet">The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the drinks. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the drink must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the drink can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the drink must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the drink can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the drink must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the drink can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the drink must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the drink can have per serving. (optional)</param>
        /// <param name="minAlcoholPercent">The minimum alcohol percentage the drink must have. (optional)</param>
        /// <param name="maxAlcoholPercent">The maximum alcohol percentage the drink can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the drink must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the drink can have per serving. (optional)</param>
        /// <param name="sort">The attribute by which to sort the drinks. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of drinks to skip, between 0 and 90. (optional)</param>
        /// <param name="number">The number of drinks, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchDrinks200Response</returns>
        public async System.Threading.Tasks.Task<SearchDrinks200Response> SearchDrinksAsync(string? query = default(string?), string? glassTypes = default(string?), string? flavors = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minAlcoholPercent = default(double?), double? maxAlcoholPercent = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchDrinks200Response> localVarResponse = await SearchDrinksWithHttpInfoAsync(query, glassTypes, flavors, diet, includeIngredients, excludeIngredients, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, minAlcoholPercent, maxAlcoholPercent, minCaffeine, maxCaffeine, sort, sortDirection, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Drinks Search for drinks by title, ingredients, flavor, type of glass, alcohol content, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="glassTypes">A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)</param>
        /// <param name="flavors">A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)</param>
        /// <param name="diet">The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the drinks. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the drink must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the drink can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the drink must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the drink can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the drink must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the drink can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the drink must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the drink can have per serving. (optional)</param>
        /// <param name="minAlcoholPercent">The minimum alcohol percentage the drink must have. (optional)</param>
        /// <param name="maxAlcoholPercent">The maximum alcohol percentage the drink can have. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the drink must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the drink can have per serving. (optional)</param>
        /// <param name="sort">The attribute by which to sort the drinks. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of drinks to skip, between 0 and 90. (optional)</param>
        /// <param name="number">The number of drinks, between 1 and 10. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchDrinks200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchDrinks200Response>> SearchDrinksWithHttpInfoAsync(string? query = default(string?), string? glassTypes = default(string?), string? flavors = default(string?), string? diet = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minAlcoholPercent = default(double?), double? maxAlcoholPercent = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (glassTypes != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "glass-types", glassTypes));
            }
            if (flavors != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "flavors", flavors));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "include-ingredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-ingredients", excludeIngredients));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-calories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-calories", maxCalories));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-carbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-carbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-protein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-protein", maxProtein));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-fat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-fat", maxFat));
            }
            if (minAlcoholPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-alcohol-percent", minAlcoholPercent));
            }
            if (maxAlcoholPercent != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-alcohol-percent", maxAlcoholPercent));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-caffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-caffeine", maxCaffeine));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "FoodApi.SearchDrinks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchDrinks200Response>("/search-drinks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchDrinks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="cuisines">The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)</param>
        /// <param name="excludeCuisines">The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)</param>
        /// <param name="mealType">The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)</param>
        /// <param name="diet">The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="maxTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have per serving. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of recipes to skip, between 0 and 900. (optional)</param>
        /// <param name="number">The number of recipes, between 1 and 100. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchRecipes200Response</returns>
        public SearchRecipes200Response SearchRecipes(string? query = default(string?), string? cuisines = default(string?), string? excludeCuisines = default(string?), string? mealType = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), int? maxTime = default(int?), int? minServings = default(int?), int? maxServings = default(int?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minSugar = default(double?), double? maxSugar = default(double?), double? minFiber = default(double?), double? maxFiber = default(double?), double? minFolate = default(double?), double? maxFolate = default(double?), double? minFolicAcid = default(double?), double? maxFolicAcid = default(double?), double? minIodine = default(double?), double? maxIodine = default(double?), double? minIron = default(double?), double? maxIron = default(double?), double? minZinc = default(double?), double? maxZinc = default(double?), double? minMagnesium = default(double?), double? maxMagnesium = default(double?), double? minManganese = default(double?), double? maxManganese = default(double?), double? minPhosphorus = default(double?), double? maxPhosphorus = default(double?), double? minPotassium = default(double?), double? maxPotassium = default(double?), double? minSodium = default(double?), double? maxSodium = default(double?), double? minSelenium = default(double?), double? maxSelenium = default(double?), double? minCopper = default(double?), double? maxCopper = default(double?), double? minCalcium = default(double?), double? maxCalcium = default(double?), double? minCholine = default(double?), double? maxCholine = default(double?), double? minCholesterol = default(double?), double? maxCholesterol = default(double?), double? minFluoride = default(double?), double? maxFluoride = default(double?), double? minAlcohol = default(double?), double? maxAlcohol = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), double? minSaturatedFat = default(double?), double? maxSaturatedFat = default(double?), double? minVitaminA = default(double?), double? maxVitaminA = default(double?), double? minVitaminC = default(double?), double? maxVitaminC = default(double?), double? minVitaminD = default(double?), double? maxVitaminD = default(double?), double? minVitaminE = default(double?), double? maxVitaminE = default(double?), double? minVitaminK = default(double?), double? maxVitaminK = default(double?), double? minVitaminB1 = default(double?), double? maxVitaminB1 = default(double?), double? minVitaminB2 = default(double?), double? maxVitaminB2 = default(double?), double? minVitaminB3 = default(double?), double? maxVitaminB3 = default(double?), double? minVitaminB5 = default(double?), double? maxVitaminB5 = default(double?), double? minVitaminB6 = default(double?), double? maxVitaminB6 = default(double?), double? minVitaminB12 = default(double?), double? maxVitaminB12 = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchRecipes200Response> localVarResponse = SearchRecipesWithHttpInfo(query, cuisines, excludeCuisines, mealType, diet, intolerances, equipment, includeIngredients, excludeIngredients, fillIngredients, addRecipeInformation, maxTime, minServings, maxServings, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, minSugar, maxSugar, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minZinc, maxZinc, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSodium, maxSodium, minSelenium, maxSelenium, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB3, maxVitaminB3, minVitaminB5, maxVitaminB5, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, sort, sortDirection, offset, number);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="cuisines">The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)</param>
        /// <param name="excludeCuisines">The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)</param>
        /// <param name="mealType">The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)</param>
        /// <param name="diet">The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="maxTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have per serving. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of recipes to skip, between 0 and 900. (optional)</param>
        /// <param name="number">The number of recipes, between 1 and 100. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchRecipes200Response</returns>
        public apileague.Client.ApiResponse<SearchRecipes200Response> SearchRecipesWithHttpInfo(string? query = default(string?), string? cuisines = default(string?), string? excludeCuisines = default(string?), string? mealType = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), int? maxTime = default(int?), int? minServings = default(int?), int? maxServings = default(int?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minSugar = default(double?), double? maxSugar = default(double?), double? minFiber = default(double?), double? maxFiber = default(double?), double? minFolate = default(double?), double? maxFolate = default(double?), double? minFolicAcid = default(double?), double? maxFolicAcid = default(double?), double? minIodine = default(double?), double? maxIodine = default(double?), double? minIron = default(double?), double? maxIron = default(double?), double? minZinc = default(double?), double? maxZinc = default(double?), double? minMagnesium = default(double?), double? maxMagnesium = default(double?), double? minManganese = default(double?), double? maxManganese = default(double?), double? minPhosphorus = default(double?), double? maxPhosphorus = default(double?), double? minPotassium = default(double?), double? maxPotassium = default(double?), double? minSodium = default(double?), double? maxSodium = default(double?), double? minSelenium = default(double?), double? maxSelenium = default(double?), double? minCopper = default(double?), double? maxCopper = default(double?), double? minCalcium = default(double?), double? maxCalcium = default(double?), double? minCholine = default(double?), double? maxCholine = default(double?), double? minCholesterol = default(double?), double? maxCholesterol = default(double?), double? minFluoride = default(double?), double? maxFluoride = default(double?), double? minAlcohol = default(double?), double? maxAlcohol = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), double? minSaturatedFat = default(double?), double? maxSaturatedFat = default(double?), double? minVitaminA = default(double?), double? maxVitaminA = default(double?), double? minVitaminC = default(double?), double? maxVitaminC = default(double?), double? minVitaminD = default(double?), double? maxVitaminD = default(double?), double? minVitaminE = default(double?), double? maxVitaminE = default(double?), double? minVitaminK = default(double?), double? maxVitaminK = default(double?), double? minVitaminB1 = default(double?), double? maxVitaminB1 = default(double?), double? minVitaminB2 = default(double?), double? maxVitaminB2 = default(double?), double? minVitaminB3 = default(double?), double? maxVitaminB3 = default(double?), double? minVitaminB5 = default(double?), double? maxVitaminB5 = default(double?), double? minVitaminB6 = default(double?), double? maxVitaminB6 = default(double?), double? minVitaminB12 = default(double?), double? maxVitaminB12 = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (cuisines != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "cuisines", cuisines));
            }
            if (excludeCuisines != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-cuisines", excludeCuisines));
            }
            if (mealType != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "meal-type", mealType));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "include-ingredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-ingredients", excludeIngredients));
            }
            if (fillIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "fill-ingredients", fillIngredients));
            }
            if (addRecipeInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "add-recipe-information", addRecipeInformation));
            }
            if (maxTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-time", maxTime));
            }
            if (minServings != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-servings", minServings));
            }
            if (maxServings != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-servings", maxServings));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-calories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-calories", maxCalories));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-carbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-carbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-protein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-protein", maxProtein));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-fat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-fat", maxFat));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-sugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-sugar", maxSugar));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-fiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-fiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-folate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-folate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-folic-acid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-folic-acid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-iodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-iodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-iron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-iron", maxIron));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-zinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-zinc", maxZinc));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-magnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-magnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-manganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-manganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-phosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-phosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-potassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-potassium", maxPotassium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-sodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-sodium", maxSodium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-selenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-selenium", maxSelenium));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-copper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-copper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-calcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-calcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-choline", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-choline", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-cholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-cholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-fluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-fluoride", maxFluoride));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-alcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-alcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-caffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-caffeine", maxCaffeine));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-saturated-fat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-saturated-fat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-a", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-a", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-c", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-c", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-d", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-d", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-e", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-e", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-k", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-k", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b2", maxVitaminB2));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b3", maxVitaminB3));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b5", maxVitaminB5));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b12", maxVitaminB12));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "FoodApi.SearchRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchRecipes200Response>("/search-recipes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Recipes Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="cuisines">The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)</param>
        /// <param name="excludeCuisines">The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)</param>
        /// <param name="mealType">The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)</param>
        /// <param name="diet">The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="maxTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have per serving. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of recipes to skip, between 0 and 900. (optional)</param>
        /// <param name="number">The number of recipes, between 1 and 100. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchRecipes200Response</returns>
        public async System.Threading.Tasks.Task<SearchRecipes200Response> SearchRecipesAsync(string? query = default(string?), string? cuisines = default(string?), string? excludeCuisines = default(string?), string? mealType = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), int? maxTime = default(int?), int? minServings = default(int?), int? maxServings = default(int?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minSugar = default(double?), double? maxSugar = default(double?), double? minFiber = default(double?), double? maxFiber = default(double?), double? minFolate = default(double?), double? maxFolate = default(double?), double? minFolicAcid = default(double?), double? maxFolicAcid = default(double?), double? minIodine = default(double?), double? maxIodine = default(double?), double? minIron = default(double?), double? maxIron = default(double?), double? minZinc = default(double?), double? maxZinc = default(double?), double? minMagnesium = default(double?), double? maxMagnesium = default(double?), double? minManganese = default(double?), double? maxManganese = default(double?), double? minPhosphorus = default(double?), double? maxPhosphorus = default(double?), double? minPotassium = default(double?), double? maxPotassium = default(double?), double? minSodium = default(double?), double? maxSodium = default(double?), double? minSelenium = default(double?), double? maxSelenium = default(double?), double? minCopper = default(double?), double? maxCopper = default(double?), double? minCalcium = default(double?), double? maxCalcium = default(double?), double? minCholine = default(double?), double? maxCholine = default(double?), double? minCholesterol = default(double?), double? maxCholesterol = default(double?), double? minFluoride = default(double?), double? maxFluoride = default(double?), double? minAlcohol = default(double?), double? maxAlcohol = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), double? minSaturatedFat = default(double?), double? maxSaturatedFat = default(double?), double? minVitaminA = default(double?), double? maxVitaminA = default(double?), double? minVitaminC = default(double?), double? maxVitaminC = default(double?), double? minVitaminD = default(double?), double? maxVitaminD = default(double?), double? minVitaminE = default(double?), double? maxVitaminE = default(double?), double? minVitaminK = default(double?), double? maxVitaminK = default(double?), double? minVitaminB1 = default(double?), double? maxVitaminB1 = default(double?), double? minVitaminB2 = default(double?), double? maxVitaminB2 = default(double?), double? minVitaminB3 = default(double?), double? maxVitaminB3 = default(double?), double? minVitaminB5 = default(double?), double? maxVitaminB5 = default(double?), double? minVitaminB6 = default(double?), double? maxVitaminB6 = default(double?), double? minVitaminB12 = default(double?), double? maxVitaminB12 = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchRecipes200Response> localVarResponse = await SearchRecipesWithHttpInfoAsync(query, cuisines, excludeCuisines, mealType, diet, intolerances, equipment, includeIngredients, excludeIngredients, fillIngredients, addRecipeInformation, maxTime, minServings, maxServings, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, minSugar, maxSugar, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minZinc, maxZinc, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSodium, maxSodium, minSelenium, maxSelenium, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB3, maxVitaminB3, minVitaminB5, maxVitaminB5, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, sort, sortDirection, offset, number, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Recipes Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="cuisines">The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)</param>
        /// <param name="excludeCuisines">The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)</param>
        /// <param name="mealType">The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)</param>
        /// <param name="diet">The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)</param>
        /// <param name="intolerances">A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)</param>
        /// <param name="equipment">The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)</param>
        /// <param name="includeIngredients">A comma-separated list of ingredients that should/must be used in the recipes. (optional)</param>
        /// <param name="excludeIngredients">A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)</param>
        /// <param name="fillIngredients">Add information about the ingredients and whether they are used or missing in relation to the query. (optional)</param>
        /// <param name="addRecipeInformation">If set to true, you get more information about the recipes returned. (optional)</param>
        /// <param name="maxTime">The maximum time in minutes it should take to prepare and cook the recipe. (optional)</param>
        /// <param name="minServings">The minimum amount of servings the recipe is for. (optional)</param>
        /// <param name="maxServings">The maximum amount of servings the recipe is for. (optional)</param>
        /// <param name="minCalories">The minimum amount of calories the recipe must have per serving. (optional)</param>
        /// <param name="maxCalories">The maximum amount of calories the recipe can have per serving. (optional)</param>
        /// <param name="minCarbs">The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxCarbs">The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)</param>
        /// <param name="minProtein">The minimum amount of protein in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxProtein">The maximum amount of protein in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFat">The minimum amount of fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFat">The maximum amount of fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minSugar">The minimum amount of sugar in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSugar">The maximum amount of sugar in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFiber">The minimum amount of fiber in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxFiber">The maximum amount of fiber in grams the recipe can have per serving. (optional)</param>
        /// <param name="minFolate">The minimum amount of folate in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolate">The maximum amount of folate in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minFolicAcid">The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxFolicAcid">The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIodine">The minimum amount of iodine in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxIodine">The maximum amount of iodine in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minIron">The minimum amount of iron in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxIron">The maximum amount of iron in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minZinc">The minimum amount of zinc in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxZinc">The maximum amount of zinc in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minMagnesium">The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxMagnesium">The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minManganese">The minimum amount of manganese in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxManganese">The maximum amount of manganese in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPhosphorus">The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPhosphorus">The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minPotassium">The minimum amount of potassium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxPotassium">The maximum amount of potassium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSodium">The minimum amount of sodium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxSodium">The maximum amount of sodium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSelenium">The minimum amount of selenium in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxSelenium">The maximum amount of selenium in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minCopper">The minimum amount of copper in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCopper">The maximum amount of copper in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCalcium">The minimum amount of calcium in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCalcium">The maximum amount of calcium in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholine">The minimum amount of choline in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholine">The maximum amount of choline in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minCholesterol">The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCholesterol">The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minFluoride">The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxFluoride">The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minAlcohol">The minimum amount of alcohol in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxAlcohol">The maximum amount of alcohol in grams the recipe can have per serving. (optional)</param>
        /// <param name="minCaffeine">The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxCaffeine">The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minSaturatedFat">The minimum amount of saturated fat in grams the recipe must have per serving. (optional)</param>
        /// <param name="maxSaturatedFat">The maximum amount of saturated fat in grams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminA">The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminA">The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminC">The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminC">The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminD">The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminD">The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminE">The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminE">The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminK">The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminK">The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB1">The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB1">The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB2">The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB2">The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB3">The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB3">The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB5">The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB5">The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB6">The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB6">The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="minVitaminB12">The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)</param>
        /// <param name="maxVitaminB12">The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)</param>
        /// <param name="sort">The strategy to sort recipes by. (optional)</param>
        /// <param name="sortDirection">Whether to sort ascending or descending (ASC or DESC). (optional)</param>
        /// <param name="offset">The number of recipes to skip, between 0 and 900. (optional)</param>
        /// <param name="number">The number of recipes, between 1 and 100. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchRecipes200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchRecipes200Response>> SearchRecipesWithHttpInfoAsync(string? query = default(string?), string? cuisines = default(string?), string? excludeCuisines = default(string?), string? mealType = default(string?), string? diet = default(string?), string? intolerances = default(string?), string? equipment = default(string?), string? includeIngredients = default(string?), string? excludeIngredients = default(string?), bool? fillIngredients = default(bool?), bool? addRecipeInformation = default(bool?), int? maxTime = default(int?), int? minServings = default(int?), int? maxServings = default(int?), double? minCalories = default(double?), double? maxCalories = default(double?), double? minCarbs = default(double?), double? maxCarbs = default(double?), double? minProtein = default(double?), double? maxProtein = default(double?), double? minFat = default(double?), double? maxFat = default(double?), double? minSugar = default(double?), double? maxSugar = default(double?), double? minFiber = default(double?), double? maxFiber = default(double?), double? minFolate = default(double?), double? maxFolate = default(double?), double? minFolicAcid = default(double?), double? maxFolicAcid = default(double?), double? minIodine = default(double?), double? maxIodine = default(double?), double? minIron = default(double?), double? maxIron = default(double?), double? minZinc = default(double?), double? maxZinc = default(double?), double? minMagnesium = default(double?), double? maxMagnesium = default(double?), double? minManganese = default(double?), double? maxManganese = default(double?), double? minPhosphorus = default(double?), double? maxPhosphorus = default(double?), double? minPotassium = default(double?), double? maxPotassium = default(double?), double? minSodium = default(double?), double? maxSodium = default(double?), double? minSelenium = default(double?), double? maxSelenium = default(double?), double? minCopper = default(double?), double? maxCopper = default(double?), double? minCalcium = default(double?), double? maxCalcium = default(double?), double? minCholine = default(double?), double? maxCholine = default(double?), double? minCholesterol = default(double?), double? maxCholesterol = default(double?), double? minFluoride = default(double?), double? maxFluoride = default(double?), double? minAlcohol = default(double?), double? maxAlcohol = default(double?), double? minCaffeine = default(double?), double? maxCaffeine = default(double?), double? minSaturatedFat = default(double?), double? maxSaturatedFat = default(double?), double? minVitaminA = default(double?), double? maxVitaminA = default(double?), double? minVitaminC = default(double?), double? maxVitaminC = default(double?), double? minVitaminD = default(double?), double? maxVitaminD = default(double?), double? minVitaminE = default(double?), double? maxVitaminE = default(double?), double? minVitaminK = default(double?), double? maxVitaminK = default(double?), double? minVitaminB1 = default(double?), double? maxVitaminB1 = default(double?), double? minVitaminB2 = default(double?), double? maxVitaminB2 = default(double?), double? minVitaminB3 = default(double?), double? maxVitaminB3 = default(double?), double? minVitaminB5 = default(double?), double? maxVitaminB5 = default(double?), double? minVitaminB6 = default(double?), double? maxVitaminB6 = default(double?), double? minVitaminB12 = default(double?), double? maxVitaminB12 = default(double?), string? sort = default(string?), string? sortDirection = default(string?), int? offset = default(int?), int? number = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            if (cuisines != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "cuisines", cuisines));
            }
            if (excludeCuisines != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-cuisines", excludeCuisines));
            }
            if (mealType != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "meal-type", mealType));
            }
            if (diet != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "diet", diet));
            }
            if (intolerances != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "intolerances", intolerances));
            }
            if (equipment != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "equipment", equipment));
            }
            if (includeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "include-ingredients", includeIngredients));
            }
            if (excludeIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "exclude-ingredients", excludeIngredients));
            }
            if (fillIngredients != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "fill-ingredients", fillIngredients));
            }
            if (addRecipeInformation != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "add-recipe-information", addRecipeInformation));
            }
            if (maxTime != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-time", maxTime));
            }
            if (minServings != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-servings", minServings));
            }
            if (maxServings != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-servings", maxServings));
            }
            if (minCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-calories", minCalories));
            }
            if (maxCalories != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-calories", maxCalories));
            }
            if (minCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-carbs", minCarbs));
            }
            if (maxCarbs != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-carbs", maxCarbs));
            }
            if (minProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-protein", minProtein));
            }
            if (maxProtein != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-protein", maxProtein));
            }
            if (minFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-fat", minFat));
            }
            if (maxFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-fat", maxFat));
            }
            if (minSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-sugar", minSugar));
            }
            if (maxSugar != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-sugar", maxSugar));
            }
            if (minFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-fiber", minFiber));
            }
            if (maxFiber != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-fiber", maxFiber));
            }
            if (minFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-folate", minFolate));
            }
            if (maxFolate != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-folate", maxFolate));
            }
            if (minFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-folic-acid", minFolicAcid));
            }
            if (maxFolicAcid != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-folic-acid", maxFolicAcid));
            }
            if (minIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-iodine", minIodine));
            }
            if (maxIodine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-iodine", maxIodine));
            }
            if (minIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-iron", minIron));
            }
            if (maxIron != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-iron", maxIron));
            }
            if (minZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-zinc", minZinc));
            }
            if (maxZinc != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-zinc", maxZinc));
            }
            if (minMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-magnesium", minMagnesium));
            }
            if (maxMagnesium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-magnesium", maxMagnesium));
            }
            if (minManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-manganese", minManganese));
            }
            if (maxManganese != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-manganese", maxManganese));
            }
            if (minPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-phosphorus", minPhosphorus));
            }
            if (maxPhosphorus != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-phosphorus", maxPhosphorus));
            }
            if (minPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-potassium", minPotassium));
            }
            if (maxPotassium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-potassium", maxPotassium));
            }
            if (minSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-sodium", minSodium));
            }
            if (maxSodium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-sodium", maxSodium));
            }
            if (minSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-selenium", minSelenium));
            }
            if (maxSelenium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-selenium", maxSelenium));
            }
            if (minCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-copper", minCopper));
            }
            if (maxCopper != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-copper", maxCopper));
            }
            if (minCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-calcium", minCalcium));
            }
            if (maxCalcium != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-calcium", maxCalcium));
            }
            if (minCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-choline", minCholine));
            }
            if (maxCholine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-choline", maxCholine));
            }
            if (minCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-cholesterol", minCholesterol));
            }
            if (maxCholesterol != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-cholesterol", maxCholesterol));
            }
            if (minFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-fluoride", minFluoride));
            }
            if (maxFluoride != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-fluoride", maxFluoride));
            }
            if (minAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-alcohol", minAlcohol));
            }
            if (maxAlcohol != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-alcohol", maxAlcohol));
            }
            if (minCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-caffeine", minCaffeine));
            }
            if (maxCaffeine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-caffeine", maxCaffeine));
            }
            if (minSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-saturated-fat", minSaturatedFat));
            }
            if (maxSaturatedFat != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-saturated-fat", maxSaturatedFat));
            }
            if (minVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-a", minVitaminA));
            }
            if (maxVitaminA != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-a", maxVitaminA));
            }
            if (minVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-c", minVitaminC));
            }
            if (maxVitaminC != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-c", maxVitaminC));
            }
            if (minVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-d", minVitaminD));
            }
            if (maxVitaminD != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-d", maxVitaminD));
            }
            if (minVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-e", minVitaminE));
            }
            if (maxVitaminE != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-e", maxVitaminE));
            }
            if (minVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-k", minVitaminK));
            }
            if (maxVitaminK != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-k", maxVitaminK));
            }
            if (minVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b1", minVitaminB1));
            }
            if (maxVitaminB1 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b1", maxVitaminB1));
            }
            if (minVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b2", minVitaminB2));
            }
            if (maxVitaminB2 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b2", maxVitaminB2));
            }
            if (minVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b3", minVitaminB3));
            }
            if (maxVitaminB3 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b3", maxVitaminB3));
            }
            if (minVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b5", minVitaminB5));
            }
            if (maxVitaminB5 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b5", maxVitaminB5));
            }
            if (minVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b6", minVitaminB6));
            }
            if (maxVitaminB6 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b6", maxVitaminB6));
            }
            if (minVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-vitamin-b12", minVitaminB12));
            }
            if (maxVitaminB12 != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "max-vitamin-b12", maxVitaminB12));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (sortDirection != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort-direction", sortDirection));
            }
            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (number != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "number", number));
            }

            localVarRequestOptions.Operation = "FoodApi.SearchRecipes";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchRecipes200Response>("/search-recipes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRecipes", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Restaurants Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">The latitude to search around.</param>
        /// <param name="lon">The longitude to search around.</param>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="distance">The maximum distance of the restaurant in miles around the given location. (optional)</param>
        /// <param name="budget">The budget in USD for the meal. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurants in range [0,5]. (optional)</param>
        /// <param name="cuisine">The cuisine that the restaurants should support. (optional)</param>
        /// <param name="isOpen">Whether the restaurants have to be open now. (optional)</param>
        /// <param name="page">The page of the results. (optional)</param>
        /// <param name="sort">The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SearchRestaurants200Response</returns>
        public SearchRestaurants200Response SearchRestaurants(double lat, double lon, string? query = default(string?), int? distance = default(int?), double? budget = default(double?), double? minRating = default(double?), string? cuisine = default(string?), bool? isOpen = default(bool?), int? page = default(int?), string? sort = default(string?), int operationIndex = 0)
        {
            apileague.Client.ApiResponse<SearchRestaurants200Response> localVarResponse = SearchRestaurantsWithHttpInfo(lat, lon, query, distance, budget, minRating, cuisine, isOpen, page, sort);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Restaurants Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">The latitude to search around.</param>
        /// <param name="lon">The longitude to search around.</param>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="distance">The maximum distance of the restaurant in miles around the given location. (optional)</param>
        /// <param name="budget">The budget in USD for the meal. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurants in range [0,5]. (optional)</param>
        /// <param name="cuisine">The cuisine that the restaurants should support. (optional)</param>
        /// <param name="isOpen">Whether the restaurants have to be open now. (optional)</param>
        /// <param name="page">The page of the results. (optional)</param>
        /// <param name="sort">The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SearchRestaurants200Response</returns>
        public apileague.Client.ApiResponse<SearchRestaurants200Response> SearchRestaurantsWithHttpInfo(double lat, double lon, string? query = default(string?), int? distance = default(int?), double? budget = default(double?), double? minRating = default(double?), string? cuisine = default(string?), bool? isOpen = default(bool?), int? page = default(int?), string? sort = default(string?), int operationIndex = 0)
        {
            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "lon", lon));
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (budget != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "budget", budget));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (isOpen != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "is-open", isOpen));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "FoodApi.SearchRestaurants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<SearchRestaurants200Response>("/search-restaurants", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRestaurants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search Restaurants Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">The latitude to search around.</param>
        /// <param name="lon">The longitude to search around.</param>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="distance">The maximum distance of the restaurant in miles around the given location. (optional)</param>
        /// <param name="budget">The budget in USD for the meal. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurants in range [0,5]. (optional)</param>
        /// <param name="cuisine">The cuisine that the restaurants should support. (optional)</param>
        /// <param name="isOpen">Whether the restaurants have to be open now. (optional)</param>
        /// <param name="page">The page of the results. (optional)</param>
        /// <param name="sort">The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SearchRestaurants200Response</returns>
        public async System.Threading.Tasks.Task<SearchRestaurants200Response> SearchRestaurantsAsync(double lat, double lon, string? query = default(string?), int? distance = default(int?), double? budget = default(double?), double? minRating = default(double?), string? cuisine = default(string?), bool? isOpen = default(bool?), int? page = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            apileague.Client.ApiResponse<SearchRestaurants200Response> localVarResponse = await SearchRestaurantsWithHttpInfoAsync(lat, lon, query, distance, budget, minRating, cuisine, isOpen, page, sort, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search Restaurants Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
        /// </summary>
        /// <exception cref="apileague.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lat">The latitude to search around.</param>
        /// <param name="lon">The longitude to search around.</param>
        /// <param name="query">The search query. (optional)</param>
        /// <param name="distance">The maximum distance of the restaurant in miles around the given location. (optional)</param>
        /// <param name="budget">The budget in USD for the meal. (optional)</param>
        /// <param name="minRating">The minimum rating of the restaurants in range [0,5]. (optional)</param>
        /// <param name="cuisine">The cuisine that the restaurants should support. (optional)</param>
        /// <param name="isOpen">Whether the restaurants have to be open now. (optional)</param>
        /// <param name="page">The page of the results. (optional)</param>
        /// <param name="sort">The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SearchRestaurants200Response)</returns>
        public async System.Threading.Tasks.Task<apileague.Client.ApiResponse<SearchRestaurants200Response>> SearchRestaurantsWithHttpInfoAsync(double lat, double lon, string? query = default(string?), int? distance = default(int?), double? budget = default(double?), double? minRating = default(double?), string? cuisine = default(string?), bool? isOpen = default(bool?), int? page = default(int?), string? sort = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            apileague.Client.RequestOptions localVarRequestOptions = new apileague.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = apileague.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = apileague.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (query != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "query", query));
            }
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "lat", lat));
            localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "lon", lon));
            if (distance != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "distance", distance));
            }
            if (budget != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "budget", budget));
            }
            if (minRating != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "min-rating", minRating));
            }
            if (cuisine != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "cuisine", cuisine));
            }
            if (isOpen != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "is-open", isOpen));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }

            localVarRequestOptions.Operation = "FoodApi.SearchRestaurants";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("api-key")))
            {
                localVarRequestOptions.QueryParameters.Add(apileague.Client.ClientUtils.ParameterToMultiMap("", "api-key", this.Configuration.GetApiKeyWithPrefix("api-key")));
            }
            // authentication (headerApiKey) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("x-api-key")))
            {
                localVarRequestOptions.HeaderParameters.Add("x-api-key", this.Configuration.GetApiKeyWithPrefix("x-api-key"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<SearchRestaurants200Response>("/search-restaurants", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchRestaurants", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
