/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: mail@apileague.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = apileague.Client.OpenAPIDateConverter;

namespace apileague.Model
{
    /// <summary>
    /// RetrieveRecipeInformation200ResponseTaste
    /// </summary>
    [DataContract(Name = "retrieveRecipeInformation_200_response_taste")]
    public partial class RetrieveRecipeInformation200ResponseTaste : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RetrieveRecipeInformation200ResponseTaste" /> class.
        /// </summary>
        /// <param name="fattiness">fattiness.</param>
        /// <param name="spiciness">spiciness.</param>
        /// <param name="saltiness">saltiness.</param>
        /// <param name="bitterness">bitterness.</param>
        /// <param name="savoriness">savoriness.</param>
        /// <param name="sweetness">sweetness.</param>
        /// <param name="sourness">sourness.</param>
        public RetrieveRecipeInformation200ResponseTaste(decimal fattiness = default(decimal), int spiciness = default(int), int saltiness = default(int), decimal bitterness = default(decimal), decimal savoriness = default(decimal), decimal sweetness = default(decimal), decimal sourness = default(decimal))
        {
            this.Fattiness = fattiness;
            this.Spiciness = spiciness;
            this.Saltiness = saltiness;
            this.Bitterness = bitterness;
            this.Savoriness = savoriness;
            this.Sweetness = sweetness;
            this.Sourness = sourness;
        }

        /// <summary>
        /// Gets or Sets Fattiness
        /// </summary>
        [DataMember(Name = "fattiness", EmitDefaultValue = false)]
        public decimal Fattiness { get; set; }

        /// <summary>
        /// Gets or Sets Spiciness
        /// </summary>
        [DataMember(Name = "spiciness", EmitDefaultValue = false)]
        public int Spiciness { get; set; }

        /// <summary>
        /// Gets or Sets Saltiness
        /// </summary>
        [DataMember(Name = "saltiness", EmitDefaultValue = false)]
        public int Saltiness { get; set; }

        /// <summary>
        /// Gets or Sets Bitterness
        /// </summary>
        [DataMember(Name = "bitterness", EmitDefaultValue = false)]
        public decimal Bitterness { get; set; }

        /// <summary>
        /// Gets or Sets Savoriness
        /// </summary>
        [DataMember(Name = "savoriness", EmitDefaultValue = false)]
        public decimal Savoriness { get; set; }

        /// <summary>
        /// Gets or Sets Sweetness
        /// </summary>
        [DataMember(Name = "sweetness", EmitDefaultValue = false)]
        public decimal Sweetness { get; set; }

        /// <summary>
        /// Gets or Sets Sourness
        /// </summary>
        [DataMember(Name = "sourness", EmitDefaultValue = false)]
        public decimal Sourness { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RetrieveRecipeInformation200ResponseTaste {\n");
            sb.Append("  Fattiness: ").Append(Fattiness).Append("\n");
            sb.Append("  Spiciness: ").Append(Spiciness).Append("\n");
            sb.Append("  Saltiness: ").Append(Saltiness).Append("\n");
            sb.Append("  Bitterness: ").Append(Bitterness).Append("\n");
            sb.Append("  Savoriness: ").Append(Savoriness).Append("\n");
            sb.Append("  Sweetness: ").Append(Sweetness).Append("\n");
            sb.Append("  Sourness: ").Append(Sourness).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
