/*
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using apileague.Client;
using apileague.Api;
// uncomment below to import models
//using apileague.Model;

namespace apileague.Test.Api
{
    /// <summary>
    ///  Class for testing MediaApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MediaApiTests : IDisposable
    {
        private MediaApi instance;

        public MediaApiTests()
        {
            instance = new MediaApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MediaApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MediaApi
            //Assert.IsType<MediaApi>(instance);
        }

        /// <summary>
        /// Test DetectMainImageColorAPI
        /// </summary>
        [Fact]
        public void DetectMainImageColorAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //var response = instance.DetectMainImageColorAPI(url);
            //Assert.IsType<List<DetectMainImageColorAPI200ResponseInner>>(response);
        }

        /// <summary>
        /// Test RescaleImageAPI
        /// </summary>
        [Fact]
        public void RescaleImageAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string url = null;
            //int width = null;
            //int height = null;
            //bool crop = null;
            //var response = instance.RescaleImageAPI(url, width, height, crop);
            //Assert.IsType<System.IO.Stream>(response);
        }

        /// <summary>
        /// Test SearchIconsAPI
        /// </summary>
        [Fact]
        public void SearchIconsAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //bool? onlyPublicDomain = null;
            //int? number = null;
            //var response = instance.SearchIconsAPI(query, onlyPublicDomain, number);
            //Assert.IsType<SearchIconsAPI200Response>(response);
        }

        /// <summary>
        /// Test SearchRoyaltyFreeImagesAPI
        /// </summary>
        [Fact]
        public void SearchRoyaltyFreeImagesAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? number = null;
            //var response = instance.SearchRoyaltyFreeImagesAPI(query, number);
            //Assert.IsType<SearchRoyaltyFreeImagesAPI200Response>(response);
        }

        /// <summary>
        /// Test VectorSearchAPI
        /// </summary>
        [Fact]
        public void VectorSearchAPITest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string query = null;
            //int? offset = null;
            //int? number = null;
            //var response = instance.VectorSearchAPI(query, offset, number);
            //Assert.IsType<VectorSearchAPI200Response>(response);
        }
    }
}
