<?php
/**
 * InlineResponse20019
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  com.apileague.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.apileague.client\com.apileague.client.model;

use \ArrayAccess;
use \com.apileague.client\ObjectSerializer;

/**
 * InlineResponse20019 Class Doc Comment
 *
 * @category Class
 * @package  com.apileague.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineResponse20019 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_19';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'number_of_words' => 'int',
        'number_of_sentences' => 'int',
        'readability' => '\com.apileague.client\com.apileague.client.model\InlineResponse20019Readability',
        'skimmability' => '\com.apileague.client\com.apileague.client.model\InlineResponse20019Skimmability',
        'interestingness' => '\com.apileague.client\com.apileague.client.model\InlineResponse20019Interestingness',
        'style' => '\com.apileague.client\com.apileague.client.model\InlineResponse20019Style',
        'total_score' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'number_of_words' => null,
        'number_of_sentences' => null,
        'readability' => null,
        'skimmability' => null,
        'interestingness' => null,
        'style' => null,
        'total_score' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number_of_words' => 'number_of_words',
        'number_of_sentences' => 'number_of_sentences',
        'readability' => 'readability',
        'skimmability' => 'skimmability',
        'interestingness' => 'interestingness',
        'style' => 'style',
        'total_score' => 'total_score'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number_of_words' => 'setNumberOfWords',
        'number_of_sentences' => 'setNumberOfSentences',
        'readability' => 'setReadability',
        'skimmability' => 'setSkimmability',
        'interestingness' => 'setInterestingness',
        'style' => 'setStyle',
        'total_score' => 'setTotalScore'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number_of_words' => 'getNumberOfWords',
        'number_of_sentences' => 'getNumberOfSentences',
        'readability' => 'getReadability',
        'skimmability' => 'getSkimmability',
        'interestingness' => 'getInterestingness',
        'style' => 'getStyle',
        'total_score' => 'getTotalScore'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number_of_words'] = $data['number_of_words'] ?? null;
        $this->container['number_of_sentences'] = $data['number_of_sentences'] ?? null;
        $this->container['readability'] = $data['readability'] ?? null;
        $this->container['skimmability'] = $data['skimmability'] ?? null;
        $this->container['interestingness'] = $data['interestingness'] ?? null;
        $this->container['style'] = $data['style'] ?? null;
        $this->container['total_score'] = $data['total_score'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number_of_words
     *
     * @return int|null
     */
    public function getNumberOfWords()
    {
        return $this->container['number_of_words'];
    }

    /**
     * Sets number_of_words
     *
     * @param int|null $number_of_words number_of_words
     *
     * @return self
     */
    public function setNumberOfWords($number_of_words)
    {
        $this->container['number_of_words'] = $number_of_words;

        return $this;
    }

    /**
     * Gets number_of_sentences
     *
     * @return int|null
     */
    public function getNumberOfSentences()
    {
        return $this->container['number_of_sentences'];
    }

    /**
     * Sets number_of_sentences
     *
     * @param int|null $number_of_sentences number_of_sentences
     *
     * @return self
     */
    public function setNumberOfSentences($number_of_sentences)
    {
        $this->container['number_of_sentences'] = $number_of_sentences;

        return $this;
    }

    /**
     * Gets readability
     *
     * @return \com.apileague.client\com.apileague.client.model\InlineResponse20019Readability|null
     */
    public function getReadability()
    {
        return $this->container['readability'];
    }

    /**
     * Sets readability
     *
     * @param \com.apileague.client\com.apileague.client.model\InlineResponse20019Readability|null $readability readability
     *
     * @return self
     */
    public function setReadability($readability)
    {
        $this->container['readability'] = $readability;

        return $this;
    }

    /**
     * Gets skimmability
     *
     * @return \com.apileague.client\com.apileague.client.model\InlineResponse20019Skimmability|null
     */
    public function getSkimmability()
    {
        return $this->container['skimmability'];
    }

    /**
     * Sets skimmability
     *
     * @param \com.apileague.client\com.apileague.client.model\InlineResponse20019Skimmability|null $skimmability skimmability
     *
     * @return self
     */
    public function setSkimmability($skimmability)
    {
        $this->container['skimmability'] = $skimmability;

        return $this;
    }

    /**
     * Gets interestingness
     *
     * @return \com.apileague.client\com.apileague.client.model\InlineResponse20019Interestingness|null
     */
    public function getInterestingness()
    {
        return $this->container['interestingness'];
    }

    /**
     * Sets interestingness
     *
     * @param \com.apileague.client\com.apileague.client.model\InlineResponse20019Interestingness|null $interestingness interestingness
     *
     * @return self
     */
    public function setInterestingness($interestingness)
    {
        $this->container['interestingness'] = $interestingness;

        return $this;
    }

    /**
     * Gets style
     *
     * @return \com.apileague.client\com.apileague.client.model\InlineResponse20019Style|null
     */
    public function getStyle()
    {
        return $this->container['style'];
    }

    /**
     * Sets style
     *
     * @param \com.apileague.client\com.apileague.client.model\InlineResponse20019Style|null $style style
     *
     * @return self
     */
    public function setStyle($style)
    {
        $this->container['style'] = $style;

        return $this;
    }

    /**
     * Gets total_score
     *
     * @return float|null
     */
    public function getTotalScore()
    {
        return $this->container['total_score'];
    }

    /**
     * Sets total_score
     *
     * @param float|null $total_score total_score
     *
     * @return self
     */
    public function setTotalScore($total_score)
    {
        $this->container['total_score'] = $total_score;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


