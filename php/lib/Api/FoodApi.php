<?php
/**
 * FoodApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FoodApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FoodApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'computeNutritionAPI' => [
            'application/json',
        ],
        'retrieveRecipeInformationAPI' => [
            'application/json',
        ],
        'searchDrinksAPI' => [
            'application/json',
        ],
        'searchRecipesAPI' => [
            'application/json',
        ],
        'searchRestaurantsAPI' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation computeNutritionAPI
     *
     * Compute Nutrition API
     *
     * @param  string $ingredients A comma-separated list of the ingredients of the recipe. (required)
     * @param  int $servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
     * @param  bool $reduce_oils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['computeNutritionAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ComputeNutritionAPI200Response
     */
    public function computeNutritionAPI($ingredients, $servings = null, $reduce_oils = null, string $contentType = self::contentTypes['computeNutritionAPI'][0])
    {
        list($response) = $this->computeNutritionAPIWithHttpInfo($ingredients, $servings, $reduce_oils, $contentType);
        return $response;
    }

    /**
     * Operation computeNutritionAPIWithHttpInfo
     *
     * Compute Nutrition API
     *
     * @param  string $ingredients A comma-separated list of the ingredients of the recipe. (required)
     * @param  int $servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
     * @param  bool $reduce_oils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['computeNutritionAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ComputeNutritionAPI200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function computeNutritionAPIWithHttpInfo($ingredients, $servings = null, $reduce_oils = null, string $contentType = self::contentTypes['computeNutritionAPI'][0])
    {
        $request = $this->computeNutritionAPIRequest($ingredients, $servings, $reduce_oils, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ComputeNutritionAPI200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ComputeNutritionAPI200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ComputeNutritionAPI200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ComputeNutritionAPI200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ComputeNutritionAPI200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation computeNutritionAPIAsync
     *
     * Compute Nutrition API
     *
     * @param  string $ingredients A comma-separated list of the ingredients of the recipe. (required)
     * @param  int $servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
     * @param  bool $reduce_oils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['computeNutritionAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function computeNutritionAPIAsync($ingredients, $servings = null, $reduce_oils = null, string $contentType = self::contentTypes['computeNutritionAPI'][0])
    {
        return $this->computeNutritionAPIAsyncWithHttpInfo($ingredients, $servings, $reduce_oils, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation computeNutritionAPIAsyncWithHttpInfo
     *
     * Compute Nutrition API
     *
     * @param  string $ingredients A comma-separated list of the ingredients of the recipe. (required)
     * @param  int $servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
     * @param  bool $reduce_oils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['computeNutritionAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function computeNutritionAPIAsyncWithHttpInfo($ingredients, $servings = null, $reduce_oils = null, string $contentType = self::contentTypes['computeNutritionAPI'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ComputeNutritionAPI200Response';
        $request = $this->computeNutritionAPIRequest($ingredients, $servings, $reduce_oils, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'computeNutritionAPI'
     *
     * @param  string $ingredients A comma-separated list of the ingredients of the recipe. (required)
     * @param  int $servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
     * @param  bool $reduce_oils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['computeNutritionAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function computeNutritionAPIRequest($ingredients, $servings = null, $reduce_oils = null, string $contentType = self::contentTypes['computeNutritionAPI'][0])
    {

        // verify the required parameter 'ingredients' is set
        if ($ingredients === null || (is_array($ingredients) && count($ingredients) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ingredients when calling computeNutritionAPI'
            );
        }
        if (strlen($ingredients) > 1000) {
            throw new \InvalidArgumentException('invalid length for "$ingredients" when calling FoodApi.computeNutritionAPI, must be smaller than or equal to 1000.');
        }
        if (!preg_match("/./", $ingredients)) {
            throw new \InvalidArgumentException("invalid value for \"ingredients\" when calling FoodApi.computeNutritionAPI, must conform to the pattern /./.");
        }
        
        if ($servings !== null && $servings > 999) {
            throw new \InvalidArgumentException('invalid value for "$servings" when calling FoodApi.computeNutritionAPI, must be smaller than or equal to 999.');
        }
        if ($servings !== null && $servings < 1) {
            throw new \InvalidArgumentException('invalid value for "$servings" when calling FoodApi.computeNutritionAPI, must be bigger than or equal to 1.');
        }
        


        $resourcePath = '/compute-nutrition';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ingredients,
            'ingredients', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $servings,
            'servings', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reduce_oils,
            'reduce-oils', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation retrieveRecipeInformationAPI
     *
     * Retrieve Recipe Information API
     *
     * @param  int $id The id of the recipe to retrieve. (required)
     * @param  bool $add_wine_pairing Whether to pair a wine to the recipe. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveRecipeInformationAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RetrieveRecipeInformationAPI200Response
     */
    public function retrieveRecipeInformationAPI($id, $add_wine_pairing = null, string $contentType = self::contentTypes['retrieveRecipeInformationAPI'][0])
    {
        list($response) = $this->retrieveRecipeInformationAPIWithHttpInfo($id, $add_wine_pairing, $contentType);
        return $response;
    }

    /**
     * Operation retrieveRecipeInformationAPIWithHttpInfo
     *
     * Retrieve Recipe Information API
     *
     * @param  int $id The id of the recipe to retrieve. (required)
     * @param  bool $add_wine_pairing Whether to pair a wine to the recipe. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveRecipeInformationAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RetrieveRecipeInformationAPI200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function retrieveRecipeInformationAPIWithHttpInfo($id, $add_wine_pairing = null, string $contentType = self::contentTypes['retrieveRecipeInformationAPI'][0])
    {
        $request = $this->retrieveRecipeInformationAPIRequest($id, $add_wine_pairing, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RetrieveRecipeInformationAPI200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RetrieveRecipeInformationAPI200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RetrieveRecipeInformationAPI200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RetrieveRecipeInformationAPI200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RetrieveRecipeInformationAPI200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation retrieveRecipeInformationAPIAsync
     *
     * Retrieve Recipe Information API
     *
     * @param  int $id The id of the recipe to retrieve. (required)
     * @param  bool $add_wine_pairing Whether to pair a wine to the recipe. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveRecipeInformationAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveRecipeInformationAPIAsync($id, $add_wine_pairing = null, string $contentType = self::contentTypes['retrieveRecipeInformationAPI'][0])
    {
        return $this->retrieveRecipeInformationAPIAsyncWithHttpInfo($id, $add_wine_pairing, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation retrieveRecipeInformationAPIAsyncWithHttpInfo
     *
     * Retrieve Recipe Information API
     *
     * @param  int $id The id of the recipe to retrieve. (required)
     * @param  bool $add_wine_pairing Whether to pair a wine to the recipe. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveRecipeInformationAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function retrieveRecipeInformationAPIAsyncWithHttpInfo($id, $add_wine_pairing = null, string $contentType = self::contentTypes['retrieveRecipeInformationAPI'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RetrieveRecipeInformationAPI200Response';
        $request = $this->retrieveRecipeInformationAPIRequest($id, $add_wine_pairing, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'retrieveRecipeInformationAPI'
     *
     * @param  int $id The id of the recipe to retrieve. (required)
     * @param  bool $add_wine_pairing Whether to pair a wine to the recipe. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['retrieveRecipeInformationAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function retrieveRecipeInformationAPIRequest($id, $add_wine_pairing = null, string $contentType = self::contentTypes['retrieveRecipeInformationAPI'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling retrieveRecipeInformationAPI'
            );
        }
        if ($id > 1410065407) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling FoodApi.retrieveRecipeInformationAPI, must be smaller than or equal to 1410065407.');
        }
        if ($id < 0) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling FoodApi.retrieveRecipeInformationAPI, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/retrieve-recipe';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $id,
            'id', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $add_wine_pairing,
            'add-wine-pairing', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchDrinksAPI
     *
     * Search Drinks API
     *
     * @param  string $query The search query. (optional)
     * @param  string $glass_types A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)
     * @param  string $flavors A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)
     * @param  string $diet The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the drinks. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)
     * @param  float $min_calories The minimum amount of calories the drink must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the drink can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the drink must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the drink can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the drink must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the drink can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the drink must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the drink can have per serving. (optional)
     * @param  float $min_alcohol_percent The minimum alcohol percentage the drink must have. (optional)
     * @param  float $max_alcohol_percent The maximum alcohol percentage the drink can have. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the drink must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the drink can have per serving. (optional)
     * @param  string $sort The attribute by which to sort the drinks. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of drinks to skip, between 0 and 90. (optional)
     * @param  int $number The number of drinks, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDrinksAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchDrinksAPI200Response
     */
    public function searchDrinksAPI($query = null, $glass_types = null, $flavors = null, $diet = null, $include_ingredients = null, $exclude_ingredients = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_alcohol_percent = null, $max_alcohol_percent = null, $min_caffeine = null, $max_caffeine = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchDrinksAPI'][0])
    {
        list($response) = $this->searchDrinksAPIWithHttpInfo($query, $glass_types, $flavors, $diet, $include_ingredients, $exclude_ingredients, $min_calories, $max_calories, $min_carbs, $max_carbs, $min_protein, $max_protein, $min_fat, $max_fat, $min_alcohol_percent, $max_alcohol_percent, $min_caffeine, $max_caffeine, $sort, $sort_direction, $offset, $number, $contentType);
        return $response;
    }

    /**
     * Operation searchDrinksAPIWithHttpInfo
     *
     * Search Drinks API
     *
     * @param  string $query The search query. (optional)
     * @param  string $glass_types A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)
     * @param  string $flavors A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)
     * @param  string $diet The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the drinks. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)
     * @param  float $min_calories The minimum amount of calories the drink must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the drink can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the drink must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the drink can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the drink must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the drink can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the drink must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the drink can have per serving. (optional)
     * @param  float $min_alcohol_percent The minimum alcohol percentage the drink must have. (optional)
     * @param  float $max_alcohol_percent The maximum alcohol percentage the drink can have. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the drink must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the drink can have per serving. (optional)
     * @param  string $sort The attribute by which to sort the drinks. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of drinks to skip, between 0 and 90. (optional)
     * @param  int $number The number of drinks, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDrinksAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchDrinksAPI200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDrinksAPIWithHttpInfo($query = null, $glass_types = null, $flavors = null, $diet = null, $include_ingredients = null, $exclude_ingredients = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_alcohol_percent = null, $max_alcohol_percent = null, $min_caffeine = null, $max_caffeine = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchDrinksAPI'][0])
    {
        $request = $this->searchDrinksAPIRequest($query, $glass_types, $flavors, $diet, $include_ingredients, $exclude_ingredients, $min_calories, $max_calories, $min_carbs, $max_carbs, $min_protein, $max_protein, $min_fat, $max_fat, $min_alcohol_percent, $max_alcohol_percent, $min_caffeine, $max_caffeine, $sort, $sort_direction, $offset, $number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchDrinksAPI200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchDrinksAPI200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchDrinksAPI200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchDrinksAPI200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchDrinksAPI200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchDrinksAPIAsync
     *
     * Search Drinks API
     *
     * @param  string $query The search query. (optional)
     * @param  string $glass_types A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)
     * @param  string $flavors A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)
     * @param  string $diet The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the drinks. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)
     * @param  float $min_calories The minimum amount of calories the drink must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the drink can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the drink must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the drink can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the drink must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the drink can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the drink must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the drink can have per serving. (optional)
     * @param  float $min_alcohol_percent The minimum alcohol percentage the drink must have. (optional)
     * @param  float $max_alcohol_percent The maximum alcohol percentage the drink can have. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the drink must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the drink can have per serving. (optional)
     * @param  string $sort The attribute by which to sort the drinks. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of drinks to skip, between 0 and 90. (optional)
     * @param  int $number The number of drinks, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDrinksAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDrinksAPIAsync($query = null, $glass_types = null, $flavors = null, $diet = null, $include_ingredients = null, $exclude_ingredients = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_alcohol_percent = null, $max_alcohol_percent = null, $min_caffeine = null, $max_caffeine = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchDrinksAPI'][0])
    {
        return $this->searchDrinksAPIAsyncWithHttpInfo($query, $glass_types, $flavors, $diet, $include_ingredients, $exclude_ingredients, $min_calories, $max_calories, $min_carbs, $max_carbs, $min_protein, $max_protein, $min_fat, $max_fat, $min_alcohol_percent, $max_alcohol_percent, $min_caffeine, $max_caffeine, $sort, $sort_direction, $offset, $number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchDrinksAPIAsyncWithHttpInfo
     *
     * Search Drinks API
     *
     * @param  string $query The search query. (optional)
     * @param  string $glass_types A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)
     * @param  string $flavors A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)
     * @param  string $diet The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the drinks. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)
     * @param  float $min_calories The minimum amount of calories the drink must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the drink can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the drink must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the drink can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the drink must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the drink can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the drink must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the drink can have per serving. (optional)
     * @param  float $min_alcohol_percent The minimum alcohol percentage the drink must have. (optional)
     * @param  float $max_alcohol_percent The maximum alcohol percentage the drink can have. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the drink must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the drink can have per serving. (optional)
     * @param  string $sort The attribute by which to sort the drinks. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of drinks to skip, between 0 and 90. (optional)
     * @param  int $number The number of drinks, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDrinksAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDrinksAPIAsyncWithHttpInfo($query = null, $glass_types = null, $flavors = null, $diet = null, $include_ingredients = null, $exclude_ingredients = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_alcohol_percent = null, $max_alcohol_percent = null, $min_caffeine = null, $max_caffeine = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchDrinksAPI'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchDrinksAPI200Response';
        $request = $this->searchDrinksAPIRequest($query, $glass_types, $flavors, $diet, $include_ingredients, $exclude_ingredients, $min_calories, $max_calories, $min_carbs, $max_carbs, $min_protein, $max_protein, $min_fat, $max_fat, $min_alcohol_percent, $max_alcohol_percent, $min_caffeine, $max_caffeine, $sort, $sort_direction, $offset, $number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchDrinksAPI'
     *
     * @param  string $query The search query. (optional)
     * @param  string $glass_types A comma-separated list (interpreted as OR) of glass types that the drink should be served in. (optional)
     * @param  string $flavors A comma-separated list (interpreted as AND) of dominant flavors in the drink. (optional)
     * @param  string $diet The diet the drink must adhere to. One of the following: paleo,primal,grain-free,vegan,vegetarian. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the drinks. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the drinks must not contain. (optional)
     * @param  float $min_calories The minimum amount of calories the drink must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the drink can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the drink must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the drink can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the drink must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the drink can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the drink must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the drink can have per serving. (optional)
     * @param  float $min_alcohol_percent The minimum alcohol percentage the drink must have. (optional)
     * @param  float $max_alcohol_percent The maximum alcohol percentage the drink can have. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the drink must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the drink can have per serving. (optional)
     * @param  string $sort The attribute by which to sort the drinks. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of drinks to skip, between 0 and 90. (optional)
     * @param  int $number The number of drinks, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchDrinksAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchDrinksAPIRequest($query = null, $glass_types = null, $flavors = null, $diet = null, $include_ingredients = null, $exclude_ingredients = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_alcohol_percent = null, $max_alcohol_percent = null, $min_caffeine = null, $max_caffeine = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchDrinksAPI'][0])
    {

        if ($query !== null && strlen($query) > 300) {
            throw new \InvalidArgumentException('invalid length for "$query" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 300.');
        }
        if ($query !== null && !preg_match("/./", $query)) {
            throw new \InvalidArgumentException("invalid value for \"query\" when calling FoodApi.searchDrinksAPI, must conform to the pattern /./.");
        }
        
        if ($glass_types !== null && strlen($glass_types) > 200) {
            throw new \InvalidArgumentException('invalid length for "$glass_types" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 200.');
        }
        if ($glass_types !== null && !preg_match("/./", $glass_types)) {
            throw new \InvalidArgumentException("invalid value for \"glass_types\" when calling FoodApi.searchDrinksAPI, must conform to the pattern /./.");
        }
        
        if ($flavors !== null && strlen($flavors) > 200) {
            throw new \InvalidArgumentException('invalid length for "$flavors" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 200.');
        }
        if ($flavors !== null && !preg_match("/./", $flavors)) {
            throw new \InvalidArgumentException("invalid value for \"flavors\" when calling FoodApi.searchDrinksAPI, must conform to the pattern /./.");
        }
        
        if ($diet !== null && strlen($diet) > 30) {
            throw new \InvalidArgumentException('invalid length for "$diet" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 30.');
        }
        if ($diet !== null && !preg_match("/./", $diet)) {
            throw new \InvalidArgumentException("invalid value for \"diet\" when calling FoodApi.searchDrinksAPI, must conform to the pattern /./.");
        }
        
        if ($include_ingredients !== null && strlen($include_ingredients) > 300) {
            throw new \InvalidArgumentException('invalid length for "$include_ingredients" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 300.');
        }
        if ($include_ingredients !== null && !preg_match("/./", $include_ingredients)) {
            throw new \InvalidArgumentException("invalid value for \"include_ingredients\" when calling FoodApi.searchDrinksAPI, must conform to the pattern /./.");
        }
        
        if ($exclude_ingredients !== null && strlen($exclude_ingredients) > 300) {
            throw new \InvalidArgumentException('invalid length for "$exclude_ingredients" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 300.');
        }
        if ($exclude_ingredients !== null && !preg_match("/./", $exclude_ingredients)) {
            throw new \InvalidArgumentException("invalid value for \"exclude_ingredients\" when calling FoodApi.searchDrinksAPI, must conform to the pattern /./.");
        }
        
        if ($min_calories !== null && $min_calories > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_calories" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($min_calories !== null && $min_calories < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_calories" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_calories !== null && $max_calories > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_calories" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($max_calories !== null && $max_calories < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_calories" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_carbs !== null && $min_carbs > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_carbs" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($min_carbs !== null && $min_carbs < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_carbs" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_carbs !== null && $max_carbs > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_carbs" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($max_carbs !== null && $max_carbs < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_carbs" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_protein !== null && $min_protein > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_protein" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($min_protein !== null && $min_protein < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_protein" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_protein !== null && $max_protein > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_protein" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($max_protein !== null && $max_protein < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_protein" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_fat !== null && $min_fat > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_fat" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($min_fat !== null && $min_fat < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_fat" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_fat !== null && $max_fat > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_fat" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($max_fat !== null && $max_fat < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_fat" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_alcohol_percent !== null && $min_alcohol_percent > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_alcohol_percent" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($min_alcohol_percent !== null && $min_alcohol_percent < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_alcohol_percent" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_alcohol_percent !== null && $max_alcohol_percent > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_alcohol_percent" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($max_alcohol_percent !== null && $max_alcohol_percent < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_alcohol_percent" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_caffeine !== null && $min_caffeine > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_caffeine" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($min_caffeine !== null && $min_caffeine < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_caffeine" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_caffeine !== null && $max_caffeine > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_caffeine" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 99999.');
        }
        if ($max_caffeine !== null && $max_caffeine < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_caffeine" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($sort !== null && strlen($sort) > 100) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 100.');
        }
        if ($sort !== null && !preg_match("/./", $sort)) {
            throw new \InvalidArgumentException("invalid value for \"sort\" when calling FoodApi.searchDrinksAPI, must conform to the pattern /./.");
        }
        
        if ($sort_direction !== null && strlen($sort_direction) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sort_direction" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 4.');
        }
        if ($sort_direction !== null && !preg_match("/./", $sort_direction)) {
            throw new \InvalidArgumentException("invalid value for \"sort_direction\" when calling FoodApi.searchDrinksAPI, must conform to the pattern /./.");
        }
        
        if ($offset !== null && $offset > 90) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 90.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 0.');
        }
        
        if ($number !== null && $number > 10) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling FoodApi.searchDrinksAPI, must be smaller than or equal to 10.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling FoodApi.searchDrinksAPI, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/search-drinks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $glass_types,
            'glass-types', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $flavors,
            'flavors', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $diet,
            'diet', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_ingredients,
            'include-ingredients', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_ingredients,
            'exclude-ingredients', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_calories,
            'min-calories', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_calories,
            'max-calories', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_carbs,
            'min-carbs', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_carbs,
            'max-carbs', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_protein,
            'min-protein', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_protein,
            'max-protein', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_fat,
            'min-fat', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_fat,
            'max-fat', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_alcohol_percent,
            'min-alcohol-percent', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_alcohol_percent,
            'max-alcohol-percent', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_caffeine,
            'min-caffeine', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_caffeine,
            'max-caffeine', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_direction,
            'sort-direction', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchRecipesAPI
     *
     * Search Recipes API
     *
     * @param  string $query The search query. (optional)
     * @param  string $cuisines The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)
     * @param  string $exclude_cuisines The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)
     * @param  string $meal_type The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
     * @param  string $diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
     * @param  string $intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
     * @param  string $equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param  bool $fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param  bool $add_recipe_information If set to true, you get more information about the recipes returned. (optional)
     * @param  int $max_time The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param  int $min_servings The minimum amount of servings the recipe is for. (optional)
     * @param  int $max_servings The maximum amount of servings the recipe is for. (optional)
     * @param  float $min_calories The minimum amount of calories the recipe must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the recipe can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the recipe must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the recipe can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the recipe must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the recipe can have per serving. (optional)
     * @param  float $min_sugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
     * @param  float $max_sugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
     * @param  float $min_fiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
     * @param  float $max_fiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
     * @param  float $min_folate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
     * @param  float $min_folic_acid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folic_acid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
     * @param  float $max_iodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
     * @param  float $max_iron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
     * @param  float $min_zinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
     * @param  float $max_zinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
     * @param  float $min_magnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_magnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_manganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
     * @param  float $max_manganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
     * @param  float $min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
     * @param  float $max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
     * @param  float $min_potassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_potassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_sodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_sodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_selenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
     * @param  float $max_selenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
     * @param  float $min_copper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
     * @param  float $max_copper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
     * @param  float $min_calcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_calcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_choline The minimum amount of choline in milligrams the recipe must have per serving. (optional)
     * @param  float $max_choline The maximum amount of choline in milligrams the recipe can have per serving. (optional)
     * @param  float $min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
     * @param  float $max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
     * @param  float $min_fluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
     * @param  float $max_fluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
     * @param  float $min_alcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
     * @param  float $max_alcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
     * @param  float $min_saturated_fat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
     * @param  float $max_saturated_fat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
     * @param  float $max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
     * @param  float $min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
     * @param  string $sort The strategy to sort recipes by. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of recipes to skip, between 0 and 900. (optional)
     * @param  int $number The number of recipes, between 1 and 100. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRecipesAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchRecipesAPI200Response
     */
    public function searchRecipesAPI($query = null, $cuisines = null, $exclude_cuisines = null, $meal_type = null, $diet = null, $intolerances = null, $equipment = null, $include_ingredients = null, $exclude_ingredients = null, $fill_ingredients = null, $add_recipe_information = null, $max_time = null, $min_servings = null, $max_servings = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_sugar = null, $max_sugar = null, $min_fiber = null, $max_fiber = null, $min_folate = null, $max_folate = null, $min_folic_acid = null, $max_folic_acid = null, $min_iodine = null, $max_iodine = null, $min_iron = null, $max_iron = null, $min_zinc = null, $max_zinc = null, $min_magnesium = null, $max_magnesium = null, $min_manganese = null, $max_manganese = null, $min_phosphorus = null, $max_phosphorus = null, $min_potassium = null, $max_potassium = null, $min_sodium = null, $max_sodium = null, $min_selenium = null, $max_selenium = null, $min_copper = null, $max_copper = null, $min_calcium = null, $max_calcium = null, $min_choline = null, $max_choline = null, $min_cholesterol = null, $max_cholesterol = null, $min_fluoride = null, $max_fluoride = null, $min_alcohol = null, $max_alcohol = null, $min_caffeine = null, $max_caffeine = null, $min_saturated_fat = null, $max_saturated_fat = null, $min_vitamin_a = null, $max_vitamin_a = null, $min_vitamin_c = null, $max_vitamin_c = null, $min_vitamin_d = null, $max_vitamin_d = null, $min_vitamin_e = null, $max_vitamin_e = null, $min_vitamin_k = null, $max_vitamin_k = null, $min_vitamin_b1 = null, $max_vitamin_b1 = null, $min_vitamin_b2 = null, $max_vitamin_b2 = null, $min_vitamin_b3 = null, $max_vitamin_b3 = null, $min_vitamin_b5 = null, $max_vitamin_b5 = null, $min_vitamin_b6 = null, $max_vitamin_b6 = null, $min_vitamin_b12 = null, $max_vitamin_b12 = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchRecipesAPI'][0])
    {
        list($response) = $this->searchRecipesAPIWithHttpInfo($query, $cuisines, $exclude_cuisines, $meal_type, $diet, $intolerances, $equipment, $include_ingredients, $exclude_ingredients, $fill_ingredients, $add_recipe_information, $max_time, $min_servings, $max_servings, $min_calories, $max_calories, $min_carbs, $max_carbs, $min_protein, $max_protein, $min_fat, $max_fat, $min_sugar, $max_sugar, $min_fiber, $max_fiber, $min_folate, $max_folate, $min_folic_acid, $max_folic_acid, $min_iodine, $max_iodine, $min_iron, $max_iron, $min_zinc, $max_zinc, $min_magnesium, $max_magnesium, $min_manganese, $max_manganese, $min_phosphorus, $max_phosphorus, $min_potassium, $max_potassium, $min_sodium, $max_sodium, $min_selenium, $max_selenium, $min_copper, $max_copper, $min_calcium, $max_calcium, $min_choline, $max_choline, $min_cholesterol, $max_cholesterol, $min_fluoride, $max_fluoride, $min_alcohol, $max_alcohol, $min_caffeine, $max_caffeine, $min_saturated_fat, $max_saturated_fat, $min_vitamin_a, $max_vitamin_a, $min_vitamin_c, $max_vitamin_c, $min_vitamin_d, $max_vitamin_d, $min_vitamin_e, $max_vitamin_e, $min_vitamin_k, $max_vitamin_k, $min_vitamin_b1, $max_vitamin_b1, $min_vitamin_b2, $max_vitamin_b2, $min_vitamin_b3, $max_vitamin_b3, $min_vitamin_b5, $max_vitamin_b5, $min_vitamin_b6, $max_vitamin_b6, $min_vitamin_b12, $max_vitamin_b12, $sort, $sort_direction, $offset, $number, $contentType);
        return $response;
    }

    /**
     * Operation searchRecipesAPIWithHttpInfo
     *
     * Search Recipes API
     *
     * @param  string $query The search query. (optional)
     * @param  string $cuisines The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)
     * @param  string $exclude_cuisines The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)
     * @param  string $meal_type The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
     * @param  string $diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
     * @param  string $intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
     * @param  string $equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param  bool $fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param  bool $add_recipe_information If set to true, you get more information about the recipes returned. (optional)
     * @param  int $max_time The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param  int $min_servings The minimum amount of servings the recipe is for. (optional)
     * @param  int $max_servings The maximum amount of servings the recipe is for. (optional)
     * @param  float $min_calories The minimum amount of calories the recipe must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the recipe can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the recipe must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the recipe can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the recipe must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the recipe can have per serving. (optional)
     * @param  float $min_sugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
     * @param  float $max_sugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
     * @param  float $min_fiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
     * @param  float $max_fiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
     * @param  float $min_folate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
     * @param  float $min_folic_acid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folic_acid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
     * @param  float $max_iodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
     * @param  float $max_iron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
     * @param  float $min_zinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
     * @param  float $max_zinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
     * @param  float $min_magnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_magnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_manganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
     * @param  float $max_manganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
     * @param  float $min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
     * @param  float $max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
     * @param  float $min_potassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_potassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_sodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_sodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_selenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
     * @param  float $max_selenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
     * @param  float $min_copper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
     * @param  float $max_copper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
     * @param  float $min_calcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_calcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_choline The minimum amount of choline in milligrams the recipe must have per serving. (optional)
     * @param  float $max_choline The maximum amount of choline in milligrams the recipe can have per serving. (optional)
     * @param  float $min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
     * @param  float $max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
     * @param  float $min_fluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
     * @param  float $max_fluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
     * @param  float $min_alcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
     * @param  float $max_alcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
     * @param  float $min_saturated_fat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
     * @param  float $max_saturated_fat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
     * @param  float $max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
     * @param  float $min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
     * @param  string $sort The strategy to sort recipes by. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of recipes to skip, between 0 and 900. (optional)
     * @param  int $number The number of recipes, between 1 and 100. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRecipesAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchRecipesAPI200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchRecipesAPIWithHttpInfo($query = null, $cuisines = null, $exclude_cuisines = null, $meal_type = null, $diet = null, $intolerances = null, $equipment = null, $include_ingredients = null, $exclude_ingredients = null, $fill_ingredients = null, $add_recipe_information = null, $max_time = null, $min_servings = null, $max_servings = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_sugar = null, $max_sugar = null, $min_fiber = null, $max_fiber = null, $min_folate = null, $max_folate = null, $min_folic_acid = null, $max_folic_acid = null, $min_iodine = null, $max_iodine = null, $min_iron = null, $max_iron = null, $min_zinc = null, $max_zinc = null, $min_magnesium = null, $max_magnesium = null, $min_manganese = null, $max_manganese = null, $min_phosphorus = null, $max_phosphorus = null, $min_potassium = null, $max_potassium = null, $min_sodium = null, $max_sodium = null, $min_selenium = null, $max_selenium = null, $min_copper = null, $max_copper = null, $min_calcium = null, $max_calcium = null, $min_choline = null, $max_choline = null, $min_cholesterol = null, $max_cholesterol = null, $min_fluoride = null, $max_fluoride = null, $min_alcohol = null, $max_alcohol = null, $min_caffeine = null, $max_caffeine = null, $min_saturated_fat = null, $max_saturated_fat = null, $min_vitamin_a = null, $max_vitamin_a = null, $min_vitamin_c = null, $max_vitamin_c = null, $min_vitamin_d = null, $max_vitamin_d = null, $min_vitamin_e = null, $max_vitamin_e = null, $min_vitamin_k = null, $max_vitamin_k = null, $min_vitamin_b1 = null, $max_vitamin_b1 = null, $min_vitamin_b2 = null, $max_vitamin_b2 = null, $min_vitamin_b3 = null, $max_vitamin_b3 = null, $min_vitamin_b5 = null, $max_vitamin_b5 = null, $min_vitamin_b6 = null, $max_vitamin_b6 = null, $min_vitamin_b12 = null, $max_vitamin_b12 = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchRecipesAPI'][0])
    {
        $request = $this->searchRecipesAPIRequest($query, $cuisines, $exclude_cuisines, $meal_type, $diet, $intolerances, $equipment, $include_ingredients, $exclude_ingredients, $fill_ingredients, $add_recipe_information, $max_time, $min_servings, $max_servings, $min_calories, $max_calories, $min_carbs, $max_carbs, $min_protein, $max_protein, $min_fat, $max_fat, $min_sugar, $max_sugar, $min_fiber, $max_fiber, $min_folate, $max_folate, $min_folic_acid, $max_folic_acid, $min_iodine, $max_iodine, $min_iron, $max_iron, $min_zinc, $max_zinc, $min_magnesium, $max_magnesium, $min_manganese, $max_manganese, $min_phosphorus, $max_phosphorus, $min_potassium, $max_potassium, $min_sodium, $max_sodium, $min_selenium, $max_selenium, $min_copper, $max_copper, $min_calcium, $max_calcium, $min_choline, $max_choline, $min_cholesterol, $max_cholesterol, $min_fluoride, $max_fluoride, $min_alcohol, $max_alcohol, $min_caffeine, $max_caffeine, $min_saturated_fat, $max_saturated_fat, $min_vitamin_a, $max_vitamin_a, $min_vitamin_c, $max_vitamin_c, $min_vitamin_d, $max_vitamin_d, $min_vitamin_e, $max_vitamin_e, $min_vitamin_k, $max_vitamin_k, $min_vitamin_b1, $max_vitamin_b1, $min_vitamin_b2, $max_vitamin_b2, $min_vitamin_b3, $max_vitamin_b3, $min_vitamin_b5, $max_vitamin_b5, $min_vitamin_b6, $max_vitamin_b6, $min_vitamin_b12, $max_vitamin_b12, $sort, $sort_direction, $offset, $number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchRecipesAPI200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchRecipesAPI200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchRecipesAPI200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchRecipesAPI200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchRecipesAPI200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchRecipesAPIAsync
     *
     * Search Recipes API
     *
     * @param  string $query The search query. (optional)
     * @param  string $cuisines The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)
     * @param  string $exclude_cuisines The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)
     * @param  string $meal_type The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
     * @param  string $diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
     * @param  string $intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
     * @param  string $equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param  bool $fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param  bool $add_recipe_information If set to true, you get more information about the recipes returned. (optional)
     * @param  int $max_time The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param  int $min_servings The minimum amount of servings the recipe is for. (optional)
     * @param  int $max_servings The maximum amount of servings the recipe is for. (optional)
     * @param  float $min_calories The minimum amount of calories the recipe must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the recipe can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the recipe must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the recipe can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the recipe must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the recipe can have per serving. (optional)
     * @param  float $min_sugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
     * @param  float $max_sugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
     * @param  float $min_fiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
     * @param  float $max_fiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
     * @param  float $min_folate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
     * @param  float $min_folic_acid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folic_acid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
     * @param  float $max_iodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
     * @param  float $max_iron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
     * @param  float $min_zinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
     * @param  float $max_zinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
     * @param  float $min_magnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_magnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_manganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
     * @param  float $max_manganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
     * @param  float $min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
     * @param  float $max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
     * @param  float $min_potassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_potassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_sodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_sodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_selenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
     * @param  float $max_selenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
     * @param  float $min_copper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
     * @param  float $max_copper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
     * @param  float $min_calcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_calcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_choline The minimum amount of choline in milligrams the recipe must have per serving. (optional)
     * @param  float $max_choline The maximum amount of choline in milligrams the recipe can have per serving. (optional)
     * @param  float $min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
     * @param  float $max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
     * @param  float $min_fluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
     * @param  float $max_fluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
     * @param  float $min_alcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
     * @param  float $max_alcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
     * @param  float $min_saturated_fat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
     * @param  float $max_saturated_fat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
     * @param  float $max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
     * @param  float $min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
     * @param  string $sort The strategy to sort recipes by. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of recipes to skip, between 0 and 900. (optional)
     * @param  int $number The number of recipes, between 1 and 100. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRecipesAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchRecipesAPIAsync($query = null, $cuisines = null, $exclude_cuisines = null, $meal_type = null, $diet = null, $intolerances = null, $equipment = null, $include_ingredients = null, $exclude_ingredients = null, $fill_ingredients = null, $add_recipe_information = null, $max_time = null, $min_servings = null, $max_servings = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_sugar = null, $max_sugar = null, $min_fiber = null, $max_fiber = null, $min_folate = null, $max_folate = null, $min_folic_acid = null, $max_folic_acid = null, $min_iodine = null, $max_iodine = null, $min_iron = null, $max_iron = null, $min_zinc = null, $max_zinc = null, $min_magnesium = null, $max_magnesium = null, $min_manganese = null, $max_manganese = null, $min_phosphorus = null, $max_phosphorus = null, $min_potassium = null, $max_potassium = null, $min_sodium = null, $max_sodium = null, $min_selenium = null, $max_selenium = null, $min_copper = null, $max_copper = null, $min_calcium = null, $max_calcium = null, $min_choline = null, $max_choline = null, $min_cholesterol = null, $max_cholesterol = null, $min_fluoride = null, $max_fluoride = null, $min_alcohol = null, $max_alcohol = null, $min_caffeine = null, $max_caffeine = null, $min_saturated_fat = null, $max_saturated_fat = null, $min_vitamin_a = null, $max_vitamin_a = null, $min_vitamin_c = null, $max_vitamin_c = null, $min_vitamin_d = null, $max_vitamin_d = null, $min_vitamin_e = null, $max_vitamin_e = null, $min_vitamin_k = null, $max_vitamin_k = null, $min_vitamin_b1 = null, $max_vitamin_b1 = null, $min_vitamin_b2 = null, $max_vitamin_b2 = null, $min_vitamin_b3 = null, $max_vitamin_b3 = null, $min_vitamin_b5 = null, $max_vitamin_b5 = null, $min_vitamin_b6 = null, $max_vitamin_b6 = null, $min_vitamin_b12 = null, $max_vitamin_b12 = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchRecipesAPI'][0])
    {
        return $this->searchRecipesAPIAsyncWithHttpInfo($query, $cuisines, $exclude_cuisines, $meal_type, $diet, $intolerances, $equipment, $include_ingredients, $exclude_ingredients, $fill_ingredients, $add_recipe_information, $max_time, $min_servings, $max_servings, $min_calories, $max_calories, $min_carbs, $max_carbs, $min_protein, $max_protein, $min_fat, $max_fat, $min_sugar, $max_sugar, $min_fiber, $max_fiber, $min_folate, $max_folate, $min_folic_acid, $max_folic_acid, $min_iodine, $max_iodine, $min_iron, $max_iron, $min_zinc, $max_zinc, $min_magnesium, $max_magnesium, $min_manganese, $max_manganese, $min_phosphorus, $max_phosphorus, $min_potassium, $max_potassium, $min_sodium, $max_sodium, $min_selenium, $max_selenium, $min_copper, $max_copper, $min_calcium, $max_calcium, $min_choline, $max_choline, $min_cholesterol, $max_cholesterol, $min_fluoride, $max_fluoride, $min_alcohol, $max_alcohol, $min_caffeine, $max_caffeine, $min_saturated_fat, $max_saturated_fat, $min_vitamin_a, $max_vitamin_a, $min_vitamin_c, $max_vitamin_c, $min_vitamin_d, $max_vitamin_d, $min_vitamin_e, $max_vitamin_e, $min_vitamin_k, $max_vitamin_k, $min_vitamin_b1, $max_vitamin_b1, $min_vitamin_b2, $max_vitamin_b2, $min_vitamin_b3, $max_vitamin_b3, $min_vitamin_b5, $max_vitamin_b5, $min_vitamin_b6, $max_vitamin_b6, $min_vitamin_b12, $max_vitamin_b12, $sort, $sort_direction, $offset, $number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchRecipesAPIAsyncWithHttpInfo
     *
     * Search Recipes API
     *
     * @param  string $query The search query. (optional)
     * @param  string $cuisines The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)
     * @param  string $exclude_cuisines The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)
     * @param  string $meal_type The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
     * @param  string $diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
     * @param  string $intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
     * @param  string $equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param  bool $fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param  bool $add_recipe_information If set to true, you get more information about the recipes returned. (optional)
     * @param  int $max_time The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param  int $min_servings The minimum amount of servings the recipe is for. (optional)
     * @param  int $max_servings The maximum amount of servings the recipe is for. (optional)
     * @param  float $min_calories The minimum amount of calories the recipe must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the recipe can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the recipe must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the recipe can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the recipe must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the recipe can have per serving. (optional)
     * @param  float $min_sugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
     * @param  float $max_sugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
     * @param  float $min_fiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
     * @param  float $max_fiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
     * @param  float $min_folate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
     * @param  float $min_folic_acid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folic_acid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
     * @param  float $max_iodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
     * @param  float $max_iron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
     * @param  float $min_zinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
     * @param  float $max_zinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
     * @param  float $min_magnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_magnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_manganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
     * @param  float $max_manganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
     * @param  float $min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
     * @param  float $max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
     * @param  float $min_potassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_potassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_sodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_sodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_selenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
     * @param  float $max_selenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
     * @param  float $min_copper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
     * @param  float $max_copper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
     * @param  float $min_calcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_calcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_choline The minimum amount of choline in milligrams the recipe must have per serving. (optional)
     * @param  float $max_choline The maximum amount of choline in milligrams the recipe can have per serving. (optional)
     * @param  float $min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
     * @param  float $max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
     * @param  float $min_fluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
     * @param  float $max_fluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
     * @param  float $min_alcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
     * @param  float $max_alcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
     * @param  float $min_saturated_fat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
     * @param  float $max_saturated_fat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
     * @param  float $max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
     * @param  float $min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
     * @param  string $sort The strategy to sort recipes by. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of recipes to skip, between 0 and 900. (optional)
     * @param  int $number The number of recipes, between 1 and 100. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRecipesAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchRecipesAPIAsyncWithHttpInfo($query = null, $cuisines = null, $exclude_cuisines = null, $meal_type = null, $diet = null, $intolerances = null, $equipment = null, $include_ingredients = null, $exclude_ingredients = null, $fill_ingredients = null, $add_recipe_information = null, $max_time = null, $min_servings = null, $max_servings = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_sugar = null, $max_sugar = null, $min_fiber = null, $max_fiber = null, $min_folate = null, $max_folate = null, $min_folic_acid = null, $max_folic_acid = null, $min_iodine = null, $max_iodine = null, $min_iron = null, $max_iron = null, $min_zinc = null, $max_zinc = null, $min_magnesium = null, $max_magnesium = null, $min_manganese = null, $max_manganese = null, $min_phosphorus = null, $max_phosphorus = null, $min_potassium = null, $max_potassium = null, $min_sodium = null, $max_sodium = null, $min_selenium = null, $max_selenium = null, $min_copper = null, $max_copper = null, $min_calcium = null, $max_calcium = null, $min_choline = null, $max_choline = null, $min_cholesterol = null, $max_cholesterol = null, $min_fluoride = null, $max_fluoride = null, $min_alcohol = null, $max_alcohol = null, $min_caffeine = null, $max_caffeine = null, $min_saturated_fat = null, $max_saturated_fat = null, $min_vitamin_a = null, $max_vitamin_a = null, $min_vitamin_c = null, $max_vitamin_c = null, $min_vitamin_d = null, $max_vitamin_d = null, $min_vitamin_e = null, $max_vitamin_e = null, $min_vitamin_k = null, $max_vitamin_k = null, $min_vitamin_b1 = null, $max_vitamin_b1 = null, $min_vitamin_b2 = null, $max_vitamin_b2 = null, $min_vitamin_b3 = null, $max_vitamin_b3 = null, $min_vitamin_b5 = null, $max_vitamin_b5 = null, $min_vitamin_b6 = null, $max_vitamin_b6 = null, $min_vitamin_b12 = null, $max_vitamin_b12 = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchRecipesAPI'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchRecipesAPI200Response';
        $request = $this->searchRecipesAPIRequest($query, $cuisines, $exclude_cuisines, $meal_type, $diet, $intolerances, $equipment, $include_ingredients, $exclude_ingredients, $fill_ingredients, $add_recipe_information, $max_time, $min_servings, $max_servings, $min_calories, $max_calories, $min_carbs, $max_carbs, $min_protein, $max_protein, $min_fat, $max_fat, $min_sugar, $max_sugar, $min_fiber, $max_fiber, $min_folate, $max_folate, $min_folic_acid, $max_folic_acid, $min_iodine, $max_iodine, $min_iron, $max_iron, $min_zinc, $max_zinc, $min_magnesium, $max_magnesium, $min_manganese, $max_manganese, $min_phosphorus, $max_phosphorus, $min_potassium, $max_potassium, $min_sodium, $max_sodium, $min_selenium, $max_selenium, $min_copper, $max_copper, $min_calcium, $max_calcium, $min_choline, $max_choline, $min_cholesterol, $max_cholesterol, $min_fluoride, $max_fluoride, $min_alcohol, $max_alcohol, $min_caffeine, $max_caffeine, $min_saturated_fat, $max_saturated_fat, $min_vitamin_a, $max_vitamin_a, $min_vitamin_c, $max_vitamin_c, $min_vitamin_d, $max_vitamin_d, $min_vitamin_e, $max_vitamin_e, $min_vitamin_k, $max_vitamin_k, $min_vitamin_b1, $max_vitamin_b1, $min_vitamin_b2, $max_vitamin_b2, $min_vitamin_b3, $max_vitamin_b3, $min_vitamin_b5, $max_vitamin_b5, $min_vitamin_b6, $max_vitamin_b6, $min_vitamin_b12, $max_vitamin_b12, $sort, $sort_direction, $offset, $number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchRecipesAPI'
     *
     * @param  string $query The search query. (optional)
     * @param  string $cuisines The cuisine(s) of the recipes. One or more, comma-separated (will be interpreted as &#39;OR&#39;). (optional)
     * @param  string $exclude_cuisines The cuisine(s) the recipes must not match. One or more, comma-separated (will be interpreted as &#39;AND&#39;). (optional)
     * @param  string $meal_type The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
     * @param  string $diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
     * @param  string $intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
     * @param  string $equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
     * @param  string $include_ingredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param  string $exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param  bool $fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param  bool $add_recipe_information If set to true, you get more information about the recipes returned. (optional)
     * @param  int $max_time The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param  int $min_servings The minimum amount of servings the recipe is for. (optional)
     * @param  int $max_servings The maximum amount of servings the recipe is for. (optional)
     * @param  float $min_calories The minimum amount of calories the recipe must have per serving. (optional)
     * @param  float $max_calories The maximum amount of calories the recipe can have per serving. (optional)
     * @param  float $min_carbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
     * @param  float $max_carbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
     * @param  float $min_protein The minimum amount of protein in grams the recipe must have per serving. (optional)
     * @param  float $max_protein The maximum amount of protein in grams the recipe can have per serving. (optional)
     * @param  float $min_fat The minimum amount of fat in grams the recipe must have per serving. (optional)
     * @param  float $max_fat The maximum amount of fat in grams the recipe can have per serving. (optional)
     * @param  float $min_sugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
     * @param  float $max_sugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
     * @param  float $min_fiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
     * @param  float $max_fiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
     * @param  float $min_folate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
     * @param  float $min_folic_acid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
     * @param  float $max_folic_acid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
     * @param  float $max_iodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
     * @param  float $min_iron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
     * @param  float $max_iron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
     * @param  float $min_zinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
     * @param  float $max_zinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
     * @param  float $min_magnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_magnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_manganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
     * @param  float $max_manganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
     * @param  float $min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
     * @param  float $max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
     * @param  float $min_potassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_potassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_sodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_sodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_selenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
     * @param  float $max_selenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
     * @param  float $min_copper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
     * @param  float $max_copper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
     * @param  float $min_calcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
     * @param  float $max_calcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
     * @param  float $min_choline The minimum amount of choline in milligrams the recipe must have per serving. (optional)
     * @param  float $max_choline The maximum amount of choline in milligrams the recipe can have per serving. (optional)
     * @param  float $min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
     * @param  float $max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
     * @param  float $min_fluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
     * @param  float $max_fluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
     * @param  float $min_alcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
     * @param  float $max_alcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
     * @param  float $min_caffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
     * @param  float $max_caffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
     * @param  float $min_saturated_fat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
     * @param  float $max_saturated_fat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
     * @param  float $max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
     * @param  float $min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
     * @param  float $max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
     * @param  float $min_vitamin_b12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
     * @param  float $max_vitamin_b12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
     * @param  string $sort The strategy to sort recipes by. (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of recipes to skip, between 0 and 900. (optional)
     * @param  int $number The number of recipes, between 1 and 100. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRecipesAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchRecipesAPIRequest($query = null, $cuisines = null, $exclude_cuisines = null, $meal_type = null, $diet = null, $intolerances = null, $equipment = null, $include_ingredients = null, $exclude_ingredients = null, $fill_ingredients = null, $add_recipe_information = null, $max_time = null, $min_servings = null, $max_servings = null, $min_calories = null, $max_calories = null, $min_carbs = null, $max_carbs = null, $min_protein = null, $max_protein = null, $min_fat = null, $max_fat = null, $min_sugar = null, $max_sugar = null, $min_fiber = null, $max_fiber = null, $min_folate = null, $max_folate = null, $min_folic_acid = null, $max_folic_acid = null, $min_iodine = null, $max_iodine = null, $min_iron = null, $max_iron = null, $min_zinc = null, $max_zinc = null, $min_magnesium = null, $max_magnesium = null, $min_manganese = null, $max_manganese = null, $min_phosphorus = null, $max_phosphorus = null, $min_potassium = null, $max_potassium = null, $min_sodium = null, $max_sodium = null, $min_selenium = null, $max_selenium = null, $min_copper = null, $max_copper = null, $min_calcium = null, $max_calcium = null, $min_choline = null, $max_choline = null, $min_cholesterol = null, $max_cholesterol = null, $min_fluoride = null, $max_fluoride = null, $min_alcohol = null, $max_alcohol = null, $min_caffeine = null, $max_caffeine = null, $min_saturated_fat = null, $max_saturated_fat = null, $min_vitamin_a = null, $max_vitamin_a = null, $min_vitamin_c = null, $max_vitamin_c = null, $min_vitamin_d = null, $max_vitamin_d = null, $min_vitamin_e = null, $max_vitamin_e = null, $min_vitamin_k = null, $max_vitamin_k = null, $min_vitamin_b1 = null, $max_vitamin_b1 = null, $min_vitamin_b2 = null, $max_vitamin_b2 = null, $min_vitamin_b3 = null, $max_vitamin_b3 = null, $min_vitamin_b5 = null, $max_vitamin_b5 = null, $min_vitamin_b6 = null, $max_vitamin_b6 = null, $min_vitamin_b12 = null, $max_vitamin_b12 = null, $sort = null, $sort_direction = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchRecipesAPI'][0])
    {

        if ($query !== null && strlen($query) > 300) {
            throw new \InvalidArgumentException('invalid length for "$query" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 300.');
        }
        if ($query !== null && !preg_match("/./", $query)) {
            throw new \InvalidArgumentException("invalid value for \"query\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($cuisines !== null && strlen($cuisines) > 300) {
            throw new \InvalidArgumentException('invalid length for "$cuisines" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 300.');
        }
        if ($cuisines !== null && !preg_match("/./", $cuisines)) {
            throw new \InvalidArgumentException("invalid value for \"cuisines\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($exclude_cuisines !== null && strlen($exclude_cuisines) > 300) {
            throw new \InvalidArgumentException('invalid length for "$exclude_cuisines" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 300.');
        }
        if ($exclude_cuisines !== null && !preg_match("/./", $exclude_cuisines)) {
            throw new \InvalidArgumentException("invalid value for \"exclude_cuisines\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($meal_type !== null && strlen($meal_type) > 30) {
            throw new \InvalidArgumentException('invalid length for "$meal_type" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 30.');
        }
        if ($meal_type !== null && !preg_match("/./", $meal_type)) {
            throw new \InvalidArgumentException("invalid value for \"meal_type\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($diet !== null && strlen($diet) > 30) {
            throw new \InvalidArgumentException('invalid length for "$diet" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 30.');
        }
        if ($diet !== null && !preg_match("/./", $diet)) {
            throw new \InvalidArgumentException("invalid value for \"diet\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($intolerances !== null && strlen($intolerances) > 300) {
            throw new \InvalidArgumentException('invalid length for "$intolerances" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 300.');
        }
        if ($intolerances !== null && !preg_match("/./", $intolerances)) {
            throw new \InvalidArgumentException("invalid value for \"intolerances\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($equipment !== null && strlen($equipment) > 300) {
            throw new \InvalidArgumentException('invalid length for "$equipment" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 300.');
        }
        if ($equipment !== null && !preg_match("/./", $equipment)) {
            throw new \InvalidArgumentException("invalid value for \"equipment\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($include_ingredients !== null && strlen($include_ingredients) > 300) {
            throw new \InvalidArgumentException('invalid length for "$include_ingredients" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 300.');
        }
        if ($include_ingredients !== null && !preg_match("/./", $include_ingredients)) {
            throw new \InvalidArgumentException("invalid value for \"include_ingredients\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($exclude_ingredients !== null && strlen($exclude_ingredients) > 300) {
            throw new \InvalidArgumentException('invalid length for "$exclude_ingredients" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 300.');
        }
        if ($exclude_ingredients !== null && !preg_match("/./", $exclude_ingredients)) {
            throw new \InvalidArgumentException("invalid value for \"exclude_ingredients\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        


        if ($max_time !== null && $max_time > 10000) {
            throw new \InvalidArgumentException('invalid value for "$max_time" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 10000.');
        }
        if ($max_time !== null && $max_time < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_time" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_servings !== null && $min_servings > 100) {
            throw new \InvalidArgumentException('invalid value for "$min_servings" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 100.');
        }
        if ($min_servings !== null && $min_servings < 1) {
            throw new \InvalidArgumentException('invalid value for "$min_servings" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 1.');
        }
        
        if ($max_servings !== null && $max_servings > 100) {
            throw new \InvalidArgumentException('invalid value for "$max_servings" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 100.');
        }
        if ($max_servings !== null && $max_servings < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_servings" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 1.');
        }
        
        if ($min_calories !== null && $min_calories > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_calories" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_calories !== null && $min_calories < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_calories" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_calories !== null && $max_calories > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_calories" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_calories !== null && $max_calories < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_calories" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_carbs !== null && $min_carbs > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_carbs" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_carbs !== null && $min_carbs < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_carbs" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_carbs !== null && $max_carbs > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_carbs" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_carbs !== null && $max_carbs < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_carbs" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_protein !== null && $min_protein > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_protein" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_protein !== null && $min_protein < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_protein" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_protein !== null && $max_protein > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_protein" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_protein !== null && $max_protein < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_protein" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_fat !== null && $min_fat > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_fat" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_fat !== null && $min_fat < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_fat" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_fat !== null && $max_fat > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_fat" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_fat !== null && $max_fat < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_fat" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_sugar !== null && $min_sugar > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_sugar" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_sugar !== null && $min_sugar < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_sugar" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_sugar !== null && $max_sugar > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_sugar" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_sugar !== null && $max_sugar < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_sugar" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_fiber !== null && $min_fiber > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_fiber" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_fiber !== null && $min_fiber < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_fiber" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_fiber !== null && $max_fiber > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_fiber" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_fiber !== null && $max_fiber < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_fiber" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_folate !== null && $min_folate > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_folate" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_folate !== null && $min_folate < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_folate" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_folate !== null && $max_folate > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_folate" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_folate !== null && $max_folate < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_folate" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_folic_acid !== null && $min_folic_acid > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_folic_acid" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_folic_acid !== null && $min_folic_acid < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_folic_acid" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_folic_acid !== null && $max_folic_acid > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_folic_acid" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_folic_acid !== null && $max_folic_acid < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_folic_acid" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_iodine !== null && $min_iodine > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_iodine" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_iodine !== null && $min_iodine < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_iodine" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_iodine !== null && $max_iodine > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_iodine" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_iodine !== null && $max_iodine < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_iodine" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_iron !== null && $min_iron > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_iron" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_iron !== null && $min_iron < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_iron" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_iron !== null && $max_iron > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_iron" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_iron !== null && $max_iron < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_iron" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_zinc !== null && $min_zinc > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_zinc" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_zinc !== null && $min_zinc < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_zinc" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_zinc !== null && $max_zinc > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_zinc" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_zinc !== null && $max_zinc < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_zinc" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_magnesium !== null && $min_magnesium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_magnesium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_magnesium !== null && $min_magnesium < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_magnesium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_magnesium !== null && $max_magnesium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_magnesium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_magnesium !== null && $max_magnesium < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_magnesium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_manganese !== null && $min_manganese > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_manganese" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_manganese !== null && $min_manganese < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_manganese" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_manganese !== null && $max_manganese > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_manganese" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_manganese !== null && $max_manganese < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_manganese" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_phosphorus !== null && $min_phosphorus > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_phosphorus" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_phosphorus !== null && $min_phosphorus < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_phosphorus" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_phosphorus !== null && $max_phosphorus > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_phosphorus" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_phosphorus !== null && $max_phosphorus < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_phosphorus" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_potassium !== null && $min_potassium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_potassium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_potassium !== null && $min_potassium < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_potassium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_potassium !== null && $max_potassium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_potassium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_potassium !== null && $max_potassium < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_potassium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_sodium !== null && $min_sodium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_sodium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_sodium !== null && $min_sodium < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_sodium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_sodium !== null && $max_sodium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_sodium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_sodium !== null && $max_sodium < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_sodium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_selenium !== null && $min_selenium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_selenium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_selenium !== null && $min_selenium < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_selenium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_selenium !== null && $max_selenium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_selenium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_selenium !== null && $max_selenium < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_selenium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_copper !== null && $min_copper > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_copper" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_copper !== null && $min_copper < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_copper" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_copper !== null && $max_copper > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_copper" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_copper !== null && $max_copper < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_copper" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_calcium !== null && $min_calcium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_calcium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_calcium !== null && $min_calcium < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_calcium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_calcium !== null && $max_calcium > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_calcium" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_calcium !== null && $max_calcium < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_calcium" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_choline !== null && $min_choline > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_choline" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_choline !== null && $min_choline < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_choline" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_choline !== null && $max_choline > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_choline" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_choline !== null && $max_choline < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_choline" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_cholesterol !== null && $min_cholesterol > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_cholesterol" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_cholesterol !== null && $min_cholesterol < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_cholesterol" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_cholesterol !== null && $max_cholesterol > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_cholesterol" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_cholesterol !== null && $max_cholesterol < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_cholesterol" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_fluoride !== null && $min_fluoride > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_fluoride" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_fluoride !== null && $min_fluoride < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_fluoride" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_fluoride !== null && $max_fluoride > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_fluoride" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_fluoride !== null && $max_fluoride < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_fluoride" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_alcohol !== null && $min_alcohol > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_alcohol" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_alcohol !== null && $min_alcohol < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_alcohol" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_alcohol !== null && $max_alcohol > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_alcohol" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_alcohol !== null && $max_alcohol < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_alcohol" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_caffeine !== null && $min_caffeine > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_caffeine" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_caffeine !== null && $min_caffeine < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_caffeine" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_caffeine !== null && $max_caffeine > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_caffeine" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_caffeine !== null && $max_caffeine < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_caffeine" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_saturated_fat !== null && $min_saturated_fat > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_saturated_fat" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_saturated_fat !== null && $min_saturated_fat < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_saturated_fat" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_saturated_fat !== null && $max_saturated_fat > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_saturated_fat" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_saturated_fat !== null && $max_saturated_fat < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_saturated_fat" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_a !== null && $min_vitamin_a > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_a" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_a !== null && $min_vitamin_a < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_a" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_a !== null && $max_vitamin_a > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_a" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_a !== null && $max_vitamin_a < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_a" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_c !== null && $min_vitamin_c > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_c" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_c !== null && $min_vitamin_c < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_c" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_c !== null && $max_vitamin_c > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_c" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_c !== null && $max_vitamin_c < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_c" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_d !== null && $min_vitamin_d > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_d" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_d !== null && $min_vitamin_d < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_d" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_d !== null && $max_vitamin_d > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_d" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_d !== null && $max_vitamin_d < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_d" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_e !== null && $min_vitamin_e > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_e" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_e !== null && $min_vitamin_e < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_e" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_e !== null && $max_vitamin_e > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_e" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_e !== null && $max_vitamin_e < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_e" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_k !== null && $min_vitamin_k > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_k" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_k !== null && $min_vitamin_k < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_k" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_k !== null && $max_vitamin_k > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_k" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_k !== null && $max_vitamin_k < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_k" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_b1 !== null && $min_vitamin_b1 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b1" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_b1 !== null && $min_vitamin_b1 < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b1" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_b1 !== null && $max_vitamin_b1 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b1" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_b1 !== null && $max_vitamin_b1 < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b1" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_b2 !== null && $min_vitamin_b2 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b2" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_b2 !== null && $min_vitamin_b2 < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b2" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_b2 !== null && $max_vitamin_b2 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b2" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_b2 !== null && $max_vitamin_b2 < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b2" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_b3 !== null && $min_vitamin_b3 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b3" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_b3 !== null && $min_vitamin_b3 < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b3" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_b3 !== null && $max_vitamin_b3 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b3" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_b3 !== null && $max_vitamin_b3 < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b3" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_b5 !== null && $min_vitamin_b5 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b5" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_b5 !== null && $min_vitamin_b5 < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b5" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_b5 !== null && $max_vitamin_b5 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b5" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_b5 !== null && $max_vitamin_b5 < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b5" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_b6 !== null && $min_vitamin_b6 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b6" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_b6 !== null && $min_vitamin_b6 < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b6" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_b6 !== null && $max_vitamin_b6 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b6" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_b6 !== null && $max_vitamin_b6 < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b6" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_vitamin_b12 !== null && $min_vitamin_b12 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b12" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($min_vitamin_b12 !== null && $min_vitamin_b12 < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_vitamin_b12" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($max_vitamin_b12 !== null && $max_vitamin_b12 > 99999) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b12" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 99999.');
        }
        if ($max_vitamin_b12 !== null && $max_vitamin_b12 < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_vitamin_b12" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($sort !== null && strlen($sort) > 100) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 100.');
        }
        if ($sort !== null && !preg_match("/./", $sort)) {
            throw new \InvalidArgumentException("invalid value for \"sort\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($sort_direction !== null && strlen($sort_direction) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sort_direction" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 4.');
        }
        if ($sort_direction !== null && !preg_match("/./", $sort_direction)) {
            throw new \InvalidArgumentException("invalid value for \"sort_direction\" when calling FoodApi.searchRecipesAPI, must conform to the pattern /./.");
        }
        
        if ($offset !== null && $offset > 900) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 900.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 0.');
        }
        
        if ($number !== null && $number > 100) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling FoodApi.searchRecipesAPI, must be smaller than or equal to 100.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling FoodApi.searchRecipesAPI, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/search-recipes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cuisines,
            'cuisines', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_cuisines,
            'exclude-cuisines', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $meal_type,
            'meal-type', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $diet,
            'diet', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $intolerances,
            'intolerances', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $equipment,
            'equipment', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_ingredients,
            'include-ingredients', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_ingredients,
            'exclude-ingredients', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fill_ingredients,
            'fill-ingredients', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $add_recipe_information,
            'add-recipe-information', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_time,
            'max-time', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_servings,
            'min-servings', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_servings,
            'max-servings', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_calories,
            'min-calories', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_calories,
            'max-calories', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_carbs,
            'min-carbs', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_carbs,
            'max-carbs', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_protein,
            'min-protein', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_protein,
            'max-protein', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_fat,
            'min-fat', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_fat,
            'max-fat', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_sugar,
            'min-sugar', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_sugar,
            'max-sugar', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_fiber,
            'min-fiber', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_fiber,
            'max-fiber', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_folate,
            'min-folate', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_folate,
            'max-folate', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_folic_acid,
            'min-folic-acid', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_folic_acid,
            'max-folic-acid', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_iodine,
            'min-iodine', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_iodine,
            'max-iodine', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_iron,
            'min-iron', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_iron,
            'max-iron', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_zinc,
            'min-zinc', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_zinc,
            'max-zinc', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_magnesium,
            'min-magnesium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_magnesium,
            'max-magnesium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_manganese,
            'min-manganese', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_manganese,
            'max-manganese', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_phosphorus,
            'min-phosphorus', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_phosphorus,
            'max-phosphorus', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_potassium,
            'min-potassium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_potassium,
            'max-potassium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_sodium,
            'min-sodium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_sodium,
            'max-sodium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_selenium,
            'min-selenium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_selenium,
            'max-selenium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_copper,
            'min-copper', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_copper,
            'max-copper', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_calcium,
            'min-calcium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_calcium,
            'max-calcium', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_choline,
            'min-choline', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_choline,
            'max-choline', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_cholesterol,
            'min-cholesterol', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_cholesterol,
            'max-cholesterol', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_fluoride,
            'min-fluoride', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_fluoride,
            'max-fluoride', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_alcohol,
            'min-alcohol', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_alcohol,
            'max-alcohol', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_caffeine,
            'min-caffeine', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_caffeine,
            'max-caffeine', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_saturated_fat,
            'min-saturated-fat', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_saturated_fat,
            'max-saturated-fat', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_a,
            'min-vitamin-a', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_a,
            'max-vitamin-a', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_c,
            'min-vitamin-c', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_c,
            'max-vitamin-c', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_d,
            'min-vitamin-d', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_d,
            'max-vitamin-d', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_e,
            'min-vitamin-e', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_e,
            'max-vitamin-e', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_k,
            'min-vitamin-k', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_k,
            'max-vitamin-k', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_b1,
            'min-vitamin-b1', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_b1,
            'max-vitamin-b1', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_b2,
            'min-vitamin-b2', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_b2,
            'max-vitamin-b2', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_b3,
            'min-vitamin-b3', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_b3,
            'max-vitamin-b3', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_b5,
            'min-vitamin-b5', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_b5,
            'max-vitamin-b5', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_b6,
            'min-vitamin-b6', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_b6,
            'max-vitamin-b6', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_vitamin_b12,
            'min-vitamin-b12', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_vitamin_b12,
            'max-vitamin-b12', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_direction,
            'sort-direction', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchRestaurantsAPI
     *
     * Search Restaurants API
     *
     * @param  float $lat The latitude to search around. (required)
     * @param  float $lon The longitude to search around. (required)
     * @param  string $query The search query. (optional)
     * @param  int $distance The maximum distance of the restaurant in miles around the given location. (optional)
     * @param  float $budget The budget in USD for the meal. (optional)
     * @param  float $min_rating The minimum rating of the restaurants in range [0,5]. (optional)
     * @param  string $cuisine The cuisine that the restaurants should support. (optional)
     * @param  bool $is_open Whether the restaurants have to be open now. (optional)
     * @param  int $page The page of the results. (optional)
     * @param  string $sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRestaurantsAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchRestaurantsAPI200Response
     */
    public function searchRestaurantsAPI($lat, $lon, $query = null, $distance = null, $budget = null, $min_rating = null, $cuisine = null, $is_open = null, $page = null, $sort = null, string $contentType = self::contentTypes['searchRestaurantsAPI'][0])
    {
        list($response) = $this->searchRestaurantsAPIWithHttpInfo($lat, $lon, $query, $distance, $budget, $min_rating, $cuisine, $is_open, $page, $sort, $contentType);
        return $response;
    }

    /**
     * Operation searchRestaurantsAPIWithHttpInfo
     *
     * Search Restaurants API
     *
     * @param  float $lat The latitude to search around. (required)
     * @param  float $lon The longitude to search around. (required)
     * @param  string $query The search query. (optional)
     * @param  int $distance The maximum distance of the restaurant in miles around the given location. (optional)
     * @param  float $budget The budget in USD for the meal. (optional)
     * @param  float $min_rating The minimum rating of the restaurants in range [0,5]. (optional)
     * @param  string $cuisine The cuisine that the restaurants should support. (optional)
     * @param  bool $is_open Whether the restaurants have to be open now. (optional)
     * @param  int $page The page of the results. (optional)
     * @param  string $sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRestaurantsAPI'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchRestaurantsAPI200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchRestaurantsAPIWithHttpInfo($lat, $lon, $query = null, $distance = null, $budget = null, $min_rating = null, $cuisine = null, $is_open = null, $page = null, $sort = null, string $contentType = self::contentTypes['searchRestaurantsAPI'][0])
    {
        $request = $this->searchRestaurantsAPIRequest($lat, $lon, $query, $distance, $budget, $min_rating, $cuisine, $is_open, $page, $sort, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchRestaurantsAPI200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchRestaurantsAPI200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchRestaurantsAPI200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchRestaurantsAPI200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchRestaurantsAPI200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchRestaurantsAPIAsync
     *
     * Search Restaurants API
     *
     * @param  float $lat The latitude to search around. (required)
     * @param  float $lon The longitude to search around. (required)
     * @param  string $query The search query. (optional)
     * @param  int $distance The maximum distance of the restaurant in miles around the given location. (optional)
     * @param  float $budget The budget in USD for the meal. (optional)
     * @param  float $min_rating The minimum rating of the restaurants in range [0,5]. (optional)
     * @param  string $cuisine The cuisine that the restaurants should support. (optional)
     * @param  bool $is_open Whether the restaurants have to be open now. (optional)
     * @param  int $page The page of the results. (optional)
     * @param  string $sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRestaurantsAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchRestaurantsAPIAsync($lat, $lon, $query = null, $distance = null, $budget = null, $min_rating = null, $cuisine = null, $is_open = null, $page = null, $sort = null, string $contentType = self::contentTypes['searchRestaurantsAPI'][0])
    {
        return $this->searchRestaurantsAPIAsyncWithHttpInfo($lat, $lon, $query, $distance, $budget, $min_rating, $cuisine, $is_open, $page, $sort, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchRestaurantsAPIAsyncWithHttpInfo
     *
     * Search Restaurants API
     *
     * @param  float $lat The latitude to search around. (required)
     * @param  float $lon The longitude to search around. (required)
     * @param  string $query The search query. (optional)
     * @param  int $distance The maximum distance of the restaurant in miles around the given location. (optional)
     * @param  float $budget The budget in USD for the meal. (optional)
     * @param  float $min_rating The minimum rating of the restaurants in range [0,5]. (optional)
     * @param  string $cuisine The cuisine that the restaurants should support. (optional)
     * @param  bool $is_open Whether the restaurants have to be open now. (optional)
     * @param  int $page The page of the results. (optional)
     * @param  string $sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRestaurantsAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchRestaurantsAPIAsyncWithHttpInfo($lat, $lon, $query = null, $distance = null, $budget = null, $min_rating = null, $cuisine = null, $is_open = null, $page = null, $sort = null, string $contentType = self::contentTypes['searchRestaurantsAPI'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchRestaurantsAPI200Response';
        $request = $this->searchRestaurantsAPIRequest($lat, $lon, $query, $distance, $budget, $min_rating, $cuisine, $is_open, $page, $sort, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchRestaurantsAPI'
     *
     * @param  float $lat The latitude to search around. (required)
     * @param  float $lon The longitude to search around. (required)
     * @param  string $query The search query. (optional)
     * @param  int $distance The maximum distance of the restaurant in miles around the given location. (optional)
     * @param  float $budget The budget in USD for the meal. (optional)
     * @param  float $min_rating The minimum rating of the restaurants in range [0,5]. (optional)
     * @param  string $cuisine The cuisine that the restaurants should support. (optional)
     * @param  bool $is_open Whether the restaurants have to be open now. (optional)
     * @param  int $page The page of the results. (optional)
     * @param  string $sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchRestaurantsAPI'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchRestaurantsAPIRequest($lat, $lon, $query = null, $distance = null, $budget = null, $min_rating = null, $cuisine = null, $is_open = null, $page = null, $sort = null, string $contentType = self::contentTypes['searchRestaurantsAPI'][0])
    {

        // verify the required parameter 'lat' is set
        if ($lat === null || (is_array($lat) && count($lat) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lat when calling searchRestaurantsAPI'
            );
        }
        if ($lat > 999) {
            throw new \InvalidArgumentException('invalid value for "$lat" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 999.');
        }
        if ($lat < -999) {
            throw new \InvalidArgumentException('invalid value for "$lat" when calling FoodApi.searchRestaurantsAPI, must be bigger than or equal to -999.');
        }
        
        // verify the required parameter 'lon' is set
        if ($lon === null || (is_array($lon) && count($lon) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lon when calling searchRestaurantsAPI'
            );
        }
        if ($lon > 999) {
            throw new \InvalidArgumentException('invalid value for "$lon" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 999.');
        }
        if ($lon < -999) {
            throw new \InvalidArgumentException('invalid value for "$lon" when calling FoodApi.searchRestaurantsAPI, must be bigger than or equal to -999.');
        }
        
        if ($query !== null && strlen($query) > 300) {
            throw new \InvalidArgumentException('invalid length for "$query" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 300.');
        }
        if ($query !== null && !preg_match("/./", $query)) {
            throw new \InvalidArgumentException("invalid value for \"query\" when calling FoodApi.searchRestaurantsAPI, must conform to the pattern /./.");
        }
        
        if ($distance !== null && $distance > 10000) {
            throw new \InvalidArgumentException('invalid value for "$distance" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 10000.');
        }
        if ($distance !== null && $distance < 0) {
            throw new \InvalidArgumentException('invalid value for "$distance" when calling FoodApi.searchRestaurantsAPI, must be bigger than or equal to 0.');
        }
        
        if ($budget !== null && $budget > 9999) {
            throw new \InvalidArgumentException('invalid value for "$budget" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 9999.');
        }
        if ($budget !== null && $budget < 0) {
            throw new \InvalidArgumentException('invalid value for "$budget" when calling FoodApi.searchRestaurantsAPI, must be bigger than or equal to 0.');
        }
        
        if ($min_rating !== null && $min_rating > 5) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 5.');
        }
        if ($min_rating !== null && $min_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling FoodApi.searchRestaurantsAPI, must be bigger than or equal to 0.');
        }
        
        if ($cuisine !== null && strlen($cuisine) > 300) {
            throw new \InvalidArgumentException('invalid length for "$cuisine" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 300.');
        }
        if ($cuisine !== null && !preg_match("/./", $cuisine)) {
            throw new \InvalidArgumentException("invalid value for \"cuisine\" when calling FoodApi.searchRestaurantsAPI, must conform to the pattern /./.");
        }
        

        if ($page !== null && $page > 9999) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 9999.');
        }
        if ($page !== null && $page < 0) {
            throw new \InvalidArgumentException('invalid value for "$page" when calling FoodApi.searchRestaurantsAPI, must be bigger than or equal to 0.');
        }
        
        if ($sort !== null && strlen($sort) > 30) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling FoodApi.searchRestaurantsAPI, must be smaller than or equal to 30.');
        }
        if ($sort !== null && !preg_match("/./", $sort)) {
            throw new \InvalidArgumentException("invalid value for \"sort\" when calling FoodApi.searchRestaurantsAPI, must conform to the pattern /./.");
        }
        

        $resourcePath = '/search-restaurants';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lat,
            'lat', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $lon,
            'lon', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distance,
            'distance', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $budget,
            'budget', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_rating,
            'min-rating', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cuisine,
            'cuisine', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $is_open,
            'is-open', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
