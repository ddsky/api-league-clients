<?php
/**
 * HumorApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * HumorApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HumorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'generateNonsenseWord' => [
            'application/json',
        ],
        'randomJoke' => [
            'application/json',
        ],
        'randomMeme' => [
            'application/json',
        ],
        'searchGifs' => [
            'application/json',
        ],
        'searchJokes' => [
            'application/json',
        ],
        'searchMemes' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation generateNonsenseWord
     *
     * Generate Nonsense Word
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateNonsenseWord'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GenerateNonsenseWord200Response
     */
    public function generateNonsenseWord(string $contentType = self::contentTypes['generateNonsenseWord'][0])
    {
        list($response) = $this->generateNonsenseWordWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation generateNonsenseWordWithHttpInfo
     *
     * Generate Nonsense Word
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateNonsenseWord'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GenerateNonsenseWord200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function generateNonsenseWordWithHttpInfo(string $contentType = self::contentTypes['generateNonsenseWord'][0])
    {
        $request = $this->generateNonsenseWordRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GenerateNonsenseWord200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GenerateNonsenseWord200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GenerateNonsenseWord200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GenerateNonsenseWord200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GenerateNonsenseWord200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generateNonsenseWordAsync
     *
     * Generate Nonsense Word
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateNonsenseWord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateNonsenseWordAsync(string $contentType = self::contentTypes['generateNonsenseWord'][0])
    {
        return $this->generateNonsenseWordAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generateNonsenseWordAsyncWithHttpInfo
     *
     * Generate Nonsense Word
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateNonsenseWord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generateNonsenseWordAsyncWithHttpInfo(string $contentType = self::contentTypes['generateNonsenseWord'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GenerateNonsenseWord200Response';
        $request = $this->generateNonsenseWordRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generateNonsenseWord'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['generateNonsenseWord'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function generateNonsenseWordRequest(string $contentType = self::contentTypes['generateNonsenseWord'][0])
    {


        $resourcePath = '/generate-nonsense-word';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation randomJoke
     *
     * Random Joke
     *
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  int $max_length The maximum length of the joke in letters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomJoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchJokes200ResponseJokesInner
     */
    public function randomJoke($include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, string $contentType = self::contentTypes['randomJoke'][0])
    {
        list($response) = $this->randomJokeWithHttpInfo($include_tags, $exclude_tags, $min_rating, $max_length, $contentType);
        return $response;
    }

    /**
     * Operation randomJokeWithHttpInfo
     *
     * Random Joke
     *
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  int $max_length The maximum length of the joke in letters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomJoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchJokes200ResponseJokesInner, HTTP status code, HTTP response headers (array of strings)
     */
    public function randomJokeWithHttpInfo($include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, string $contentType = self::contentTypes['randomJoke'][0])
    {
        $request = $this->randomJokeRequest($include_tags, $exclude_tags, $min_rating, $max_length, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchJokes200ResponseJokesInner' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchJokes200ResponseJokesInner' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchJokes200ResponseJokesInner', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchJokes200ResponseJokesInner';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchJokes200ResponseJokesInner',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation randomJokeAsync
     *
     * Random Joke
     *
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  int $max_length The maximum length of the joke in letters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomJoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function randomJokeAsync($include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, string $contentType = self::contentTypes['randomJoke'][0])
    {
        return $this->randomJokeAsyncWithHttpInfo($include_tags, $exclude_tags, $min_rating, $max_length, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation randomJokeAsyncWithHttpInfo
     *
     * Random Joke
     *
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  int $max_length The maximum length of the joke in letters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomJoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function randomJokeAsyncWithHttpInfo($include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, string $contentType = self::contentTypes['randomJoke'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchJokes200ResponseJokesInner';
        $request = $this->randomJokeRequest($include_tags, $exclude_tags, $min_rating, $max_length, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'randomJoke'
     *
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  int $max_length The maximum length of the joke in letters. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomJoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function randomJokeRequest($include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, string $contentType = self::contentTypes['randomJoke'][0])
    {

        if ($include_tags !== null && strlen($include_tags) > 300) {
            throw new \InvalidArgumentException('invalid length for "$include_tags" when calling HumorApi.randomJoke, must be smaller than or equal to 300.');
        }
        if ($include_tags !== null && !preg_match("/./", $include_tags)) {
            throw new \InvalidArgumentException("invalid value for \"include_tags\" when calling HumorApi.randomJoke, must conform to the pattern /./.");
        }
        
        if ($exclude_tags !== null && strlen($exclude_tags) > 300) {
            throw new \InvalidArgumentException('invalid length for "$exclude_tags" when calling HumorApi.randomJoke, must be smaller than or equal to 300.');
        }
        if ($exclude_tags !== null && !preg_match("/./", $exclude_tags)) {
            throw new \InvalidArgumentException("invalid value for \"exclude_tags\" when calling HumorApi.randomJoke, must conform to the pattern /./.");
        }
        
        if ($min_rating !== null && $min_rating > 1) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling HumorApi.randomJoke, must be smaller than or equal to 1.');
        }
        if ($min_rating !== null && $min_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling HumorApi.randomJoke, must be bigger than or equal to 0.');
        }
        
        if ($max_length !== null && $max_length > 10000) {
            throw new \InvalidArgumentException('invalid value for "$max_length" when calling HumorApi.randomJoke, must be smaller than or equal to 10000.');
        }
        if ($max_length !== null && $max_length < 1) {
            throw new \InvalidArgumentException('invalid value for "$max_length" when calling HumorApi.randomJoke, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/retrieve-random-joke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_tags,
            'include-tags', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_tags,
            'exclude-tags', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_rating,
            'min-rating', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_length,
            'max-length', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation randomMeme
     *
     * Random Meme
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomMeme'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RandomMeme200Response
     */
    public function randomMeme($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, string $contentType = self::contentTypes['randomMeme'][0])
    {
        list($response) = $this->randomMemeWithHttpInfo($keywords, $keywords_in_image, $media_type, $min_rating, $max_age_days, $contentType);
        return $response;
    }

    /**
     * Operation randomMemeWithHttpInfo
     *
     * Random Meme
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomMeme'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RandomMeme200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function randomMemeWithHttpInfo($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, string $contentType = self::contentTypes['randomMeme'][0])
    {
        $request = $this->randomMemeRequest($keywords, $keywords_in_image, $media_type, $min_rating, $max_age_days, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RandomMeme200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RandomMeme200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RandomMeme200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RandomMeme200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RandomMeme200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation randomMemeAsync
     *
     * Random Meme
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomMeme'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function randomMemeAsync($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, string $contentType = self::contentTypes['randomMeme'][0])
    {
        return $this->randomMemeAsyncWithHttpInfo($keywords, $keywords_in_image, $media_type, $min_rating, $max_age_days, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation randomMemeAsyncWithHttpInfo
     *
     * Random Meme
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomMeme'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function randomMemeAsyncWithHttpInfo($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, string $contentType = self::contentTypes['randomMeme'][0])
    {
        $returnType = '\OpenAPI\Client\Model\RandomMeme200Response';
        $request = $this->randomMemeRequest($keywords, $keywords_in_image, $media_type, $min_rating, $max_age_days, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'randomMeme'
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['randomMeme'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function randomMemeRequest($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, string $contentType = self::contentTypes['randomMeme'][0])
    {

        if ($keywords !== null && strlen($keywords) > 300) {
            throw new \InvalidArgumentException('invalid length for "$keywords" when calling HumorApi.randomMeme, must be smaller than or equal to 300.');
        }
        if ($keywords !== null && !preg_match("/./", $keywords)) {
            throw new \InvalidArgumentException("invalid value for \"keywords\" when calling HumorApi.randomMeme, must conform to the pattern /./.");
        }
        

        if ($media_type !== null && strlen($media_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$media_type" when calling HumorApi.randomMeme, must be smaller than or equal to 10.');
        }
        if ($media_type !== null && !preg_match("/./", $media_type)) {
            throw new \InvalidArgumentException("invalid value for \"media_type\" when calling HumorApi.randomMeme, must conform to the pattern /./.");
        }
        
        if ($min_rating !== null && $min_rating > 1) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling HumorApi.randomMeme, must be smaller than or equal to 1.');
        }
        if ($min_rating !== null && $min_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling HumorApi.randomMeme, must be bigger than or equal to 0.');
        }
        
        if ($max_age_days !== null && $max_age_days > 1000) {
            throw new \InvalidArgumentException('invalid value for "$max_age_days" when calling HumorApi.randomMeme, must be smaller than or equal to 1000.');
        }
        if ($max_age_days !== null && $max_age_days < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_age_days" when calling HumorApi.randomMeme, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/retrieve-random-meme';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords,
            'keywords', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords_in_image,
            'keywords-in-image', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_type,
            'media-type', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_rating,
            'min-rating', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_days,
            'max-age-days', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchGifs
     *
     * Search Gifs
     *
     * @param  string $query The search query. (required)
     * @param  int $number The number of gifs to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGifs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchGifs200Response
     */
    public function searchGifs($query, $number = null, string $contentType = self::contentTypes['searchGifs'][0])
    {
        list($response) = $this->searchGifsWithHttpInfo($query, $number, $contentType);
        return $response;
    }

    /**
     * Operation searchGifsWithHttpInfo
     *
     * Search Gifs
     *
     * @param  string $query The search query. (required)
     * @param  int $number The number of gifs to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGifs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchGifs200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchGifsWithHttpInfo($query, $number = null, string $contentType = self::contentTypes['searchGifs'][0])
    {
        $request = $this->searchGifsRequest($query, $number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchGifs200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchGifs200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchGifs200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchGifs200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchGifs200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchGifsAsync
     *
     * Search Gifs
     *
     * @param  string $query The search query. (required)
     * @param  int $number The number of gifs to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGifs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchGifsAsync($query, $number = null, string $contentType = self::contentTypes['searchGifs'][0])
    {
        return $this->searchGifsAsyncWithHttpInfo($query, $number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchGifsAsyncWithHttpInfo
     *
     * Search Gifs
     *
     * @param  string $query The search query. (required)
     * @param  int $number The number of gifs to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGifs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchGifsAsyncWithHttpInfo($query, $number = null, string $contentType = self::contentTypes['searchGifs'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchGifs200Response';
        $request = $this->searchGifsRequest($query, $number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchGifs'
     *
     * @param  string $query The search query. (required)
     * @param  int $number The number of gifs to return in range [1,10] (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchGifs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchGifsRequest($query, $number = null, string $contentType = self::contentTypes['searchGifs'][0])
    {

        // verify the required parameter 'query' is set
        if ($query === null || (is_array($query) && count($query) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $query when calling searchGifs'
            );
        }
        if (strlen($query) > 300) {
            throw new \InvalidArgumentException('invalid length for "$query" when calling HumorApi.searchGifs, must be smaller than or equal to 300.');
        }
        if (!preg_match("/./", $query)) {
            throw new \InvalidArgumentException("invalid value for \"query\" when calling HumorApi.searchGifs, must conform to the pattern /./.");
        }
        
        if ($number !== null && $number > 10) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling HumorApi.searchGifs, must be smaller than or equal to 10.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling HumorApi.searchGifs, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/search-gifs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchJokes
     *
     * Search Jokes
     *
     * @param  string $keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  float $max_length The maximum length of the joke in letters. (optional)
     * @param  int $offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of jokes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchJokes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchJokes200Response
     */
    public function searchJokes($keywords = null, $include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchJokes'][0])
    {
        list($response) = $this->searchJokesWithHttpInfo($keywords, $include_tags, $exclude_tags, $min_rating, $max_length, $offset, $number, $contentType);
        return $response;
    }

    /**
     * Operation searchJokesWithHttpInfo
     *
     * Search Jokes
     *
     * @param  string $keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  float $max_length The maximum length of the joke in letters. (optional)
     * @param  int $offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of jokes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchJokes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchJokes200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchJokesWithHttpInfo($keywords = null, $include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchJokes'][0])
    {
        $request = $this->searchJokesRequest($keywords, $include_tags, $exclude_tags, $min_rating, $max_length, $offset, $number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchJokes200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchJokes200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchJokes200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchJokes200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchJokes200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchJokesAsync
     *
     * Search Jokes
     *
     * @param  string $keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  float $max_length The maximum length of the joke in letters. (optional)
     * @param  int $offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of jokes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchJokes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchJokesAsync($keywords = null, $include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchJokes'][0])
    {
        return $this->searchJokesAsyncWithHttpInfo($keywords, $include_tags, $exclude_tags, $min_rating, $max_length, $offset, $number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchJokesAsyncWithHttpInfo
     *
     * Search Jokes
     *
     * @param  string $keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  float $max_length The maximum length of the joke in letters. (optional)
     * @param  int $offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of jokes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchJokes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchJokesAsyncWithHttpInfo($keywords = null, $include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchJokes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchJokes200Response';
        $request = $this->searchJokesRequest($keywords, $include_tags, $exclude_tags, $min_rating, $max_length, $offset, $number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchJokes'
     *
     * @param  string $keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param  string $include_tags A comma-separated list of tags the jokes should have. (optional)
     * @param  string $exclude_tags A comma-separated list of tags the jokes must not have. (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param  float $max_length The maximum length of the joke in letters. (optional)
     * @param  int $offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of jokes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchJokes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchJokesRequest($keywords = null, $include_tags = null, $exclude_tags = null, $min_rating = null, $max_length = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchJokes'][0])
    {

        if ($keywords !== null && strlen($keywords) > 300) {
            throw new \InvalidArgumentException('invalid length for "$keywords" when calling HumorApi.searchJokes, must be smaller than or equal to 300.');
        }
        if ($keywords !== null && !preg_match("/./", $keywords)) {
            throw new \InvalidArgumentException("invalid value for \"keywords\" when calling HumorApi.searchJokes, must conform to the pattern /./.");
        }
        
        if ($include_tags !== null && strlen($include_tags) > 300) {
            throw new \InvalidArgumentException('invalid length for "$include_tags" when calling HumorApi.searchJokes, must be smaller than or equal to 300.');
        }
        if ($include_tags !== null && !preg_match("/./", $include_tags)) {
            throw new \InvalidArgumentException("invalid value for \"include_tags\" when calling HumorApi.searchJokes, must conform to the pattern /./.");
        }
        
        if ($exclude_tags !== null && strlen($exclude_tags) > 300) {
            throw new \InvalidArgumentException('invalid length for "$exclude_tags" when calling HumorApi.searchJokes, must be smaller than or equal to 300.');
        }
        if ($exclude_tags !== null && !preg_match("/./", $exclude_tags)) {
            throw new \InvalidArgumentException("invalid value for \"exclude_tags\" when calling HumorApi.searchJokes, must conform to the pattern /./.");
        }
        
        if ($min_rating !== null && $min_rating > 1) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling HumorApi.searchJokes, must be smaller than or equal to 1.');
        }
        if ($min_rating !== null && $min_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling HumorApi.searchJokes, must be bigger than or equal to 0.');
        }
        
        if ($max_length !== null && $max_length > 1) {
            throw new \InvalidArgumentException('invalid value for "$max_length" when calling HumorApi.searchJokes, must be smaller than or equal to 1.');
        }
        if ($max_length !== null && $max_length < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_length" when calling HumorApi.searchJokes, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset > 1000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling HumorApi.searchJokes, must be smaller than or equal to 1000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling HumorApi.searchJokes, must be bigger than or equal to 0.');
        }
        
        if ($number !== null && $number > 10) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling HumorApi.searchJokes, must be smaller than or equal to 10.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling HumorApi.searchJokes, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/search-jokes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords,
            'keywords', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_tags,
            'include-tags', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $exclude_tags,
            'exclude-tags', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_rating,
            'min-rating', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_length,
            'max-length', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchMemes
     *
     * Search Memes
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  int $offset The number of memes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of memes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMemes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SearchMemes200Response
     */
    public function searchMemes($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchMemes'][0])
    {
        list($response) = $this->searchMemesWithHttpInfo($keywords, $keywords_in_image, $media_type, $min_rating, $max_age_days, $offset, $number, $contentType);
        return $response;
    }

    /**
     * Operation searchMemesWithHttpInfo
     *
     * Search Memes
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  int $offset The number of memes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of memes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMemes'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SearchMemes200Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchMemesWithHttpInfo($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchMemes'][0])
    {
        $request = $this->searchMemesRequest($keywords, $keywords_in_image, $media_type, $min_rating, $max_age_days, $offset, $number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SearchMemes200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SearchMemes200Response' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SearchMemes200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\SearchMemes200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SearchMemes200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchMemesAsync
     *
     * Search Memes
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  int $offset The number of memes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of memes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMemes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchMemesAsync($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchMemes'][0])
    {
        return $this->searchMemesAsyncWithHttpInfo($keywords, $keywords_in_image, $media_type, $min_rating, $max_age_days, $offset, $number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchMemesAsyncWithHttpInfo
     *
     * Search Memes
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  int $offset The number of memes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of memes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMemes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchMemesAsyncWithHttpInfo($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchMemes'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SearchMemes200Response';
        $request = $this->searchMemesRequest($keywords, $keywords_in_image, $media_type, $min_rating, $max_age_days, $offset, $number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchMemes'
     *
     * @param  string $keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param  bool $keywords_in_image Whether the keywords must occur in the image. (optional)
     * @param  string $media_type The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param  float $min_rating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param  int $max_age_days The maximum age of the meme in days. (optional)
     * @param  int $offset The number of memes to skip, between 0 and 1000. (optional)
     * @param  int $number The number of memes, between 1 and 10. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchMemes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchMemesRequest($keywords = null, $keywords_in_image = null, $media_type = null, $min_rating = null, $max_age_days = null, $offset = null, $number = null, string $contentType = self::contentTypes['searchMemes'][0])
    {

        if ($keywords !== null && strlen($keywords) > 300) {
            throw new \InvalidArgumentException('invalid length for "$keywords" when calling HumorApi.searchMemes, must be smaller than or equal to 300.');
        }
        if ($keywords !== null && !preg_match("/./", $keywords)) {
            throw new \InvalidArgumentException("invalid value for \"keywords\" when calling HumorApi.searchMemes, must conform to the pattern /./.");
        }
        

        if ($media_type !== null && strlen($media_type) > 10) {
            throw new \InvalidArgumentException('invalid length for "$media_type" when calling HumorApi.searchMemes, must be smaller than or equal to 10.');
        }
        if ($media_type !== null && !preg_match("/./", $media_type)) {
            throw new \InvalidArgumentException("invalid value for \"media_type\" when calling HumorApi.searchMemes, must conform to the pattern /./.");
        }
        
        if ($min_rating !== null && $min_rating > 1) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling HumorApi.searchMemes, must be smaller than or equal to 1.');
        }
        if ($min_rating !== null && $min_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling HumorApi.searchMemes, must be bigger than or equal to 0.');
        }
        
        if ($max_age_days !== null && $max_age_days > 10000) {
            throw new \InvalidArgumentException('invalid value for "$max_age_days" when calling HumorApi.searchMemes, must be smaller than or equal to 10000.');
        }
        if ($max_age_days !== null && $max_age_days < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_age_days" when calling HumorApi.searchMemes, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset > 1000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling HumorApi.searchMemes, must be smaller than or equal to 1000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling HumorApi.searchMemes, must be bigger than or equal to 0.');
        }
        
        if ($number !== null && $number > 10) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling HumorApi.searchMemes, must be smaller than or equal to 10.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling HumorApi.searchMemes, must be bigger than or equal to 1.');
        }
        

        $resourcePath = '/search-memes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords,
            'keywords', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $keywords_in_image,
            'keywords-in-image', // param base name
            'boolean', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $media_type,
            'media-type', // param base name
            'string', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_rating,
            'min-rating', // param base name
            'number', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_age_days,
            'max-age-days', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $number,
            'number', // param base name
            'integer', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
