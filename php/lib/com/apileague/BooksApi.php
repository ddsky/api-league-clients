<?php
/**
 * BooksApi
 * PHP version 7.3
 *
 * @category Class
 * @package  com.apileague.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.apileague.client\com.apileague;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.apileague.client\ApiException;
use com.apileague.client\Configuration;
use com.apileague.client\HeaderSelector;
use com.apileague.client\ObjectSerializer;

/**
 * BooksApi Class Doc Comment
 *
 * @category Class
 * @package  com.apileague.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class BooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation findSimilarBooks
     *
     * Find Similar Books
     *
     * @param  int $id The id of the book to which similar books should be found. (required)
     * @param  int $number The number of similar books to return in range [1,100] (optional)
     *
     * @throws \com.apileague.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.apileague.client\com.apileague.client.model\InlineResponse2001
     */
    public function findSimilarBooks($id, $number = null)
    {
        list($response) = $this->findSimilarBooksWithHttpInfo($id, $number);
        return $response;
    }

    /**
     * Operation findSimilarBooksWithHttpInfo
     *
     * Find Similar Books
     *
     * @param  int $id The id of the book to which similar books should be found. (required)
     * @param  int $number The number of similar books to return in range [1,100] (optional)
     *
     * @throws \com.apileague.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.apileague.client\com.apileague.client.model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function findSimilarBooksWithHttpInfo($id, $number = null)
    {
        $request = $this->findSimilarBooksRequest($id, $number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.apileague.client\com.apileague.client.model\InlineResponse2001' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.apileague.client\com.apileague.client.model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.apileague.client\com.apileague.client.model\InlineResponse2001';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.apileague.client\com.apileague.client.model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findSimilarBooksAsync
     *
     * Find Similar Books
     *
     * @param  int $id The id of the book to which similar books should be found. (required)
     * @param  int $number The number of similar books to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSimilarBooksAsync($id, $number = null)
    {
        return $this->findSimilarBooksAsyncWithHttpInfo($id, $number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findSimilarBooksAsyncWithHttpInfo
     *
     * Find Similar Books
     *
     * @param  int $id The id of the book to which similar books should be found. (required)
     * @param  int $number The number of similar books to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findSimilarBooksAsyncWithHttpInfo($id, $number = null)
    {
        $returnType = '\com.apileague.client\com.apileague.client.model\InlineResponse2001';
        $request = $this->findSimilarBooksRequest($id, $number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findSimilarBooks'
     *
     * @param  int $id The id of the book to which similar books should be found. (required)
     * @param  int $number The number of similar books to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function findSimilarBooksRequest($id, $number = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling findSimilarBooks'
            );
        }
        if ($id > 999999999) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling BooksApi.findSimilarBooks, must be smaller than or equal to 999999999.');
        }
        if ($id < 0) {
            throw new \InvalidArgumentException('invalid value for "$id" when calling BooksApi.findSimilarBooks, must be bigger than or equal to 0.');
        }

        if ($number !== null && $number > 100) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling BooksApi.findSimilarBooks, must be smaller than or equal to 100.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling BooksApi.findSimilarBooks, must be bigger than or equal to 1.');
        }


        $resourcePath = '/list-similar-books';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($number)) {
            $number = ObjectSerializer::serializeCollection($number, 'form', true);
        }
        if ($number !== null) {
            $queryParams['number'] = $number;
        }


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchBooks
     *
     * Search Books
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_publish_year The books must have been published after this year. (optional)
     * @param  int $latest_publish_year The books must have been published before this year. (optional)
     * @param  double $min_rating The minimum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  double $max_rating The maximum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  string $genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
     * @param  string $authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
     * @param  string $isbn Only the book matching the ISBN-13 will be returned (optional)
     * @param  string $oclc Only the book matching the OCLC will be returned (optional)
     * @param  string $sort The sorting criteria (publish-date or rating). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  bool $group_results Whether to group similar editions of the same book. (optional)
     * @param  int $offset The number of books to skip in range [0,1000] (optional)
     * @param  int $number The number of books to return in range [1,100] (optional)
     *
     * @throws \com.apileague.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.apileague.client\com.apileague.client.model\InlineResponse200
     */
    public function searchBooks($query = null, $earliest_publish_year = null, $latest_publish_year = null, $min_rating = null, $max_rating = null, $genres = null, $authors = null, $isbn = null, $oclc = null, $sort = null, $sort_direction = null, $group_results = null, $offset = null, $number = null)
    {
        list($response) = $this->searchBooksWithHttpInfo($query, $earliest_publish_year, $latest_publish_year, $min_rating, $max_rating, $genres, $authors, $isbn, $oclc, $sort, $sort_direction, $group_results, $offset, $number);
        return $response;
    }

    /**
     * Operation searchBooksWithHttpInfo
     *
     * Search Books
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_publish_year The books must have been published after this year. (optional)
     * @param  int $latest_publish_year The books must have been published before this year. (optional)
     * @param  double $min_rating The minimum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  double $max_rating The maximum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  string $genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
     * @param  string $authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
     * @param  string $isbn Only the book matching the ISBN-13 will be returned (optional)
     * @param  string $oclc Only the book matching the OCLC will be returned (optional)
     * @param  string $sort The sorting criteria (publish-date or rating). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  bool $group_results Whether to group similar editions of the same book. (optional)
     * @param  int $offset The number of books to skip in range [0,1000] (optional)
     * @param  int $number The number of books to return in range [1,100] (optional)
     *
     * @throws \com.apileague.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.apileague.client\com.apileague.client.model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchBooksWithHttpInfo($query = null, $earliest_publish_year = null, $latest_publish_year = null, $min_rating = null, $max_rating = null, $genres = null, $authors = null, $isbn = null, $oclc = null, $sort = null, $sort_direction = null, $group_results = null, $offset = null, $number = null)
    {
        $request = $this->searchBooksRequest($query, $earliest_publish_year, $latest_publish_year, $min_rating, $max_rating, $genres, $authors, $isbn, $oclc, $sort, $sort_direction, $group_results, $offset, $number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.apileague.client\com.apileague.client.model\InlineResponse200' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.apileague.client\com.apileague.client.model\InlineResponse200', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.apileague.client\com.apileague.client.model\InlineResponse200';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.apileague.client\com.apileague.client.model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchBooksAsync
     *
     * Search Books
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_publish_year The books must have been published after this year. (optional)
     * @param  int $latest_publish_year The books must have been published before this year. (optional)
     * @param  double $min_rating The minimum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  double $max_rating The maximum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  string $genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
     * @param  string $authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
     * @param  string $isbn Only the book matching the ISBN-13 will be returned (optional)
     * @param  string $oclc Only the book matching the OCLC will be returned (optional)
     * @param  string $sort The sorting criteria (publish-date or rating). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  bool $group_results Whether to group similar editions of the same book. (optional)
     * @param  int $offset The number of books to skip in range [0,1000] (optional)
     * @param  int $number The number of books to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchBooksAsync($query = null, $earliest_publish_year = null, $latest_publish_year = null, $min_rating = null, $max_rating = null, $genres = null, $authors = null, $isbn = null, $oclc = null, $sort = null, $sort_direction = null, $group_results = null, $offset = null, $number = null)
    {
        return $this->searchBooksAsyncWithHttpInfo($query, $earliest_publish_year, $latest_publish_year, $min_rating, $max_rating, $genres, $authors, $isbn, $oclc, $sort, $sort_direction, $group_results, $offset, $number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchBooksAsyncWithHttpInfo
     *
     * Search Books
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_publish_year The books must have been published after this year. (optional)
     * @param  int $latest_publish_year The books must have been published before this year. (optional)
     * @param  double $min_rating The minimum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  double $max_rating The maximum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  string $genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
     * @param  string $authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
     * @param  string $isbn Only the book matching the ISBN-13 will be returned (optional)
     * @param  string $oclc Only the book matching the OCLC will be returned (optional)
     * @param  string $sort The sorting criteria (publish-date or rating). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  bool $group_results Whether to group similar editions of the same book. (optional)
     * @param  int $offset The number of books to skip in range [0,1000] (optional)
     * @param  int $number The number of books to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchBooksAsyncWithHttpInfo($query = null, $earliest_publish_year = null, $latest_publish_year = null, $min_rating = null, $max_rating = null, $genres = null, $authors = null, $isbn = null, $oclc = null, $sort = null, $sort_direction = null, $group_results = null, $offset = null, $number = null)
    {
        $returnType = '\com.apileague.client\com.apileague.client.model\InlineResponse200';
        $request = $this->searchBooksRequest($query, $earliest_publish_year, $latest_publish_year, $min_rating, $max_rating, $genres, $authors, $isbn, $oclc, $sort, $sort_direction, $group_results, $offset, $number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchBooks'
     *
     * @param  string $query The search query. (optional)
     * @param  int $earliest_publish_year The books must have been published after this year. (optional)
     * @param  int $latest_publish_year The books must have been published before this year. (optional)
     * @param  double $min_rating The minimum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  double $max_rating The maximum rating the book must have gotten in the interval [0,1]. (optional)
     * @param  string $genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
     * @param  string $authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
     * @param  string $isbn Only the book matching the ISBN-13 will be returned (optional)
     * @param  string $oclc Only the book matching the OCLC will be returned (optional)
     * @param  string $sort The sorting criteria (publish-date or rating). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  bool $group_results Whether to group similar editions of the same book. (optional)
     * @param  int $offset The number of books to skip in range [0,1000] (optional)
     * @param  int $number The number of books to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchBooksRequest($query = null, $earliest_publish_year = null, $latest_publish_year = null, $min_rating = null, $max_rating = null, $genres = null, $authors = null, $isbn = null, $oclc = null, $sort = null, $sort_direction = null, $group_results = null, $offset = null, $number = null)
    {
        if ($query !== null && strlen($query) > 300) {
            throw new \InvalidArgumentException('invalid length for "$query" when calling BooksApi.searchBooks, must be smaller than or equal to 300.');
        }
        if ($query !== null && !preg_match("/./", $query)) {
            throw new \InvalidArgumentException("invalid value for \"query\" when calling BooksApi.searchBooks, must conform to the pattern /./.");
        }

        if ($earliest_publish_year !== null && $earliest_publish_year > 9999) {
            throw new \InvalidArgumentException('invalid value for "$earliest_publish_year" when calling BooksApi.searchBooks, must be smaller than or equal to 9999.');
        }
        if ($earliest_publish_year !== null && $earliest_publish_year < 0) {
            throw new \InvalidArgumentException('invalid value for "$earliest_publish_year" when calling BooksApi.searchBooks, must be bigger than or equal to 0.');
        }

        if ($latest_publish_year !== null && $latest_publish_year > 9999) {
            throw new \InvalidArgumentException('invalid value for "$latest_publish_year" when calling BooksApi.searchBooks, must be smaller than or equal to 9999.');
        }
        if ($latest_publish_year !== null && $latest_publish_year < 0) {
            throw new \InvalidArgumentException('invalid value for "$latest_publish_year" when calling BooksApi.searchBooks, must be bigger than or equal to 0.');
        }

        if ($min_rating !== null && $min_rating > 1) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling BooksApi.searchBooks, must be smaller than or equal to 1.');
        }
        if ($min_rating !== null && $min_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$min_rating" when calling BooksApi.searchBooks, must be bigger than or equal to 0.');
        }

        if ($max_rating !== null && $max_rating > 1) {
            throw new \InvalidArgumentException('invalid value for "$max_rating" when calling BooksApi.searchBooks, must be smaller than or equal to 1.');
        }
        if ($max_rating !== null && $max_rating < 0) {
            throw new \InvalidArgumentException('invalid value for "$max_rating" when calling BooksApi.searchBooks, must be bigger than or equal to 0.');
        }

        if ($genres !== null && strlen($genres) > 1000) {
            throw new \InvalidArgumentException('invalid length for "$genres" when calling BooksApi.searchBooks, must be smaller than or equal to 1000.');
        }
        if ($genres !== null && !preg_match("/./", $genres)) {
            throw new \InvalidArgumentException("invalid value for \"genres\" when calling BooksApi.searchBooks, must conform to the pattern /./.");
        }

        if ($authors !== null && strlen($authors) > 1000) {
            throw new \InvalidArgumentException('invalid length for "$authors" when calling BooksApi.searchBooks, must be smaller than or equal to 1000.');
        }
        if ($authors !== null && !preg_match("/./", $authors)) {
            throw new \InvalidArgumentException("invalid value for \"authors\" when calling BooksApi.searchBooks, must conform to the pattern /./.");
        }

        if ($isbn !== null && strlen($isbn) > 13) {
            throw new \InvalidArgumentException('invalid length for "$isbn" when calling BooksApi.searchBooks, must be smaller than or equal to 13.');
        }
        if ($isbn !== null && !preg_match("/./", $isbn)) {
            throw new \InvalidArgumentException("invalid value for \"isbn\" when calling BooksApi.searchBooks, must conform to the pattern /./.");
        }

        if ($oclc !== null && strlen($oclc) > 100) {
            throw new \InvalidArgumentException('invalid length for "$oclc" when calling BooksApi.searchBooks, must be smaller than or equal to 100.');
        }
        if ($oclc !== null && !preg_match("/./", $oclc)) {
            throw new \InvalidArgumentException("invalid value for \"oclc\" when calling BooksApi.searchBooks, must conform to the pattern /./.");
        }

        if ($sort !== null && strlen($sort) > 10000) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling BooksApi.searchBooks, must be smaller than or equal to 10000.');
        }
        if ($sort !== null && !preg_match("/./", $sort)) {
            throw new \InvalidArgumentException("invalid value for \"sort\" when calling BooksApi.searchBooks, must conform to the pattern /./.");
        }

        if ($sort_direction !== null && strlen($sort_direction) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sort_direction" when calling BooksApi.searchBooks, must be smaller than or equal to 4.');
        }
        if ($sort_direction !== null && !preg_match("/./", $sort_direction)) {
            throw new \InvalidArgumentException("invalid value for \"sort_direction\" when calling BooksApi.searchBooks, must conform to the pattern /./.");
        }

        if ($offset !== null && $offset > 1000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BooksApi.searchBooks, must be smaller than or equal to 1000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling BooksApi.searchBooks, must be bigger than or equal to 0.');
        }

        if ($number !== null && $number > 100) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling BooksApi.searchBooks, must be smaller than or equal to 100.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling BooksApi.searchBooks, must be bigger than or equal to 1.');
        }


        $resourcePath = '/search-books';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($query)) {
            $query = ObjectSerializer::serializeCollection($query, 'form', true);
        }
        if ($query !== null) {
            $queryParams['query'] = $query;
        }
        // query params
        if (is_array($earliest_publish_year)) {
            $earliest_publish_year = ObjectSerializer::serializeCollection($earliest_publish_year, 'form', true);
        }
        if ($earliest_publish_year !== null) {
            $queryParams['earliest-publish-year'] = $earliest_publish_year;
        }
        // query params
        if (is_array($latest_publish_year)) {
            $latest_publish_year = ObjectSerializer::serializeCollection($latest_publish_year, 'form', true);
        }
        if ($latest_publish_year !== null) {
            $queryParams['latest-publish-year'] = $latest_publish_year;
        }
        // query params
        if (is_array($min_rating)) {
            $min_rating = ObjectSerializer::serializeCollection($min_rating, 'form', true);
        }
        if ($min_rating !== null) {
            $queryParams['min-rating'] = $min_rating;
        }
        // query params
        if (is_array($max_rating)) {
            $max_rating = ObjectSerializer::serializeCollection($max_rating, 'form', true);
        }
        if ($max_rating !== null) {
            $queryParams['max-rating'] = $max_rating;
        }
        // query params
        if (is_array($genres)) {
            $genres = ObjectSerializer::serializeCollection($genres, 'form', true);
        }
        if ($genres !== null) {
            $queryParams['genres'] = $genres;
        }
        // query params
        if (is_array($authors)) {
            $authors = ObjectSerializer::serializeCollection($authors, 'form', true);
        }
        if ($authors !== null) {
            $queryParams['authors'] = $authors;
        }
        // query params
        if (is_array($isbn)) {
            $isbn = ObjectSerializer::serializeCollection($isbn, 'form', true);
        }
        if ($isbn !== null) {
            $queryParams['isbn'] = $isbn;
        }
        // query params
        if (is_array($oclc)) {
            $oclc = ObjectSerializer::serializeCollection($oclc, 'form', true);
        }
        if ($oclc !== null) {
            $queryParams['oclc'] = $oclc;
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'form', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = $sort;
        }
        // query params
        if (is_array($sort_direction)) {
            $sort_direction = ObjectSerializer::serializeCollection($sort_direction, 'form', true);
        }
        if ($sort_direction !== null) {
            $queryParams['sort-direction'] = $sort_direction;
        }
        // query params
        if (is_array($group_results)) {
            $group_results = ObjectSerializer::serializeCollection($group_results, 'form', true);
        }
        if ($group_results !== null) {
            $queryParams['group-results'] = $group_results;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, 'form', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($number)) {
            $number = ObjectSerializer::serializeCollection($number, 'form', true);
        }
        if ($number !== null) {
            $queryParams['number'] = $number;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
