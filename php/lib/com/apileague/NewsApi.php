<?php
/**
 * NewsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  com.apileague.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace com.apileague.client\com.apileague;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use com.apileague.client\ApiException;
use com.apileague.client\Configuration;
use com.apileague.client\HeaderSelector;
use com.apileague.client\ObjectSerializer;

/**
 * NewsApi Class Doc Comment
 *
 * @category Class
 * @package  com.apileague.client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class NewsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation extractNews
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \com.apileague.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.apileague.client\com.apileague.client.model\InlineResponse2003
     */
    public function extractNews($url, $analyze)
    {
        list($response) = $this->extractNewsWithHttpInfo($url, $analyze);
        return $response;
    }

    /**
     * Operation extractNewsWithHttpInfo
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \com.apileague.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.apileague.client\com.apileague.client.model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function extractNewsWithHttpInfo($url, $analyze)
    {
        $request = $this->extractNewsRequest($url, $analyze);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.apileague.client\com.apileague.client.model\InlineResponse2003' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.apileague.client\com.apileague.client.model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.apileague.client\com.apileague.client.model\InlineResponse2003';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.apileague.client\com.apileague.client.model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation extractNewsAsync
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractNewsAsync($url, $analyze)
    {
        return $this->extractNewsAsyncWithHttpInfo($url, $analyze)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation extractNewsAsyncWithHttpInfo
     *
     * Extract News
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function extractNewsAsyncWithHttpInfo($url, $analyze)
    {
        $returnType = '\com.apileague.client\com.apileague.client.model\InlineResponse2003';
        $request = $this->extractNewsRequest($url, $analyze);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'extractNews'
     *
     * @param  string $url The url of the news. (required)
     * @param  bool $analyze Whether to analyze the news (extract entities etc.) (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function extractNewsRequest($url, $analyze)
    {
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling extractNews'
            );
        }
        if (strlen($url) > 1000) {
            throw new \InvalidArgumentException('invalid length for "$url" when calling NewsApi.extractNews, must be smaller than or equal to 1000.');
        }
        if (!preg_match("/./", $url)) {
            throw new \InvalidArgumentException("invalid value for \"url\" when calling NewsApi.extractNews, must conform to the pattern /./.");
        }

        // verify the required parameter 'analyze' is set
        if ($analyze === null || (is_array($analyze) && count($analyze) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $analyze when calling extractNews'
            );
        }

        $resourcePath = '/extract-news';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($url)) {
            $url = ObjectSerializer::serializeCollection($url, 'form', true);
        }
        if ($url !== null) {
            $queryParams['url'] = $url;
        }
        // query params
        if (is_array($analyze)) {
            $analyze = ObjectSerializer::serializeCollection($analyze, 'form', true);
        }
        if ($analyze !== null) {
            $queryParams['analyze'] = $analyze;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchNews
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param  string $language The ISO 6391 language code of the news. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate. (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities (see semantic types). (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param  string $sort The sorting criteria (publish-time or sentiment). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of news to skip in range [0,10000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     *
     * @throws \com.apileague.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \com.apileague.client\com.apileague.client.model\InlineResponse2002
     */
    public function searchNews($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $sort = null, $sort_direction = null, $offset = null, $number = null)
    {
        list($response) = $this->searchNewsWithHttpInfo($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $sort, $sort_direction, $offset, $number);
        return $response;
    }

    /**
     * Operation searchNewsWithHttpInfo
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param  string $language The ISO 6391 language code of the news. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate. (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities (see semantic types). (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param  string $sort The sorting criteria (publish-time or sentiment). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of news to skip in range [0,10000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     *
     * @throws \com.apileague.client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \com.apileague.client\com.apileague.client.model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchNewsWithHttpInfo($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $sort = null, $sort_direction = null, $offset = null, $number = null)
    {
        $request = $this->searchNewsRequest($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $sort, $sort_direction, $offset, $number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\com.apileague.client\com.apileague.client.model\InlineResponse2002' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\com.apileague.client\com.apileague.client.model\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\com.apileague.client\com.apileague.client.model\InlineResponse2002';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\com.apileague.client\com.apileague.client.model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchNewsAsync
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param  string $language The ISO 6391 language code of the news. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate. (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities (see semantic types). (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param  string $sort The sorting criteria (publish-time or sentiment). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of news to skip in range [0,10000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNewsAsync($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $sort = null, $sort_direction = null, $offset = null, $number = null)
    {
        return $this->searchNewsAsyncWithHttpInfo($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $sort, $sort_direction, $offset, $number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchNewsAsyncWithHttpInfo
     *
     * Search News
     *
     * @param  string $text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param  string $language The ISO 6391 language code of the news. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate. (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities (see semantic types). (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param  string $sort The sorting criteria (publish-time or sentiment). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of news to skip in range [0,10000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchNewsAsyncWithHttpInfo($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $sort = null, $sort_direction = null, $offset = null, $number = null)
    {
        $returnType = '\com.apileague.client\com.apileague.client.model\InlineResponse2002';
        $request = $this->searchNewsRequest($text, $source_countries, $language, $min_sentiment, $max_sentiment, $earliest_publish_date, $latest_publish_date, $news_sources, $authors, $entities, $location_filter, $sort, $sort_direction, $offset, $number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchNews'
     *
     * @param  string $text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
     * @param  string $source_countries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
     * @param  string $language The ISO 6391 language code of the news. (optional)
     * @param  double $min_sentiment The minimal sentiment of the news in range [-1,1]. (optional)
     * @param  double $max_sentiment The maximal sentiment of the news in range [-1,1]. (optional)
     * @param  string $earliest_publish_date The news must have been published after this date. (optional)
     * @param  string $latest_publish_date The news must have been published before this date. (optional)
     * @param  string $news_sources A comma-separated list of news sources from which the news should originate. (optional)
     * @param  string $authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
     * @param  string $entities Filter news by entities (see semantic types). (optional)
     * @param  string $location_filter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
     * @param  string $sort The sorting criteria (publish-time or sentiment). (optional)
     * @param  string $sort_direction Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param  int $offset The number of news to skip in range [0,10000] (optional)
     * @param  int $number The number of news to return in range [1,100] (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchNewsRequest($text = null, $source_countries = null, $language = null, $min_sentiment = null, $max_sentiment = null, $earliest_publish_date = null, $latest_publish_date = null, $news_sources = null, $authors = null, $entities = null, $location_filter = null, $sort = null, $sort_direction = null, $offset = null, $number = null)
    {
        if ($text !== null && strlen($text) > 300) {
            throw new \InvalidArgumentException('invalid length for "$text" when calling NewsApi.searchNews, must be smaller than or equal to 300.');
        }
        if ($text !== null && !preg_match("/./", $text)) {
            throw new \InvalidArgumentException("invalid value for \"text\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($source_countries !== null && strlen($source_countries) > 100) {
            throw new \InvalidArgumentException('invalid length for "$source_countries" when calling NewsApi.searchNews, must be smaller than or equal to 100.');
        }
        if ($source_countries !== null && !preg_match("/./", $source_countries)) {
            throw new \InvalidArgumentException("invalid value for \"source_countries\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($language !== null && strlen($language) > 2) {
            throw new \InvalidArgumentException('invalid length for "$language" when calling NewsApi.searchNews, must be smaller than or equal to 2.');
        }
        if ($language !== null && !preg_match("/./", $language)) {
            throw new \InvalidArgumentException("invalid value for \"language\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($min_sentiment !== null && $min_sentiment > 1) {
            throw new \InvalidArgumentException('invalid value for "$min_sentiment" when calling NewsApi.searchNews, must be smaller than or equal to 1.');
        }
        if ($min_sentiment !== null && $min_sentiment < -1) {
            throw new \InvalidArgumentException('invalid value for "$min_sentiment" when calling NewsApi.searchNews, must be bigger than or equal to -1.');
        }

        if ($max_sentiment !== null && $max_sentiment > 1) {
            throw new \InvalidArgumentException('invalid value for "$max_sentiment" when calling NewsApi.searchNews, must be smaller than or equal to 1.');
        }
        if ($max_sentiment !== null && $max_sentiment < -1) {
            throw new \InvalidArgumentException('invalid value for "$max_sentiment" when calling NewsApi.searchNews, must be bigger than or equal to -1.');
        }

        if ($earliest_publish_date !== null && strlen($earliest_publish_date) > 100) {
            throw new \InvalidArgumentException('invalid length for "$earliest_publish_date" when calling NewsApi.searchNews, must be smaller than or equal to 100.');
        }
        if ($earliest_publish_date !== null && !preg_match("/./", $earliest_publish_date)) {
            throw new \InvalidArgumentException("invalid value for \"earliest_publish_date\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($latest_publish_date !== null && strlen($latest_publish_date) > 100) {
            throw new \InvalidArgumentException('invalid length for "$latest_publish_date" when calling NewsApi.searchNews, must be smaller than or equal to 100.');
        }
        if ($latest_publish_date !== null && !preg_match("/./", $latest_publish_date)) {
            throw new \InvalidArgumentException("invalid value for \"latest_publish_date\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($news_sources !== null && strlen($news_sources) > 10000) {
            throw new \InvalidArgumentException('invalid length for "$news_sources" when calling NewsApi.searchNews, must be smaller than or equal to 10000.');
        }
        if ($news_sources !== null && !preg_match("/./", $news_sources)) {
            throw new \InvalidArgumentException("invalid value for \"news_sources\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($authors !== null && strlen($authors) > 300) {
            throw new \InvalidArgumentException('invalid length for "$authors" when calling NewsApi.searchNews, must be smaller than or equal to 300.');
        }
        if ($authors !== null && !preg_match("/./", $authors)) {
            throw new \InvalidArgumentException("invalid value for \"authors\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($entities !== null && strlen($entities) > 10000) {
            throw new \InvalidArgumentException('invalid length for "$entities" when calling NewsApi.searchNews, must be smaller than or equal to 10000.');
        }
        if ($entities !== null && !preg_match("/./", $entities)) {
            throw new \InvalidArgumentException("invalid value for \"entities\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($location_filter !== null && strlen($location_filter) > 100) {
            throw new \InvalidArgumentException('invalid length for "$location_filter" when calling NewsApi.searchNews, must be smaller than or equal to 100.');
        }
        if ($location_filter !== null && !preg_match("/./", $location_filter)) {
            throw new \InvalidArgumentException("invalid value for \"location_filter\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($sort !== null && strlen($sort) > 100) {
            throw new \InvalidArgumentException('invalid length for "$sort" when calling NewsApi.searchNews, must be smaller than or equal to 100.');
        }
        if ($sort !== null && !preg_match("/./", $sort)) {
            throw new \InvalidArgumentException("invalid value for \"sort\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($sort_direction !== null && strlen($sort_direction) > 4) {
            throw new \InvalidArgumentException('invalid length for "$sort_direction" when calling NewsApi.searchNews, must be smaller than or equal to 4.');
        }
        if ($sort_direction !== null && !preg_match("/./", $sort_direction)) {
            throw new \InvalidArgumentException("invalid value for \"sort_direction\" when calling NewsApi.searchNews, must conform to the pattern /./.");
        }

        if ($offset !== null && $offset > 10000) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling NewsApi.searchNews, must be smaller than or equal to 10000.');
        }
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling NewsApi.searchNews, must be bigger than or equal to 0.');
        }

        if ($number !== null && $number > 100) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling NewsApi.searchNews, must be smaller than or equal to 100.');
        }
        if ($number !== null && $number < 1) {
            throw new \InvalidArgumentException('invalid value for "$number" when calling NewsApi.searchNews, must be bigger than or equal to 1.');
        }


        $resourcePath = '/search-news';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($text)) {
            $text = ObjectSerializer::serializeCollection($text, 'form', true);
        }
        if ($text !== null) {
            $queryParams['text'] = $text;
        }
        // query params
        if (is_array($source_countries)) {
            $source_countries = ObjectSerializer::serializeCollection($source_countries, 'form', true);
        }
        if ($source_countries !== null) {
            $queryParams['source-countries'] = $source_countries;
        }
        // query params
        if (is_array($language)) {
            $language = ObjectSerializer::serializeCollection($language, 'form', true);
        }
        if ($language !== null) {
            $queryParams['language'] = $language;
        }
        // query params
        if (is_array($min_sentiment)) {
            $min_sentiment = ObjectSerializer::serializeCollection($min_sentiment, 'form', true);
        }
        if ($min_sentiment !== null) {
            $queryParams['min-sentiment'] = $min_sentiment;
        }
        // query params
        if (is_array($max_sentiment)) {
            $max_sentiment = ObjectSerializer::serializeCollection($max_sentiment, 'form', true);
        }
        if ($max_sentiment !== null) {
            $queryParams['max-sentiment'] = $max_sentiment;
        }
        // query params
        if (is_array($earliest_publish_date)) {
            $earliest_publish_date = ObjectSerializer::serializeCollection($earliest_publish_date, 'form', true);
        }
        if ($earliest_publish_date !== null) {
            $queryParams['earliest-publish-date'] = $earliest_publish_date;
        }
        // query params
        if (is_array($latest_publish_date)) {
            $latest_publish_date = ObjectSerializer::serializeCollection($latest_publish_date, 'form', true);
        }
        if ($latest_publish_date !== null) {
            $queryParams['latest-publish-date'] = $latest_publish_date;
        }
        // query params
        if (is_array($news_sources)) {
            $news_sources = ObjectSerializer::serializeCollection($news_sources, 'form', true);
        }
        if ($news_sources !== null) {
            $queryParams['news-sources'] = $news_sources;
        }
        // query params
        if (is_array($authors)) {
            $authors = ObjectSerializer::serializeCollection($authors, 'form', true);
        }
        if ($authors !== null) {
            $queryParams['authors'] = $authors;
        }
        // query params
        if (is_array($entities)) {
            $entities = ObjectSerializer::serializeCollection($entities, 'form', true);
        }
        if ($entities !== null) {
            $queryParams['entities'] = $entities;
        }
        // query params
        if (is_array($location_filter)) {
            $location_filter = ObjectSerializer::serializeCollection($location_filter, 'form', true);
        }
        if ($location_filter !== null) {
            $queryParams['location-filter'] = $location_filter;
        }
        // query params
        if (is_array($sort)) {
            $sort = ObjectSerializer::serializeCollection($sort, 'form', true);
        }
        if ($sort !== null) {
            $queryParams['sort'] = $sort;
        }
        // query params
        if (is_array($sort_direction)) {
            $sort_direction = ObjectSerializer::serializeCollection($sort_direction, 'form', true);
        }
        if ($sort_direction !== null) {
            $queryParams['sort-direction'] = $sort_direction;
        }
        // query params
        if (is_array($offset)) {
            $offset = ObjectSerializer::serializeCollection($offset, 'form', true);
        }
        if ($offset !== null) {
            $queryParams['offset'] = $offset;
        }
        // query params
        if (is_array($number)) {
            $number = ObjectSerializer::serializeCollection($number, 'form', true);
        }
        if ($number !== null) {
            $queryParams['number'] = $number;
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('api-key');
        if ($apiKey !== null) {
            $queryParams['api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
