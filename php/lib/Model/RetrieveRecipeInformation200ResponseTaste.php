<?php
/**
 * RetrieveRecipeInformation200ResponseTaste
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RetrieveRecipeInformation200ResponseTaste Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RetrieveRecipeInformation200ResponseTaste implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'retrieveRecipeInformation_200_response_taste';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'fattiness' => 'float',
        'spiciness' => 'int',
        'saltiness' => 'int',
        'bitterness' => 'float',
        'savoriness' => 'float',
        'sweetness' => 'float',
        'sourness' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'fattiness' => null,
        'spiciness' => null,
        'saltiness' => null,
        'bitterness' => null,
        'savoriness' => null,
        'sweetness' => null,
        'sourness' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'fattiness' => false,
        'spiciness' => false,
        'saltiness' => false,
        'bitterness' => false,
        'savoriness' => false,
        'sweetness' => false,
        'sourness' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fattiness' => 'fattiness',
        'spiciness' => 'spiciness',
        'saltiness' => 'saltiness',
        'bitterness' => 'bitterness',
        'savoriness' => 'savoriness',
        'sweetness' => 'sweetness',
        'sourness' => 'sourness'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fattiness' => 'setFattiness',
        'spiciness' => 'setSpiciness',
        'saltiness' => 'setSaltiness',
        'bitterness' => 'setBitterness',
        'savoriness' => 'setSavoriness',
        'sweetness' => 'setSweetness',
        'sourness' => 'setSourness'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fattiness' => 'getFattiness',
        'spiciness' => 'getSpiciness',
        'saltiness' => 'getSaltiness',
        'bitterness' => 'getBitterness',
        'savoriness' => 'getSavoriness',
        'sweetness' => 'getSweetness',
        'sourness' => 'getSourness'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('fattiness', $data ?? [], null);
        $this->setIfExists('spiciness', $data ?? [], null);
        $this->setIfExists('saltiness', $data ?? [], null);
        $this->setIfExists('bitterness', $data ?? [], null);
        $this->setIfExists('savoriness', $data ?? [], null);
        $this->setIfExists('sweetness', $data ?? [], null);
        $this->setIfExists('sourness', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fattiness
     *
     * @return float|null
     */
    public function getFattiness()
    {
        return $this->container['fattiness'];
    }

    /**
     * Sets fattiness
     *
     * @param float|null $fattiness fattiness
     *
     * @return self
     */
    public function setFattiness($fattiness)
    {
        if (is_null($fattiness)) {
            throw new \InvalidArgumentException('non-nullable fattiness cannot be null');
        }
        $this->container['fattiness'] = $fattiness;

        return $this;
    }

    /**
     * Gets spiciness
     *
     * @return int|null
     */
    public function getSpiciness()
    {
        return $this->container['spiciness'];
    }

    /**
     * Sets spiciness
     *
     * @param int|null $spiciness spiciness
     *
     * @return self
     */
    public function setSpiciness($spiciness)
    {
        if (is_null($spiciness)) {
            throw new \InvalidArgumentException('non-nullable spiciness cannot be null');
        }
        $this->container['spiciness'] = $spiciness;

        return $this;
    }

    /**
     * Gets saltiness
     *
     * @return int|null
     */
    public function getSaltiness()
    {
        return $this->container['saltiness'];
    }

    /**
     * Sets saltiness
     *
     * @param int|null $saltiness saltiness
     *
     * @return self
     */
    public function setSaltiness($saltiness)
    {
        if (is_null($saltiness)) {
            throw new \InvalidArgumentException('non-nullable saltiness cannot be null');
        }
        $this->container['saltiness'] = $saltiness;

        return $this;
    }

    /**
     * Gets bitterness
     *
     * @return float|null
     */
    public function getBitterness()
    {
        return $this->container['bitterness'];
    }

    /**
     * Sets bitterness
     *
     * @param float|null $bitterness bitterness
     *
     * @return self
     */
    public function setBitterness($bitterness)
    {
        if (is_null($bitterness)) {
            throw new \InvalidArgumentException('non-nullable bitterness cannot be null');
        }
        $this->container['bitterness'] = $bitterness;

        return $this;
    }

    /**
     * Gets savoriness
     *
     * @return float|null
     */
    public function getSavoriness()
    {
        return $this->container['savoriness'];
    }

    /**
     * Sets savoriness
     *
     * @param float|null $savoriness savoriness
     *
     * @return self
     */
    public function setSavoriness($savoriness)
    {
        if (is_null($savoriness)) {
            throw new \InvalidArgumentException('non-nullable savoriness cannot be null');
        }
        $this->container['savoriness'] = $savoriness;

        return $this;
    }

    /**
     * Gets sweetness
     *
     * @return float|null
     */
    public function getSweetness()
    {
        return $this->container['sweetness'];
    }

    /**
     * Sets sweetness
     *
     * @param float|null $sweetness sweetness
     *
     * @return self
     */
    public function setSweetness($sweetness)
    {
        if (is_null($sweetness)) {
            throw new \InvalidArgumentException('non-nullable sweetness cannot be null');
        }
        $this->container['sweetness'] = $sweetness;

        return $this;
    }

    /**
     * Gets sourness
     *
     * @return float|null
     */
    public function getSourness()
    {
        return $this->container['sourness'];
    }

    /**
     * Sets sourness
     *
     * @param float|null $sourness sourness
     *
     * @return self
     */
    public function setSourness($sourness)
    {
        if (is_null($sourness)) {
            throw new \InvalidArgumentException('non-nullable sourness cannot be null');
        }
        $this->container['sourness'] = $sourness;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


