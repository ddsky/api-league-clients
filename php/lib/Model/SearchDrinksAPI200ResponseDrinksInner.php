<?php
/**
 * SearchDrinksAPI200ResponseDrinksInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SearchDrinksAPI200ResponseDrinksInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchDrinksAPI200ResponseDrinksInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'searchDrinksAPI_200_response_drinks_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'flavors' => 'string[]',
        'instructions' => '\OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerInstructionsInner[]',
        'images' => 'string[]',
        'nutrition' => '\OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerNutrition',
        'glass_type' => 'string',
        'credits' => '\OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerCredits',
        'price_per_serving' => 'float',
        'description' => 'string',
        'ingredients' => '\OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerIngredientsInner[]',
        'id' => 'int',
        'title' => 'string',
        'cuisines' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'flavors' => null,
        'instructions' => null,
        'images' => null,
        'nutrition' => null,
        'glass_type' => null,
        'credits' => null,
        'price_per_serving' => null,
        'description' => null,
        'ingredients' => null,
        'id' => null,
        'title' => null,
        'cuisines' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'flavors' => false,
        'instructions' => false,
        'images' => false,
        'nutrition' => false,
        'glass_type' => true,
        'credits' => false,
        'price_per_serving' => false,
        'description' => true,
        'ingredients' => false,
        'id' => false,
        'title' => true,
        'cuisines' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'flavors' => 'flavors',
        'instructions' => 'instructions',
        'images' => 'images',
        'nutrition' => 'nutrition',
        'glass_type' => 'glass_type',
        'credits' => 'credits',
        'price_per_serving' => 'price_per_serving',
        'description' => 'description',
        'ingredients' => 'ingredients',
        'id' => 'id',
        'title' => 'title',
        'cuisines' => 'cuisines'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'flavors' => 'setFlavors',
        'instructions' => 'setInstructions',
        'images' => 'setImages',
        'nutrition' => 'setNutrition',
        'glass_type' => 'setGlassType',
        'credits' => 'setCredits',
        'price_per_serving' => 'setPricePerServing',
        'description' => 'setDescription',
        'ingredients' => 'setIngredients',
        'id' => 'setId',
        'title' => 'setTitle',
        'cuisines' => 'setCuisines'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'flavors' => 'getFlavors',
        'instructions' => 'getInstructions',
        'images' => 'getImages',
        'nutrition' => 'getNutrition',
        'glass_type' => 'getGlassType',
        'credits' => 'getCredits',
        'price_per_serving' => 'getPricePerServing',
        'description' => 'getDescription',
        'ingredients' => 'getIngredients',
        'id' => 'getId',
        'title' => 'getTitle',
        'cuisines' => 'getCuisines'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('flavors', $data ?? [], null);
        $this->setIfExists('instructions', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('nutrition', $data ?? [], null);
        $this->setIfExists('glass_type', $data ?? [], null);
        $this->setIfExists('credits', $data ?? [], null);
        $this->setIfExists('price_per_serving', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('ingredients', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('cuisines', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets flavors
     *
     * @return string[]|null
     */
    public function getFlavors()
    {
        return $this->container['flavors'];
    }

    /**
     * Sets flavors
     *
     * @param string[]|null $flavors flavors
     *
     * @return self
     */
    public function setFlavors($flavors)
    {
        if (is_null($flavors)) {
            throw new \InvalidArgumentException('non-nullable flavors cannot be null');
        }
        $this->container['flavors'] = $flavors;

        return $this;
    }

    /**
     * Gets instructions
     *
     * @return \OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerInstructionsInner[]|null
     */
    public function getInstructions()
    {
        return $this->container['instructions'];
    }

    /**
     * Sets instructions
     *
     * @param \OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerInstructionsInner[]|null $instructions instructions
     *
     * @return self
     */
    public function setInstructions($instructions)
    {
        if (is_null($instructions)) {
            throw new \InvalidArgumentException('non-nullable instructions cannot be null');
        }
        $this->container['instructions'] = $instructions;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[]|null $images images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets nutrition
     *
     * @return \OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerNutrition|null
     */
    public function getNutrition()
    {
        return $this->container['nutrition'];
    }

    /**
     * Sets nutrition
     *
     * @param \OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerNutrition|null $nutrition nutrition
     *
     * @return self
     */
    public function setNutrition($nutrition)
    {
        if (is_null($nutrition)) {
            throw new \InvalidArgumentException('non-nullable nutrition cannot be null');
        }
        $this->container['nutrition'] = $nutrition;

        return $this;
    }

    /**
     * Gets glass_type
     *
     * @return string|null
     */
    public function getGlassType()
    {
        return $this->container['glass_type'];
    }

    /**
     * Sets glass_type
     *
     * @param string|null $glass_type glass_type
     *
     * @return self
     */
    public function setGlassType($glass_type)
    {
        if (is_null($glass_type)) {
            array_push($this->openAPINullablesSetToNull, 'glass_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('glass_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['glass_type'] = $glass_type;

        return $this;
    }

    /**
     * Gets credits
     *
     * @return \OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerCredits|null
     */
    public function getCredits()
    {
        return $this->container['credits'];
    }

    /**
     * Sets credits
     *
     * @param \OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerCredits|null $credits credits
     *
     * @return self
     */
    public function setCredits($credits)
    {
        if (is_null($credits)) {
            throw new \InvalidArgumentException('non-nullable credits cannot be null');
        }
        $this->container['credits'] = $credits;

        return $this;
    }

    /**
     * Gets price_per_serving
     *
     * @return float|null
     */
    public function getPricePerServing()
    {
        return $this->container['price_per_serving'];
    }

    /**
     * Sets price_per_serving
     *
     * @param float|null $price_per_serving price_per_serving
     *
     * @return self
     */
    public function setPricePerServing($price_per_serving)
    {
        if (is_null($price_per_serving)) {
            throw new \InvalidArgumentException('non-nullable price_per_serving cannot be null');
        }
        $this->container['price_per_serving'] = $price_per_serving;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets ingredients
     *
     * @return \OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerIngredientsInner[]|null
     */
    public function getIngredients()
    {
        return $this->container['ingredients'];
    }

    /**
     * Sets ingredients
     *
     * @param \OpenAPI\Client\Model\SearchDrinksAPI200ResponseDrinksInnerIngredientsInner[]|null $ingredients ingredients
     *
     * @return self
     */
    public function setIngredients($ingredients)
    {
        if (is_null($ingredients)) {
            throw new \InvalidArgumentException('non-nullable ingredients cannot be null');
        }
        $this->container['ingredients'] = $ingredients;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            array_push($this->openAPINullablesSetToNull, 'title');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('title', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets cuisines
     *
     * @return string[]|null
     */
    public function getCuisines()
    {
        return $this->container['cuisines'];
    }

    /**
     * Sets cuisines
     *
     * @param string[]|null $cuisines cuisines
     *
     * @return self
     */
    public function setCuisines($cuisines)
    {
        if (is_null($cuisines)) {
            throw new \InvalidArgumentException('non-nullable cuisines cannot be null');
        }
        $this->container['cuisines'] = $cuisines;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


