/**
 * API League
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.6.4
 * Contact: mail@apileague.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CorrectSpellingAPI200Response from '../model/CorrectSpellingAPI200Response';
import DetectGenderByNameAPI200Response from '../model/DetectGenderByNameAPI200Response';
import DetectLanguageAPI200ResponseInner from '../model/DetectLanguageAPI200ResponseInner';
import DetectSentimentAPI200Response from '../model/DetectSentimentAPI200Response';
import ExtractDatesAPI200Response from '../model/ExtractDatesAPI200Response';
import ExtractEntitiesAPI200Response from '../model/ExtractEntitiesAPI200Response';
import ListWordSynonymsAPI200Response from '../model/ListWordSynonymsAPI200Response';
import PluralizeWordAPI200Response from '../model/PluralizeWordAPI200Response';
import ScoreReadabilityAPI200Response from '../model/ScoreReadabilityAPI200Response';
import ScoreTextAPI200Response from '../model/ScoreTextAPI200Response';
import SingularizeWordAPI200Response from '../model/SingularizeWordAPI200Response';
import StemTextAPI200Response from '../model/StemTextAPI200Response';
import TagPartOfSpeechAPI200Response from '../model/TagPartOfSpeechAPI200Response';

/**
* Text service.
* @module api/TextApi
* @version 1.6.4
*/
export default class TextApi {

    /**
    * Constructs a new TextApi. 
    * @alias module:api/TextApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the correctSpellingAPI operation.
     * @callback module:api/TextApi~correctSpellingAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/CorrectSpellingAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Correct Spelling API
     * The API corrects spelling mistakes in a given text. It returns the corrected text or the original text if nothing was corrected. This API supports text in the following languages: English (en), French (fr), German (de), Italian (it), and Spanish (es).
     * @param {String} text The text to be corrected.
     * @param {String} language The language of the text, one of en, de, es, fr, or it.
     * @param {module:api/TextApi~correctSpellingAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CorrectSpellingAPI200Response}
     */
    correctSpellingAPI(text, language, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling correctSpellingAPI");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling correctSpellingAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text,
        'language': language
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CorrectSpellingAPI200Response;
      return this.apiClient.callApi(
        '/correct-spelling', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectGenderByNameAPI operation.
     * @callback module:api/TextApi~detectGenderByNameAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectGenderByNameAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect Gender by Name API
     * Detect the likelihood that a name is given to a male or female (aka to \"genderize\" a name). While there are more than two genders, this API is limited to the binary classification as the name is given to the baby when it is born and only the sex is known.
     * @param {String} name The name of the perso for which the sentiment should be detected.
     * @param {module:api/TextApi~detectGenderByNameAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectGenderByNameAPI200Response}
     */
    detectGenderByNameAPI(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling detectGenderByNameAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectGenderByNameAPI200Response;
      return this.apiClient.callApi(
        '/detect-gender', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectLanguageAPI operation.
     * @callback module:api/TextApi~detectLanguageAPICallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DetectLanguageAPI200ResponseInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect Language API
     * Detect the language of the given text. The API returns a list of languages and their confidence scores. The confidence score is a value between 0 and 1, where 1 means the language was detected with 100% confidence. The API supports text in 22 languages.
     * @param {String} text The text for which the language should be detected.
     * @param {module:api/TextApi~detectLanguageAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DetectLanguageAPI200ResponseInner>}
     */
    detectLanguageAPI(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling detectLanguageAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DetectLanguageAPI200ResponseInner];
      return this.apiClient.callApi(
        '/detect-language', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the detectSentimentAPI operation.
     * @callback module:api/TextApi~detectSentimentAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectSentimentAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect Sentiment API
     * Detect the sentiment (positive or negative) of a given text. The entire document is scored and also each individual sentence.
     * @param {String} text The text for which the sentiment should be detected.
     * @param {module:api/TextApi~detectSentimentAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectSentimentAPI200Response}
     */
    detectSentimentAPI(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling detectSentimentAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DetectSentimentAPI200Response;
      return this.apiClient.callApi(
        '/detect-sentiment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extractDatesAPI operation.
     * @callback module:api/TextApi~extractDatesAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtractDatesAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract Dates API
     * Extract dates from a given text. The API will return a list of dates with their positions in the text and the normalized form of the date. A large list of date formats is supported. For example, the text could contain dates in the form of \"April 5th, 2035\", \"04/05/2035\", or \"05.04.2035\". The normalized date is the date in the form of a timestamp (milliseconds since 1970).
     * @param {String} text The text from which dates should be extracted.
     * @param {module:api/TextApi~extractDatesAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtractDatesAPI200Response}
     */
    extractDatesAPI(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling extractDatesAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtractDatesAPI200Response;
      return this.apiClient.callApi(
        '/extract-dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the extractEntitiesAPI operation.
     * @callback module:api/TextApi~extractEntitiesAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtractEntitiesAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Extract Entities API
     * Extract entities from a text. An entity is a word or a group of words that represent a concept. For example, the word \"Canada\" represents the concept of a country. The word \"Jim Carrey\" represents the concept of a person. The word \"Tesla\" represents the concept of a company. The API will return a list of entities found in the text. The entities are classified into different types such as person, location, organization, etc.
     * @param {String} text The text from which entities should be extracted.
     * @param {module:api/TextApi~extractEntitiesAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtractEntitiesAPI200Response}
     */
    extractEntitiesAPI(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling extractEntitiesAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtractEntitiesAPI200Response;
      return this.apiClient.callApi(
        '/extract-entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listWordSynonymsAPI operation.
     * @callback module:api/TextApi~listWordSynonymsAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListWordSynonymsAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Word Synonyms API
     * Return synonyms of a word.
     * @param {String} word The (noun) word for which a list of synonyms should be returned.
     * @param {module:api/TextApi~listWordSynonymsAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListWordSynonymsAPI200Response}
     */
    listWordSynonymsAPI(word, callback) {
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling listWordSynonymsAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'word': word
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListWordSynonymsAPI200Response;
      return this.apiClient.callApi(
        '/list-synonyms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pluralizeWordAPI operation.
     * @callback module:api/TextApi~pluralizeWordAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/PluralizeWordAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pluralize Word API
     * Find the plural form of a word.
     * @param {String} word The (noun) word for which the plural form should be found.
     * @param {module:api/TextApi~pluralizeWordAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PluralizeWordAPI200Response}
     */
    pluralizeWordAPI(word, callback) {
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling pluralizeWordAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'word': word
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PluralizeWordAPI200Response;
      return this.apiClient.callApi(
        '/pluralize-word', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoreReadabilityAPI operation.
     * @callback module:api/TextApi~scoreReadabilityAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreReadabilityAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Score Readability API
     * Score the readability of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is score with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau.
     * @param {String} text The text to score for readability.
     * @param {module:api/TextApi~scoreReadabilityAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreReadabilityAPI200Response}
     */
    scoreReadabilityAPI(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling scoreReadabilityAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScoreReadabilityAPI200Response;
      return this.apiClient.callApi(
        '/score-readability', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoreTextAPI operation.
     * @callback module:api/TextApi~scoreTextAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/ScoreTextAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Score Text API
     * Score the readability, skimmability, interestingness, and style of a text. The readability score is based on the average length of the sentences and the average length of the words in the text. The text is scored with multiple readability scores such as Flesch, Smog, ARI, LIX, Kincaid, Fog, and Coleman Liau. Additionally, information such as the estimated reading time in seconds is returned.
     * @param {String} title The title of the text to score.
     * @param {String} text The text to score for multiple metrics.
     * @param {module:api/TextApi~scoreTextAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ScoreTextAPI200Response}
     */
    scoreTextAPI(title, text, callback) {
      let postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling scoreTextAPI");
      }
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling scoreTextAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'title': title,
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ScoreTextAPI200Response;
      return this.apiClient.callApi(
        '/score-text', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the singularizeWordAPI operation.
     * @callback module:api/TextApi~singularizeWordAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingularizeWordAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Singularize Word API
     * Find the singular form of a word.
     * @param {String} word The (noun) word for which the singular form should be found.
     * @param {module:api/TextApi~singularizeWordAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingularizeWordAPI200Response}
     */
    singularizeWordAPI(word, callback) {
      let postBody = null;
      // verify the required parameter 'word' is set
      if (word === undefined || word === null) {
        throw new Error("Missing the required parameter 'word' when calling singularizeWordAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'word': word
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SingularizeWordAPI200Response;
      return this.apiClient.callApi(
        '/singularize-word', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stemTextAPI operation.
     * @callback module:api/TextApi~stemTextAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/StemTextAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stem Text API
     * The Text Stemming API is used to get the root form of a word. It is useful for searching and natural language processing.
     * @param {String} text The text to be stemmed.
     * @param {module:api/TextApi~stemTextAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StemTextAPI200Response}
     */
    stemTextAPI(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling stemTextAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = StemTextAPI200Response;
      return this.apiClient.callApi(
        '/stem-text', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagPartOfSpeechAPI operation.
     * @callback module:api/TextApi~tagPartOfSpeechAPICallback
     * @param {String} error Error message, if any.
     * @param {module:model/TagPartOfSpeechAPI200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tag Part of Speech API
     * Part of speech tagging is the process of marking up a word in a text as corresponding to a particular part of speech, based on both its definition and its context. This is a simple API that takes a text and returns the tagged text.
     * @param {String} text The text to tag the part of speech.
     * @param {module:api/TextApi~tagPartOfSpeechAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TagPartOfSpeechAPI200Response}
     */
    tagPartOfSpeechAPI(text, callback) {
      let postBody = null;
      // verify the required parameter 'text' is set
      if (text === undefined || text === null) {
        throw new Error("Missing the required parameter 'text' when calling tagPartOfSpeechAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'text': text
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey', 'headerApiKey'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TagPartOfSpeechAPI200Response;
      return this.apiClient.callApi(
        '/tag-pos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
