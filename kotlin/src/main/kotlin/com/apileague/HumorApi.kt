/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.apileague

import java.io.IOException

import com.apileague.client.model.InlineResponse2004
import com.apileague.client.model.InlineResponse2004Jokes
import com.apileague.client.model.InlineResponse2005
import com.apileague.client.model.InlineResponse2006
import com.apileague.client.model.InlineResponse2007
import com.apileague.client.model.InlineResponse2008

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class HumorApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apileague.com")
        }
    }

    /**
    * Generate Nonsense Word
    * Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
    * @return InlineResponse2008
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun generateNonsenseWord() : InlineResponse2008 {
        val localVarResponse = generateNonsenseWordWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2008
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Generate Nonsense Word
    * Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
    * @return ApiResponse<InlineResponse2008?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun generateNonsenseWordWithHttpInfo() : ApiResponse<InlineResponse2008?> {
        val localVariableConfig = generateNonsenseWordRequestConfig()

        return request<Unit, InlineResponse2008>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation generateNonsenseWord
    *
    * @return RequestConfig
    */
    fun generateNonsenseWordRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/generate-nonsense-word",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Random Joke
    * This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
    * @param includeTags A comma-separated list of tags the jokes should have. (optional)
    * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
    * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
    * @param maxLength The maximum length of the joke in letters. (optional)
    * @return InlineResponse2004Jokes
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomJoke(includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Int?) : InlineResponse2004Jokes {
        val localVarResponse = randomJokeWithHttpInfo(includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2004Jokes
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Random Joke
    * This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
    * @param includeTags A comma-separated list of tags the jokes should have. (optional)
    * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
    * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
    * @param maxLength The maximum length of the joke in letters. (optional)
    * @return ApiResponse<InlineResponse2004Jokes?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomJokeWithHttpInfo(includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Int?) : ApiResponse<InlineResponse2004Jokes?> {
        val localVariableConfig = randomJokeRequestConfig(includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength)

        return request<Unit, InlineResponse2004Jokes>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation randomJoke
    *
    * @param includeTags A comma-separated list of tags the jokes should have. (optional)
    * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
    * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
    * @param maxLength The maximum length of the joke in letters. (optional)
    * @return RequestConfig
    */
    fun randomJokeRequestConfig(includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeTags != null) {
                    put("include-tags", listOf(includeTags.toString()))
                }
                if (excludeTags != null) {
                    put("exclude-tags", listOf(excludeTags.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxLength != null) {
                    put("max-length", listOf(maxLength.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retrieve-random-joke",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Random Meme
    * Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
    * @param keywords A comma-separated list of words that must occur in the meme. (optional)
    * @param keywordsInImage Whether the keywords must occur in the image. (optional)
    * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
    * @param minRating The minimum rating in range [0.0-1.0] of the meme. (optional)
    * @param maxAgeDays The maximum age of the meme in days. (optional)
    * @return InlineResponse2006
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomMeme(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?) : InlineResponse2006 {
        val localVarResponse = randomMemeWithHttpInfo(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, minRating = minRating, maxAgeDays = maxAgeDays)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2006
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Random Meme
    * Get a random meme out of over 200,000+ memes. To get the latest memes, you can use the max-age-days parameter.
    * @param keywords A comma-separated list of words that must occur in the meme. (optional)
    * @param keywordsInImage Whether the keywords must occur in the image. (optional)
    * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
    * @param minRating The minimum rating in range [0.0-1.0] of the meme. (optional)
    * @param maxAgeDays The maximum age of the meme in days. (optional)
    * @return ApiResponse<InlineResponse2006?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomMemeWithHttpInfo(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?) : ApiResponse<InlineResponse2006?> {
        val localVariableConfig = randomMemeRequestConfig(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, minRating = minRating, maxAgeDays = maxAgeDays)

        return request<Unit, InlineResponse2006>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation randomMeme
    *
    * @param keywords A comma-separated list of words that must occur in the meme. (optional)
    * @param keywordsInImage Whether the keywords must occur in the image. (optional)
    * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
    * @param minRating The minimum rating in range [0.0-1.0] of the meme. (optional)
    * @param maxAgeDays The maximum age of the meme in days. (optional)
    * @return RequestConfig
    */
    fun randomMemeRequestConfig(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (keywordsInImage != null) {
                    put("keywords-in-image", listOf(keywordsInImage.toString()))
                }
                if (mediaType != null) {
                    put("media-type", listOf(mediaType.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxAgeDays != null) {
                    put("max-age-days", listOf(maxAgeDays.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retrieve-random-meme",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search Gifs
    * Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
    * @param query The search query. 
    * @param number The number of gifs to return in range [1,10] (optional)
    * @return InlineResponse2007
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchGifs(query: kotlin.String, number: kotlin.Int?) : InlineResponse2007 {
        val localVarResponse = searchGifsWithHttpInfo(query = query, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2007
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search Gifs
    * Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
    * @param query The search query. 
    * @param number The number of gifs to return in range [1,10] (optional)
    * @return ApiResponse<InlineResponse2007?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchGifsWithHttpInfo(query: kotlin.String, number: kotlin.Int?) : ApiResponse<InlineResponse2007?> {
        val localVariableConfig = searchGifsRequestConfig(query = query, number = number)

        return request<Unit, InlineResponse2007>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchGifs
    *
    * @param query The search query. 
    * @param number The number of gifs to return in range [1,10] (optional)
    * @return RequestConfig
    */
    fun searchGifsRequestConfig(query: kotlin.String, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-gifs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search Jokes
    * With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
    * @param keywords A comma-separated list of words that must occur in the joke. (optional)
    * @param includeTags A comma-separated list of tags the jokes should have. (optional)
    * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
    * @param minRating The minimum rating (0-10) of the jokes. (optional)
    * @param maxLength The maximum length of the joke in letters. (optional)
    * @param offset The number of jokes to skip, between 0 and 1000. (optional)
    * @param number The number of jokes, between 1 and 10. (optional)
    * @return InlineResponse2004
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchJokes(keywords: kotlin.String?, includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Double?, offset: kotlin.Int?, number: kotlin.Int?) : InlineResponse2004 {
        val localVarResponse = searchJokesWithHttpInfo(keywords = keywords, includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2004
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search Jokes
    * With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
    * @param keywords A comma-separated list of words that must occur in the joke. (optional)
    * @param includeTags A comma-separated list of tags the jokes should have. (optional)
    * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
    * @param minRating The minimum rating (0-10) of the jokes. (optional)
    * @param maxLength The maximum length of the joke in letters. (optional)
    * @param offset The number of jokes to skip, between 0 and 1000. (optional)
    * @param number The number of jokes, between 1 and 10. (optional)
    * @return ApiResponse<InlineResponse2004?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchJokesWithHttpInfo(keywords: kotlin.String?, includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Double?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<InlineResponse2004?> {
        val localVariableConfig = searchJokesRequestConfig(keywords = keywords, includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength, offset = offset, number = number)

        return request<Unit, InlineResponse2004>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchJokes
    *
    * @param keywords A comma-separated list of words that must occur in the joke. (optional)
    * @param includeTags A comma-separated list of tags the jokes should have. (optional)
    * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
    * @param minRating The minimum rating (0-10) of the jokes. (optional)
    * @param maxLength The maximum length of the joke in letters. (optional)
    * @param offset The number of jokes to skip, between 0 and 1000. (optional)
    * @param number The number of jokes, between 1 and 10. (optional)
    * @return RequestConfig
    */
    fun searchJokesRequestConfig(keywords: kotlin.String?, includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Double?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (includeTags != null) {
                    put("include-tags", listOf(includeTags.toString()))
                }
                if (excludeTags != null) {
                    put("exclude-tags", listOf(excludeTags.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxLength != null) {
                    put("max-length", listOf(maxLength.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-jokes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search Memes
    * With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
    * @param keywords A comma-separated list of words that must occur in the meme. (optional)
    * @param keywordsInImage Whether the keywords must occur in the image. (optional)
    * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
    * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
    * @param maxAgeDays The maximum age of the meme in days. (optional)
    * @param offset The number of memes to skip, between 0 and 1000. (optional)
    * @param number The number of memes, between 0 and 10. (optional)
    * @return InlineResponse2005
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchMemes(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?, offset: kotlin.Int?, number: kotlin.Int?) : InlineResponse2005 {
        val localVarResponse = searchMemesWithHttpInfo(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, minRating = minRating, maxAgeDays = maxAgeDays, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2005
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search Memes
    * With over 200,000 memes, you&#39;ll surely find something funny. You can even search for text within memes and filter by user ratings.
    * @param keywords A comma-separated list of words that must occur in the meme. (optional)
    * @param keywordsInImage Whether the keywords must occur in the image. (optional)
    * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
    * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
    * @param maxAgeDays The maximum age of the meme in days. (optional)
    * @param offset The number of memes to skip, between 0 and 1000. (optional)
    * @param number The number of memes, between 0 and 10. (optional)
    * @return ApiResponse<InlineResponse2005?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchMemesWithHttpInfo(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<InlineResponse2005?> {
        val localVariableConfig = searchMemesRequestConfig(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, minRating = minRating, maxAgeDays = maxAgeDays, offset = offset, number = number)

        return request<Unit, InlineResponse2005>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchMemes
    *
    * @param keywords A comma-separated list of words that must occur in the meme. (optional)
    * @param keywordsInImage Whether the keywords must occur in the image. (optional)
    * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
    * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
    * @param maxAgeDays The maximum age of the meme in days. (optional)
    * @param offset The number of memes to skip, between 0 and 1000. (optional)
    * @param number The number of memes, between 0 and 10. (optional)
    * @return RequestConfig
    */
    fun searchMemesRequestConfig(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (keywordsInImage != null) {
                    put("keywords-in-image", listOf(keywordsInImage.toString()))
                }
                if (mediaType != null) {
                    put("media-type", listOf(mediaType.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxAgeDays != null) {
                    put("max-age-days", listOf(maxAgeDays.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-memes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
