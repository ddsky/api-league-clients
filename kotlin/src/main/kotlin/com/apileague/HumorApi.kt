/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.apileague

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.apileague.client.model.GenerateNonsenseWordAPI200Response
import com.apileague.client.model.RandomMemeAPI200Response
import com.apileague.client.model.SearchGifsAPI200Response
import com.apileague.client.model.SearchJokesAPI200Response
import com.apileague.client.model.SearchJokesAPI200ResponseJokesInner
import com.apileague.client.model.SearchMemesAPI200Response

import com.squareup.moshi.Json

import apileague.infrastructure.ApiClient
import apileague.infrastructure.ApiResponse
import apileague.infrastructure.ClientException
import apileague.infrastructure.ClientError
import apileague.infrastructure.ServerException
import apileague.infrastructure.ServerError
import apileague.infrastructure.MultiValueMap
import apileague.infrastructure.PartConfig
import apileague.infrastructure.RequestConfig
import apileague.infrastructure.RequestMethod
import apileague.infrastructure.ResponseType
import apileague.infrastructure.Success
import apileague.infrastructure.toMultiValue

class HumorApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apileague.com")
        }
    }

    /**
     * Generate Nonsense Word API
     * Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
     * @return GenerateNonsenseWordAPI200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun generateNonsenseWordAPI() : GenerateNonsenseWordAPI200Response {
        val localVarResponse = generateNonsenseWordAPIWithHttpInfo()

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GenerateNonsenseWordAPI200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Generate Nonsense Word API
     * Generate a funny sounding nonsense word. This is useful for generating random words for games, naming things, or just for fun. The response will contain the generated word and a rating of how funny it is.
     * @return ApiResponse<GenerateNonsenseWordAPI200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun generateNonsenseWordAPIWithHttpInfo() : ApiResponse<GenerateNonsenseWordAPI200Response?> {
        val localVariableConfig = generateNonsenseWordAPIRequestConfig()

        return request<Unit, GenerateNonsenseWordAPI200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation generateNonsenseWordAPI
     *
     * @return RequestConfig
     */
    fun generateNonsenseWordAPIRequestConfig() : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/generate-nonsense-word",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Random Joke API
     * This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @return SearchJokesAPI200ResponseJokesInner
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomJokeAPI(includeTags: kotlin.String? = null, excludeTags: kotlin.String? = null, minRating: kotlin.Double? = null, maxLength: kotlin.Int? = null) : SearchJokesAPI200ResponseJokesInner {
        val localVarResponse = randomJokeAPIWithHttpInfo(includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchJokesAPI200ResponseJokesInner
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Random Joke API
     * This is a simple API that returns a random joke. You can filter the jokes by tags and keywords. To make sure they are safe for work, you could use the exclude-tags parameter to exclude jokes with certain tags such as \&quot;nsfw\&quot; or \&quot;religious\&quot;.
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @return ApiResponse<SearchJokesAPI200ResponseJokesInner?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomJokeAPIWithHttpInfo(includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Int?) : ApiResponse<SearchJokesAPI200ResponseJokesInner?> {
        val localVariableConfig = randomJokeAPIRequestConfig(includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength)

        return request<Unit, SearchJokesAPI200ResponseJokesInner>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation randomJokeAPI
     *
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @return RequestConfig
     */
    fun randomJokeAPIRequestConfig(includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (includeTags != null) {
                    put("include-tags", listOf(includeTags.toString()))
                }
                if (excludeTags != null) {
                    put("exclude-tags", listOf(excludeTags.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxLength != null) {
                    put("max-length", listOf(maxLength.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retrieve-random-joke",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Random Meme API
     * Get a random meme out of over 300,000+ memes. To get the latest memes, you can use the max-age-days parameter.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @return RandomMemeAPI200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomMemeAPI(keywords: kotlin.String? = null, keywordsInImage: kotlin.Boolean? = null, mediaType: kotlin.String? = null, minRating: kotlin.Double? = null, maxAgeDays: kotlin.Int? = null) : RandomMemeAPI200Response {
        val localVarResponse = randomMemeAPIWithHttpInfo(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, minRating = minRating, maxAgeDays = maxAgeDays)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RandomMemeAPI200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Random Meme API
     * Get a random meme out of over 300,000+ memes. To get the latest memes, you can use the max-age-days parameter.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @return ApiResponse<RandomMemeAPI200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomMemeAPIWithHttpInfo(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?) : ApiResponse<RandomMemeAPI200Response?> {
        val localVariableConfig = randomMemeAPIRequestConfig(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, minRating = minRating, maxAgeDays = maxAgeDays)

        return request<Unit, RandomMemeAPI200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation randomMemeAPI
     *
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @return RequestConfig
     */
    fun randomMemeAPIRequestConfig(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (keywordsInImage != null) {
                    put("keywords-in-image", listOf(keywordsInImage.toString()))
                }
                if (mediaType != null) {
                    put("media-type", listOf(mediaType.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxAgeDays != null) {
                    put("max-age-days", listOf(maxAgeDays.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retrieve-random-meme",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Gifs API
     * Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
     * @param query The search query.
     * @param number The number of gifs to return in range [1,10] (optional)
     * @return SearchGifsAPI200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchGifsAPI(query: kotlin.String, number: kotlin.Int? = null) : SearchGifsAPI200Response {
        val localVarResponse = searchGifsAPIWithHttpInfo(query = query, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchGifsAPI200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Gifs API
     * Search through hundreds of thousands of gifs to match any reaction you want. The gifs are returned in a list with the URL, width, and height of the gif.
     * @param query The search query.
     * @param number The number of gifs to return in range [1,10] (optional)
     * @return ApiResponse<SearchGifsAPI200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchGifsAPIWithHttpInfo(query: kotlin.String, number: kotlin.Int?) : ApiResponse<SearchGifsAPI200Response?> {
        val localVariableConfig = searchGifsAPIRequestConfig(query = query, number = number)

        return request<Unit, SearchGifsAPI200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchGifsAPI
     *
     * @param query The search query.
     * @param number The number of gifs to return in range [1,10] (optional)
     * @return RequestConfig
     */
    fun searchGifsAPIRequestConfig(query: kotlin.String, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-gifs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Jokes API
     * With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
     * @param keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param number The number of jokes, between 1 and 10. (optional)
     * @return SearchJokesAPI200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchJokesAPI(keywords: kotlin.String? = null, includeTags: kotlin.String? = null, excludeTags: kotlin.String? = null, minRating: kotlin.Double? = null, maxLength: kotlin.Double? = null, offset: kotlin.Int? = null, number: kotlin.Int? = null) : SearchJokesAPI200Response {
        val localVarResponse = searchJokesAPIWithHttpInfo(keywords = keywords, includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchJokesAPI200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Jokes API
     * With over 50,000 jokes, you should find something for any occasion. There are 27 categories/tags to choose from, but you can also search for very specific words within jokes.
     * @param keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param number The number of jokes, between 1 and 10. (optional)
     * @return ApiResponse<SearchJokesAPI200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchJokesAPIWithHttpInfo(keywords: kotlin.String?, includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Double?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<SearchJokesAPI200Response?> {
        val localVariableConfig = searchJokesAPIRequestConfig(keywords = keywords, includeTags = includeTags, excludeTags = excludeTags, minRating = minRating, maxLength = maxLength, offset = offset, number = number)

        return request<Unit, SearchJokesAPI200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchJokesAPI
     *
     * @param keywords A comma-separated list of words that must occur in the joke. (optional)
     * @param includeTags A comma-separated list of tags the jokes should have. (optional)
     * @param excludeTags A comma-separated list of tags the jokes must not have. (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the jokes. (optional)
     * @param maxLength The maximum length of the joke in letters. (optional)
     * @param offset The number of jokes to skip, between 0 and 1000. (optional)
     * @param number The number of jokes, between 1 and 10. (optional)
     * @return RequestConfig
     */
    fun searchJokesAPIRequestConfig(keywords: kotlin.String?, includeTags: kotlin.String?, excludeTags: kotlin.String?, minRating: kotlin.Double?, maxLength: kotlin.Double?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (includeTags != null) {
                    put("include-tags", listOf(includeTags.toString()))
                }
                if (excludeTags != null) {
                    put("exclude-tags", listOf(excludeTags.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxLength != null) {
                    put("max-length", listOf(maxLength.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-jokes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Memes API
     * Search over 300,000 memes by keyword, rating, and age. Most memes are stills (images) but using the media-type you can also get videos. You can even search for text within memes. You&#39;ll surely find something funny.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param offset The number of memes to skip, between 0 and 1000. (optional)
     * @param number The number of memes, between 1 and 10. (optional)
     * @return SearchMemesAPI200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchMemesAPI(keywords: kotlin.String? = null, keywordsInImage: kotlin.Boolean? = null, mediaType: kotlin.String? = null, minRating: kotlin.Double? = null, maxAgeDays: kotlin.Int? = null, offset: kotlin.Int? = null, number: kotlin.Int? = null) : SearchMemesAPI200Response {
        val localVarResponse = searchMemesAPIWithHttpInfo(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, minRating = minRating, maxAgeDays = maxAgeDays, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchMemesAPI200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Memes API
     * Search over 300,000 memes by keyword, rating, and age. Most memes are stills (images) but using the media-type you can also get videos. You can even search for text within memes. You&#39;ll surely find something funny.
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param offset The number of memes to skip, between 0 and 1000. (optional)
     * @param number The number of memes, between 1 and 10. (optional)
     * @return ApiResponse<SearchMemesAPI200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchMemesAPIWithHttpInfo(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<SearchMemesAPI200Response?> {
        val localVariableConfig = searchMemesAPIRequestConfig(keywords = keywords, keywordsInImage = keywordsInImage, mediaType = mediaType, minRating = minRating, maxAgeDays = maxAgeDays, offset = offset, number = number)

        return request<Unit, SearchMemesAPI200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchMemesAPI
     *
     * @param keywords A comma-separated list of words that must occur in the meme. (optional)
     * @param keywordsInImage Whether the keywords must occur in the image. (optional)
     * @param mediaType The media type (either &#39;image&#39;, &#39;video&#39; or even specific format such as &#39;jpg&#39;, &#39;png&#39;, or &#39;gif&#39;). (optional)
     * @param minRating The minimum rating in range [0.0,1.0] of the meme. (optional)
     * @param maxAgeDays The maximum age of the meme in days. (optional)
     * @param offset The number of memes to skip, between 0 and 1000. (optional)
     * @param number The number of memes, between 1 and 10. (optional)
     * @return RequestConfig
     */
    fun searchMemesAPIRequestConfig(keywords: kotlin.String?, keywordsInImage: kotlin.Boolean?, mediaType: kotlin.String?, minRating: kotlin.Double?, maxAgeDays: kotlin.Int?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (keywords != null) {
                    put("keywords", listOf(keywords.toString()))
                }
                if (keywordsInImage != null) {
                    put("keywords-in-image", listOf(keywordsInImage.toString()))
                }
                if (mediaType != null) {
                    put("media-type", listOf(mediaType.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxAgeDays != null) {
                    put("max-age-days", listOf(maxAgeDays.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-memes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
