/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.apileague

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.apileague.client.model.ComputeNutrition200Response
import com.apileague.client.model.RetrieveRecipeInformation200Response
import com.apileague.client.model.SearchRecipes200Response
import com.apileague.client.model.SearchRestaurants200Response

import com.squareup.moshi.Json

import apileague.infrastructure.ApiClient
import apileague.infrastructure.ApiResponse
import apileague.infrastructure.ClientException
import apileague.infrastructure.ClientError
import apileague.infrastructure.ServerException
import apileague.infrastructure.ServerError
import apileague.infrastructure.MultiValueMap
import apileague.infrastructure.PartConfig
import apileague.infrastructure.RequestConfig
import apileague.infrastructure.RequestMethod
import apileague.infrastructure.ResponseType
import apileague.infrastructure.Success
import apileague.infrastructure.toMultiValue

class FoodApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apileague.com")
        }
    }

    /**
     * Compute Nutrition
     * Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
     * @param ingredients A comma-separated list of the ingredients of the recipe.
     * @param servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
     * @param reduceOils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
     * @return ComputeNutrition200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun computeNutrition(ingredients: kotlin.String, servings: kotlin.Int? = null, reduceOils: kotlin.Boolean? = null) : ComputeNutrition200Response {
        val localVarResponse = computeNutritionWithHttpInfo(ingredients = ingredients, servings = servings, reduceOils = reduceOils)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ComputeNutrition200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Compute Nutrition
     * Compute detailed nutritional information for a given recipe (list of ingredients). The API will return the nutritional information for each ingredient, as well as the total nutritional content for the entire recipe. Aside from macro and micro nutrients, the API also returns flavanoid information and food properties such as glycemic index, glycemic load, and inflammation score.
     * @param ingredients A comma-separated list of the ingredients of the recipe.
     * @param servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
     * @param reduceOils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
     * @return ApiResponse<ComputeNutrition200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun computeNutritionWithHttpInfo(ingredients: kotlin.String, servings: kotlin.Int?, reduceOils: kotlin.Boolean?) : ApiResponse<ComputeNutrition200Response?> {
        val localVariableConfig = computeNutritionRequestConfig(ingredients = ingredients, servings = servings, reduceOils = reduceOils)

        return request<Unit, ComputeNutrition200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation computeNutrition
     *
     * @param ingredients A comma-separated list of the ingredients of the recipe.
     * @param servings The number of servings the ingredients make. Nutrition is computed per serving. (optional)
     * @param reduceOils If there is oil in the ingredients, e.g. 3 tablespoons olive oil but they are used for frying, not all of the oil is consumed and therefore should not be added to the computed nutrition. In this case set reduce-oils to true. (optional)
     * @return RequestConfig
     */
    fun computeNutritionRequestConfig(ingredients: kotlin.String, servings: kotlin.Int?, reduceOils: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ingredients", listOf(ingredients.toString()))
                if (servings != null) {
                    put("servings", listOf(servings.toString()))
                }
                if (reduceOils != null) {
                    put("reduce-oils", listOf(reduceOils.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/compute-nutrition",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Retrieve Recipe Information
     * Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
     * @param id The id of the recipe to retrieve.
     * @param addWinePairing Whether to pair a wine to the recipe. (optional)
     * @return RetrieveRecipeInformation200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun retrieveRecipeInformation(id: kotlin.Int, addWinePairing: kotlin.Boolean? = null) : RetrieveRecipeInformation200Response {
        val localVarResponse = retrieveRecipeInformationWithHttpInfo(id = id, addWinePairing = addWinePairing)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RetrieveRecipeInformation200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Retrieve Recipe Information
     * Get detailed recipe information such as dietary properties, macro and micro nutrients, used ingredients and their amounts, and more.
     * @param id The id of the recipe to retrieve.
     * @param addWinePairing Whether to pair a wine to the recipe. (optional)
     * @return ApiResponse<RetrieveRecipeInformation200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun retrieveRecipeInformationWithHttpInfo(id: kotlin.Int, addWinePairing: kotlin.Boolean?) : ApiResponse<RetrieveRecipeInformation200Response?> {
        val localVariableConfig = retrieveRecipeInformationRequestConfig(id = id, addWinePairing = addWinePairing)

        return request<Unit, RetrieveRecipeInformation200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation retrieveRecipeInformation
     *
     * @param id The id of the recipe to retrieve.
     * @param addWinePairing Whether to pair a wine to the recipe. (optional)
     * @return RequestConfig
     */
    fun retrieveRecipeInformationRequestConfig(id: kotlin.Int, addWinePairing: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("id", listOf(id.toString()))
                if (addWinePairing != null) {
                    put("add-wine-pairing", listOf(addWinePairing.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retrieve-recipe",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Recipes
     * Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
     * @param query The search query. (optional)
     * @param cuisines The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). (optional)
     * @param excludeCuisines The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). (optional)
     * @param mealType The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
     * @param diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param maxTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param minCalories The minimum amount of calories the recipe must have per serving. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have per serving. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have per serving. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have per serving. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have per serving. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have per serving. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have per serving. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have per serving. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of recipes to skip, between 0 and 900. (optional)
     * @param number The number of recipes, between 1 and 100. (optional)
     * @return SearchRecipes200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchRecipes(query: kotlin.String? = null, cuisines: kotlin.String? = null, excludeCuisines: kotlin.String? = null, mealType: kotlin.String? = null, diet: kotlin.String? = null, intolerances: kotlin.String? = null, equipment: kotlin.String? = null, includeIngredients: kotlin.String? = null, excludeIngredients: kotlin.String? = null, fillIngredients: kotlin.Boolean? = null, addRecipeInformation: kotlin.Boolean? = null, maxTime: kotlin.Int? = null, minCalories: kotlin.Double? = null, maxCalories: kotlin.Double? = null, minCarbs: kotlin.Double? = null, maxCarbs: kotlin.Double? = null, minProtein: kotlin.Double? = null, maxProtein: kotlin.Double? = null, minFat: kotlin.Double? = null, maxFat: kotlin.Double? = null, minSugar: kotlin.Double? = null, maxSugar: kotlin.Double? = null, minFiber: kotlin.Double? = null, maxFiber: kotlin.Double? = null, minFolate: kotlin.Double? = null, maxFolate: kotlin.Double? = null, minFolicAcid: kotlin.Double? = null, maxFolicAcid: kotlin.Double? = null, minIodine: kotlin.Double? = null, maxIodine: kotlin.Double? = null, minIron: kotlin.Double? = null, maxIron: kotlin.Double? = null, minZinc: kotlin.Double? = null, maxZinc: kotlin.Double? = null, minMagnesium: kotlin.Double? = null, maxMagnesium: kotlin.Double? = null, minManganese: kotlin.Double? = null, maxManganese: kotlin.Double? = null, minPhosphorus: kotlin.Double? = null, maxPhosphorus: kotlin.Double? = null, minPotassium: kotlin.Double? = null, maxPotassium: kotlin.Double? = null, minSodium: kotlin.Double? = null, maxSodium: kotlin.Double? = null, minSelenium: kotlin.Double? = null, maxSelenium: kotlin.Double? = null, minCopper: kotlin.Double? = null, maxCopper: kotlin.Double? = null, minCalcium: kotlin.Double? = null, maxCalcium: kotlin.Double? = null, minCholine: kotlin.Double? = null, maxCholine: kotlin.Double? = null, minCholesterol: kotlin.Double? = null, maxCholesterol: kotlin.Double? = null, minFluoride: kotlin.Double? = null, maxFluoride: kotlin.Double? = null, minAlcohol: kotlin.Double? = null, maxAlcohol: kotlin.Double? = null, minCaffeine: kotlin.Double? = null, maxCaffeine: kotlin.Double? = null, minSaturatedFat: kotlin.Double? = null, maxSaturatedFat: kotlin.Double? = null, minVitaminA: kotlin.Double? = null, maxVitaminA: kotlin.Double? = null, minVitaminC: kotlin.Double? = null, maxVitaminC: kotlin.Double? = null, minVitaminD: kotlin.Double? = null, maxVitaminD: kotlin.Double? = null, minVitaminE: kotlin.Double? = null, maxVitaminE: kotlin.Double? = null, minVitaminK: kotlin.Double? = null, maxVitaminK: kotlin.Double? = null, minVitaminB1: kotlin.Double? = null, maxVitaminB1: kotlin.Double? = null, minVitaminB2: kotlin.Double? = null, maxVitaminB2: kotlin.Double? = null, minVitaminB3: kotlin.Double? = null, maxVitaminB3: kotlin.Double? = null, minVitaminB5: kotlin.Double? = null, maxVitaminB5: kotlin.Double? = null, minVitaminB6: kotlin.Double? = null, maxVitaminB6: kotlin.Double? = null, minVitaminB12: kotlin.Double? = null, maxVitaminB12: kotlin.Double? = null, sort: kotlin.String? = null, sortDirection: kotlin.String? = null, offset: kotlin.Int? = null, number: kotlin.Int? = null) : SearchRecipes200Response {
        val localVarResponse = searchRecipesWithHttpInfo(query = query, cuisines = cuisines, excludeCuisines = excludeCuisines, mealType = mealType, diet = diet, intolerances = intolerances, equipment = equipment, includeIngredients = includeIngredients, excludeIngredients = excludeIngredients, fillIngredients = fillIngredients, addRecipeInformation = addRecipeInformation, maxTime = maxTime, minCalories = minCalories, maxCalories = maxCalories, minCarbs = minCarbs, maxCarbs = maxCarbs, minProtein = minProtein, maxProtein = maxProtein, minFat = minFat, maxFat = maxFat, minSugar = minSugar, maxSugar = maxSugar, minFiber = minFiber, maxFiber = maxFiber, minFolate = minFolate, maxFolate = maxFolate, minFolicAcid = minFolicAcid, maxFolicAcid = maxFolicAcid, minIodine = minIodine, maxIodine = maxIodine, minIron = minIron, maxIron = maxIron, minZinc = minZinc, maxZinc = maxZinc, minMagnesium = minMagnesium, maxMagnesium = maxMagnesium, minManganese = minManganese, maxManganese = maxManganese, minPhosphorus = minPhosphorus, maxPhosphorus = maxPhosphorus, minPotassium = minPotassium, maxPotassium = maxPotassium, minSodium = minSodium, maxSodium = maxSodium, minSelenium = minSelenium, maxSelenium = maxSelenium, minCopper = minCopper, maxCopper = maxCopper, minCalcium = minCalcium, maxCalcium = maxCalcium, minCholine = minCholine, maxCholine = maxCholine, minCholesterol = minCholesterol, maxCholesterol = maxCholesterol, minFluoride = minFluoride, maxFluoride = maxFluoride, minAlcohol = minAlcohol, maxAlcohol = maxAlcohol, minCaffeine = minCaffeine, maxCaffeine = maxCaffeine, minSaturatedFat = minSaturatedFat, maxSaturatedFat = maxSaturatedFat, minVitaminA = minVitaminA, maxVitaminA = maxVitaminA, minVitaminC = minVitaminC, maxVitaminC = maxVitaminC, minVitaminD = minVitaminD, maxVitaminD = maxVitaminD, minVitaminE = minVitaminE, maxVitaminE = maxVitaminE, minVitaminK = minVitaminK, maxVitaminK = maxVitaminK, minVitaminB1 = minVitaminB1, maxVitaminB1 = maxVitaminB1, minVitaminB2 = minVitaminB2, maxVitaminB2 = maxVitaminB2, minVitaminB3 = minVitaminB3, maxVitaminB3 = maxVitaminB3, minVitaminB5 = minVitaminB5, maxVitaminB5 = maxVitaminB5, minVitaminB6 = minVitaminB6, maxVitaminB6 = maxVitaminB6, minVitaminB12 = minVitaminB12, maxVitaminB12 = maxVitaminB12, sort = sort, sortDirection = sortDirection, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchRecipes200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Recipes
     * Search and filter thousands of recipes with natural language, e.g. pasta recipes without mushrooms but with truffles. You can filter by ingredients, diet, cuisine, meal type, macro and micro nutrition, intolerances, and much more.
     * @param query The search query. (optional)
     * @param cuisines The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). (optional)
     * @param excludeCuisines The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). (optional)
     * @param mealType The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
     * @param diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param maxTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param minCalories The minimum amount of calories the recipe must have per serving. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have per serving. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have per serving. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have per serving. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have per serving. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have per serving. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have per serving. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have per serving. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of recipes to skip, between 0 and 900. (optional)
     * @param number The number of recipes, between 1 and 100. (optional)
     * @return ApiResponse<SearchRecipes200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchRecipesWithHttpInfo(query: kotlin.String?, cuisines: kotlin.String?, excludeCuisines: kotlin.String?, mealType: kotlin.String?, diet: kotlin.String?, intolerances: kotlin.String?, equipment: kotlin.String?, includeIngredients: kotlin.String?, excludeIngredients: kotlin.String?, fillIngredients: kotlin.Boolean?, addRecipeInformation: kotlin.Boolean?, maxTime: kotlin.Int?, minCalories: kotlin.Double?, maxCalories: kotlin.Double?, minCarbs: kotlin.Double?, maxCarbs: kotlin.Double?, minProtein: kotlin.Double?, maxProtein: kotlin.Double?, minFat: kotlin.Double?, maxFat: kotlin.Double?, minSugar: kotlin.Double?, maxSugar: kotlin.Double?, minFiber: kotlin.Double?, maxFiber: kotlin.Double?, minFolate: kotlin.Double?, maxFolate: kotlin.Double?, minFolicAcid: kotlin.Double?, maxFolicAcid: kotlin.Double?, minIodine: kotlin.Double?, maxIodine: kotlin.Double?, minIron: kotlin.Double?, maxIron: kotlin.Double?, minZinc: kotlin.Double?, maxZinc: kotlin.Double?, minMagnesium: kotlin.Double?, maxMagnesium: kotlin.Double?, minManganese: kotlin.Double?, maxManganese: kotlin.Double?, minPhosphorus: kotlin.Double?, maxPhosphorus: kotlin.Double?, minPotassium: kotlin.Double?, maxPotassium: kotlin.Double?, minSodium: kotlin.Double?, maxSodium: kotlin.Double?, minSelenium: kotlin.Double?, maxSelenium: kotlin.Double?, minCopper: kotlin.Double?, maxCopper: kotlin.Double?, minCalcium: kotlin.Double?, maxCalcium: kotlin.Double?, minCholine: kotlin.Double?, maxCholine: kotlin.Double?, minCholesterol: kotlin.Double?, maxCholesterol: kotlin.Double?, minFluoride: kotlin.Double?, maxFluoride: kotlin.Double?, minAlcohol: kotlin.Double?, maxAlcohol: kotlin.Double?, minCaffeine: kotlin.Double?, maxCaffeine: kotlin.Double?, minSaturatedFat: kotlin.Double?, maxSaturatedFat: kotlin.Double?, minVitaminA: kotlin.Double?, maxVitaminA: kotlin.Double?, minVitaminC: kotlin.Double?, maxVitaminC: kotlin.Double?, minVitaminD: kotlin.Double?, maxVitaminD: kotlin.Double?, minVitaminE: kotlin.Double?, maxVitaminE: kotlin.Double?, minVitaminK: kotlin.Double?, maxVitaminK: kotlin.Double?, minVitaminB1: kotlin.Double?, maxVitaminB1: kotlin.Double?, minVitaminB2: kotlin.Double?, maxVitaminB2: kotlin.Double?, minVitaminB3: kotlin.Double?, maxVitaminB3: kotlin.Double?, minVitaminB5: kotlin.Double?, maxVitaminB5: kotlin.Double?, minVitaminB6: kotlin.Double?, maxVitaminB6: kotlin.Double?, minVitaminB12: kotlin.Double?, maxVitaminB12: kotlin.Double?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<SearchRecipes200Response?> {
        val localVariableConfig = searchRecipesRequestConfig(query = query, cuisines = cuisines, excludeCuisines = excludeCuisines, mealType = mealType, diet = diet, intolerances = intolerances, equipment = equipment, includeIngredients = includeIngredients, excludeIngredients = excludeIngredients, fillIngredients = fillIngredients, addRecipeInformation = addRecipeInformation, maxTime = maxTime, minCalories = minCalories, maxCalories = maxCalories, minCarbs = minCarbs, maxCarbs = maxCarbs, minProtein = minProtein, maxProtein = maxProtein, minFat = minFat, maxFat = maxFat, minSugar = minSugar, maxSugar = maxSugar, minFiber = minFiber, maxFiber = maxFiber, minFolate = minFolate, maxFolate = maxFolate, minFolicAcid = minFolicAcid, maxFolicAcid = maxFolicAcid, minIodine = minIodine, maxIodine = maxIodine, minIron = minIron, maxIron = maxIron, minZinc = minZinc, maxZinc = maxZinc, minMagnesium = minMagnesium, maxMagnesium = maxMagnesium, minManganese = minManganese, maxManganese = maxManganese, minPhosphorus = minPhosphorus, maxPhosphorus = maxPhosphorus, minPotassium = minPotassium, maxPotassium = maxPotassium, minSodium = minSodium, maxSodium = maxSodium, minSelenium = minSelenium, maxSelenium = maxSelenium, minCopper = minCopper, maxCopper = maxCopper, minCalcium = minCalcium, maxCalcium = maxCalcium, minCholine = minCholine, maxCholine = maxCholine, minCholesterol = minCholesterol, maxCholesterol = maxCholesterol, minFluoride = minFluoride, maxFluoride = maxFluoride, minAlcohol = minAlcohol, maxAlcohol = maxAlcohol, minCaffeine = minCaffeine, maxCaffeine = maxCaffeine, minSaturatedFat = minSaturatedFat, maxSaturatedFat = maxSaturatedFat, minVitaminA = minVitaminA, maxVitaminA = maxVitaminA, minVitaminC = minVitaminC, maxVitaminC = maxVitaminC, minVitaminD = minVitaminD, maxVitaminD = maxVitaminD, minVitaminE = minVitaminE, maxVitaminE = maxVitaminE, minVitaminK = minVitaminK, maxVitaminK = maxVitaminK, minVitaminB1 = minVitaminB1, maxVitaminB1 = maxVitaminB1, minVitaminB2 = minVitaminB2, maxVitaminB2 = maxVitaminB2, minVitaminB3 = minVitaminB3, maxVitaminB3 = maxVitaminB3, minVitaminB5 = minVitaminB5, maxVitaminB5 = maxVitaminB5, minVitaminB6 = minVitaminB6, maxVitaminB6 = maxVitaminB6, minVitaminB12 = minVitaminB12, maxVitaminB12 = maxVitaminB12, sort = sort, sortDirection = sortDirection, offset = offset, number = number)

        return request<Unit, SearchRecipes200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchRecipes
     *
     * @param query The search query. (optional)
     * @param cuisines The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). (optional)
     * @param excludeCuisines The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). (optional)
     * @param mealType The type of the recipe, one of: main course,side dish,dessert,appetizer,salad,bread,breakfast,soup,beverage,sauce,drink. (optional)
     * @param diet The diet the recipes must adhere to. One of the following: paleo,primal,grain-free,pescetarian,lacto vegetarian,ovo vegetarian,vegan,vegetarian. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. (optional)
     * @param equipment The equipment required. Multiple values will be interpreted as &#39;OR&#39;. (optional)
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     * @param addRecipeInformation If set to true, you get more information about the recipes returned. (optional)
     * @param maxTime The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     * @param minCalories The minimum amount of calories the recipe must have per serving. (optional)
     * @param maxCalories The maximum amount of calories the recipe can have per serving. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have per serving. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have per serving. (optional)
     * @param minProtein The minimum amount of protein in grams the recipe must have per serving. (optional)
     * @param maxProtein The maximum amount of protein in grams the recipe can have per serving. (optional)
     * @param minFat The minimum amount of fat in grams the recipe must have per serving. (optional)
     * @param maxFat The maximum amount of fat in grams the recipe can have per serving. (optional)
     * @param minSugar The minimum amount of sugar in grams the recipe must have per serving. (optional)
     * @param maxSugar The maximum amount of sugar in grams the recipe can have per serving. (optional)
     * @param minFiber The minimum amount of fiber in grams the recipe must have per serving. (optional)
     * @param maxFiber The maximum amount of fiber in grams the recipe can have per serving. (optional)
     * @param minFolate The minimum amount of folate in micrograms the recipe must have per serving. (optional)
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have per serving. (optional)
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have per serving. (optional)
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have per serving. (optional)
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have per serving. (optional)
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have per serving. (optional)
     * @param minIron The minimum amount of iron in milligrams the recipe must have per serving. (optional)
     * @param maxIron The maximum amount of iron in milligrams the recipe can have per serving. (optional)
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have per serving. (optional)
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have per serving. (optional)
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have per serving. (optional)
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have per serving. (optional)
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have per serving. (optional)
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have per serving. (optional)
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have per serving. (optional)
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have per serving. (optional)
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have per serving. (optional)
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have per serving. (optional)
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have per serving. (optional)
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have per serving. (optional)
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have per serving. (optional)
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have per serving. (optional)
     * @param minCopper The minimum amount of copper in milligrams the recipe must have per serving. (optional)
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have per serving. (optional)
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have per serving. (optional)
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have per serving. (optional)
     * @param minCholine The minimum amount of choline in milligrams the recipe must have per serving. (optional)
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have per serving. (optional)
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have per serving. (optional)
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have per serving. (optional)
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have per serving. (optional)
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have per serving. (optional)
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have per serving. (optional)
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have per serving. (optional)
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have per serving. (optional)
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have per serving. (optional)
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have per serving. (optional)
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have per serving. (optional)
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have per serving. (optional)
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have per serving. (optional)
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have per serving. (optional)
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have per serving. (optional)
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have per serving. (optional)
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have per serving. (optional)
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have per serving. (optional)
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have per serving. (optional)
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have per serving. (optional)
     * @param minVitaminB12 The minimum amount of Vitamin B12 in milligrams the recipe must have per serving. (optional)
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in milligrams the recipe can have per serving. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param offset The number of recipes to skip, between 0 and 900. (optional)
     * @param number The number of recipes, between 1 and 100. (optional)
     * @return RequestConfig
     */
    fun searchRecipesRequestConfig(query: kotlin.String?, cuisines: kotlin.String?, excludeCuisines: kotlin.String?, mealType: kotlin.String?, diet: kotlin.String?, intolerances: kotlin.String?, equipment: kotlin.String?, includeIngredients: kotlin.String?, excludeIngredients: kotlin.String?, fillIngredients: kotlin.Boolean?, addRecipeInformation: kotlin.Boolean?, maxTime: kotlin.Int?, minCalories: kotlin.Double?, maxCalories: kotlin.Double?, minCarbs: kotlin.Double?, maxCarbs: kotlin.Double?, minProtein: kotlin.Double?, maxProtein: kotlin.Double?, minFat: kotlin.Double?, maxFat: kotlin.Double?, minSugar: kotlin.Double?, maxSugar: kotlin.Double?, minFiber: kotlin.Double?, maxFiber: kotlin.Double?, minFolate: kotlin.Double?, maxFolate: kotlin.Double?, minFolicAcid: kotlin.Double?, maxFolicAcid: kotlin.Double?, minIodine: kotlin.Double?, maxIodine: kotlin.Double?, minIron: kotlin.Double?, maxIron: kotlin.Double?, minZinc: kotlin.Double?, maxZinc: kotlin.Double?, minMagnesium: kotlin.Double?, maxMagnesium: kotlin.Double?, minManganese: kotlin.Double?, maxManganese: kotlin.Double?, minPhosphorus: kotlin.Double?, maxPhosphorus: kotlin.Double?, minPotassium: kotlin.Double?, maxPotassium: kotlin.Double?, minSodium: kotlin.Double?, maxSodium: kotlin.Double?, minSelenium: kotlin.Double?, maxSelenium: kotlin.Double?, minCopper: kotlin.Double?, maxCopper: kotlin.Double?, minCalcium: kotlin.Double?, maxCalcium: kotlin.Double?, minCholine: kotlin.Double?, maxCholine: kotlin.Double?, minCholesterol: kotlin.Double?, maxCholesterol: kotlin.Double?, minFluoride: kotlin.Double?, maxFluoride: kotlin.Double?, minAlcohol: kotlin.Double?, maxAlcohol: kotlin.Double?, minCaffeine: kotlin.Double?, maxCaffeine: kotlin.Double?, minSaturatedFat: kotlin.Double?, maxSaturatedFat: kotlin.Double?, minVitaminA: kotlin.Double?, maxVitaminA: kotlin.Double?, minVitaminC: kotlin.Double?, maxVitaminC: kotlin.Double?, minVitaminD: kotlin.Double?, maxVitaminD: kotlin.Double?, minVitaminE: kotlin.Double?, maxVitaminE: kotlin.Double?, minVitaminK: kotlin.Double?, maxVitaminK: kotlin.Double?, minVitaminB1: kotlin.Double?, maxVitaminB1: kotlin.Double?, minVitaminB2: kotlin.Double?, maxVitaminB2: kotlin.Double?, minVitaminB3: kotlin.Double?, maxVitaminB3: kotlin.Double?, minVitaminB5: kotlin.Double?, maxVitaminB5: kotlin.Double?, minVitaminB6: kotlin.Double?, maxVitaminB6: kotlin.Double?, minVitaminB12: kotlin.Double?, maxVitaminB12: kotlin.Double?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (cuisines != null) {
                    put("cuisines", listOf(cuisines.toString()))
                }
                if (excludeCuisines != null) {
                    put("exclude-cuisines", listOf(excludeCuisines.toString()))
                }
                if (mealType != null) {
                    put("meal-type", listOf(mealType.toString()))
                }
                if (diet != null) {
                    put("diet", listOf(diet.toString()))
                }
                if (intolerances != null) {
                    put("intolerances", listOf(intolerances.toString()))
                }
                if (equipment != null) {
                    put("equipment", listOf(equipment.toString()))
                }
                if (includeIngredients != null) {
                    put("include-ingredients", listOf(includeIngredients.toString()))
                }
                if (excludeIngredients != null) {
                    put("exclude-ingredients", listOf(excludeIngredients.toString()))
                }
                if (fillIngredients != null) {
                    put("fill-ingredients", listOf(fillIngredients.toString()))
                }
                if (addRecipeInformation != null) {
                    put("add-recipe-information", listOf(addRecipeInformation.toString()))
                }
                if (maxTime != null) {
                    put("max-time", listOf(maxTime.toString()))
                }
                if (minCalories != null) {
                    put("min-calories", listOf(minCalories.toString()))
                }
                if (maxCalories != null) {
                    put("max-calories", listOf(maxCalories.toString()))
                }
                if (minCarbs != null) {
                    put("min-carbs", listOf(minCarbs.toString()))
                }
                if (maxCarbs != null) {
                    put("max-carbs", listOf(maxCarbs.toString()))
                }
                if (minProtein != null) {
                    put("min-protein", listOf(minProtein.toString()))
                }
                if (maxProtein != null) {
                    put("max-protein", listOf(maxProtein.toString()))
                }
                if (minFat != null) {
                    put("min-fat", listOf(minFat.toString()))
                }
                if (maxFat != null) {
                    put("max-fat", listOf(maxFat.toString()))
                }
                if (minSugar != null) {
                    put("min-sugar", listOf(minSugar.toString()))
                }
                if (maxSugar != null) {
                    put("max-sugar", listOf(maxSugar.toString()))
                }
                if (minFiber != null) {
                    put("min-fiber", listOf(minFiber.toString()))
                }
                if (maxFiber != null) {
                    put("max-fiber", listOf(maxFiber.toString()))
                }
                if (minFolate != null) {
                    put("min-folate", listOf(minFolate.toString()))
                }
                if (maxFolate != null) {
                    put("max-folate", listOf(maxFolate.toString()))
                }
                if (minFolicAcid != null) {
                    put("min-folic-acid", listOf(minFolicAcid.toString()))
                }
                if (maxFolicAcid != null) {
                    put("max-folic-acid", listOf(maxFolicAcid.toString()))
                }
                if (minIodine != null) {
                    put("min-iodine", listOf(minIodine.toString()))
                }
                if (maxIodine != null) {
                    put("max-iodine", listOf(maxIodine.toString()))
                }
                if (minIron != null) {
                    put("min-iron", listOf(minIron.toString()))
                }
                if (maxIron != null) {
                    put("max-iron", listOf(maxIron.toString()))
                }
                if (minZinc != null) {
                    put("min-zinc", listOf(minZinc.toString()))
                }
                if (maxZinc != null) {
                    put("max-zinc", listOf(maxZinc.toString()))
                }
                if (minMagnesium != null) {
                    put("min-magnesium", listOf(minMagnesium.toString()))
                }
                if (maxMagnesium != null) {
                    put("max-magnesium", listOf(maxMagnesium.toString()))
                }
                if (minManganese != null) {
                    put("min-manganese", listOf(minManganese.toString()))
                }
                if (maxManganese != null) {
                    put("max-manganese", listOf(maxManganese.toString()))
                }
                if (minPhosphorus != null) {
                    put("min-phosphorus", listOf(minPhosphorus.toString()))
                }
                if (maxPhosphorus != null) {
                    put("max-phosphorus", listOf(maxPhosphorus.toString()))
                }
                if (minPotassium != null) {
                    put("min-potassium", listOf(minPotassium.toString()))
                }
                if (maxPotassium != null) {
                    put("max-potassium", listOf(maxPotassium.toString()))
                }
                if (minSodium != null) {
                    put("min-sodium", listOf(minSodium.toString()))
                }
                if (maxSodium != null) {
                    put("max-sodium", listOf(maxSodium.toString()))
                }
                if (minSelenium != null) {
                    put("min-selenium", listOf(minSelenium.toString()))
                }
                if (maxSelenium != null) {
                    put("max-selenium", listOf(maxSelenium.toString()))
                }
                if (minCopper != null) {
                    put("min-copper", listOf(minCopper.toString()))
                }
                if (maxCopper != null) {
                    put("max-copper", listOf(maxCopper.toString()))
                }
                if (minCalcium != null) {
                    put("min-calcium", listOf(minCalcium.toString()))
                }
                if (maxCalcium != null) {
                    put("max-calcium", listOf(maxCalcium.toString()))
                }
                if (minCholine != null) {
                    put("min-choline", listOf(minCholine.toString()))
                }
                if (maxCholine != null) {
                    put("max-choline", listOf(maxCholine.toString()))
                }
                if (minCholesterol != null) {
                    put("min-cholesterol", listOf(minCholesterol.toString()))
                }
                if (maxCholesterol != null) {
                    put("max-cholesterol", listOf(maxCholesterol.toString()))
                }
                if (minFluoride != null) {
                    put("min-fluoride", listOf(minFluoride.toString()))
                }
                if (maxFluoride != null) {
                    put("max-fluoride", listOf(maxFluoride.toString()))
                }
                if (minAlcohol != null) {
                    put("min-alcohol", listOf(minAlcohol.toString()))
                }
                if (maxAlcohol != null) {
                    put("max-alcohol", listOf(maxAlcohol.toString()))
                }
                if (minCaffeine != null) {
                    put("min-caffeine", listOf(minCaffeine.toString()))
                }
                if (maxCaffeine != null) {
                    put("max-caffeine", listOf(maxCaffeine.toString()))
                }
                if (minSaturatedFat != null) {
                    put("min-saturated-fat", listOf(minSaturatedFat.toString()))
                }
                if (maxSaturatedFat != null) {
                    put("max-saturated-fat", listOf(maxSaturatedFat.toString()))
                }
                if (minVitaminA != null) {
                    put("min-vitamin-a", listOf(minVitaminA.toString()))
                }
                if (maxVitaminA != null) {
                    put("max-vitamin-a", listOf(maxVitaminA.toString()))
                }
                if (minVitaminC != null) {
                    put("min-vitamin-c", listOf(minVitaminC.toString()))
                }
                if (maxVitaminC != null) {
                    put("max-vitamin-c", listOf(maxVitaminC.toString()))
                }
                if (minVitaminD != null) {
                    put("min-vitamin-d", listOf(minVitaminD.toString()))
                }
                if (maxVitaminD != null) {
                    put("max-vitamin-d", listOf(maxVitaminD.toString()))
                }
                if (minVitaminE != null) {
                    put("min-vitamin-e", listOf(minVitaminE.toString()))
                }
                if (maxVitaminE != null) {
                    put("max-vitamin-e", listOf(maxVitaminE.toString()))
                }
                if (minVitaminK != null) {
                    put("min-vitamin-k", listOf(minVitaminK.toString()))
                }
                if (maxVitaminK != null) {
                    put("max-vitamin-k", listOf(maxVitaminK.toString()))
                }
                if (minVitaminB1 != null) {
                    put("min-vitamin-b1", listOf(minVitaminB1.toString()))
                }
                if (maxVitaminB1 != null) {
                    put("max-vitamin-b1", listOf(maxVitaminB1.toString()))
                }
                if (minVitaminB2 != null) {
                    put("min-vitamin-b2", listOf(minVitaminB2.toString()))
                }
                if (maxVitaminB2 != null) {
                    put("max-vitamin-b2", listOf(maxVitaminB2.toString()))
                }
                if (minVitaminB3 != null) {
                    put("min-vitamin-b3", listOf(minVitaminB3.toString()))
                }
                if (maxVitaminB3 != null) {
                    put("max-vitamin-b3", listOf(maxVitaminB3.toString()))
                }
                if (minVitaminB5 != null) {
                    put("min-vitamin-b5", listOf(minVitaminB5.toString()))
                }
                if (maxVitaminB5 != null) {
                    put("max-vitamin-b5", listOf(maxVitaminB5.toString()))
                }
                if (minVitaminB6 != null) {
                    put("min-vitamin-b6", listOf(minVitaminB6.toString()))
                }
                if (maxVitaminB6 != null) {
                    put("max-vitamin-b6", listOf(maxVitaminB6.toString()))
                }
                if (minVitaminB12 != null) {
                    put("min-vitamin-b12", listOf(minVitaminB12.toString()))
                }
                if (maxVitaminB12 != null) {
                    put("max-vitamin-b12", listOf(maxVitaminB12.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (sortDirection != null) {
                    put("sort-direction", listOf(sortDirection.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-recipes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Restaurants
     * Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
     * @param lat The latitude to search around.
     * @param lon The longitude to search around.
     * @param query The search query. (optional)
     * @param distance The maximum distance of the restaurant in miles around the given location. (optional)
     * @param budget The budget in USD for the meal. (optional)
     * @param minRating The minimum rating of the restaurants in range [0,5]. (optional)
     * @param cuisine The cuisine that the restaurants should support. (optional)
     * @param isOpen Whether the restaurants have to be open now. (optional)
     * @param page The page of the results. (optional)
     * @param sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
     * @return SearchRestaurants200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchRestaurants(lat: kotlin.Double, lon: kotlin.Double, query: kotlin.String? = null, distance: kotlin.Int? = null, budget: kotlin.Double? = null, minRating: kotlin.Double? = null, cuisine: kotlin.String? = null, isOpen: kotlin.Boolean? = null, page: kotlin.Int? = null, sort: kotlin.String? = null) : SearchRestaurants200Response {
        val localVarResponse = searchRestaurantsWithHttpInfo(lat = lat, lon = lon, query = query, distance = distance, budget = budget, minRating = minRating, cuisine = cuisine, isOpen = isOpen, page = page, sort = sort)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchRestaurants200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Restaurants
     * Search through thousands of restaurants (in North America) by location, cuisine, budget, and more.
     * @param lat The latitude to search around.
     * @param lon The longitude to search around.
     * @param query The search query. (optional)
     * @param distance The maximum distance of the restaurant in miles around the given location. (optional)
     * @param budget The budget in USD for the meal. (optional)
     * @param minRating The minimum rating of the restaurants in range [0,5]. (optional)
     * @param cuisine The cuisine that the restaurants should support. (optional)
     * @param isOpen Whether the restaurants have to be open now. (optional)
     * @param page The page of the results. (optional)
     * @param sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
     * @return ApiResponse<SearchRestaurants200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchRestaurantsWithHttpInfo(lat: kotlin.Double, lon: kotlin.Double, query: kotlin.String?, distance: kotlin.Int?, budget: kotlin.Double?, minRating: kotlin.Double?, cuisine: kotlin.String?, isOpen: kotlin.Boolean?, page: kotlin.Int?, sort: kotlin.String?) : ApiResponse<SearchRestaurants200Response?> {
        val localVariableConfig = searchRestaurantsRequestConfig(lat = lat, lon = lon, query = query, distance = distance, budget = budget, minRating = minRating, cuisine = cuisine, isOpen = isOpen, page = page, sort = sort)

        return request<Unit, SearchRestaurants200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchRestaurants
     *
     * @param lat The latitude to search around.
     * @param lon The longitude to search around.
     * @param query The search query. (optional)
     * @param distance The maximum distance of the restaurant in miles around the given location. (optional)
     * @param budget The budget in USD for the meal. (optional)
     * @param minRating The minimum rating of the restaurants in range [0,5]. (optional)
     * @param cuisine The cuisine that the restaurants should support. (optional)
     * @param isOpen Whether the restaurants have to be open now. (optional)
     * @param page The page of the results. (optional)
     * @param sort The sort parameter, one of: cheapest, fastest, rating, distance or relevance. (optional)
     * @return RequestConfig
     */
    fun searchRestaurantsRequestConfig(lat: kotlin.Double, lon: kotlin.Double, query: kotlin.String?, distance: kotlin.Int?, budget: kotlin.Double?, minRating: kotlin.Double?, cuisine: kotlin.String?, isOpen: kotlin.Boolean?, page: kotlin.Int?, sort: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                put("lat", listOf(lat.toString()))
                put("lon", listOf(lon.toString()))
                if (distance != null) {
                    put("distance", listOf(distance.toString()))
                }
                if (budget != null) {
                    put("budget", listOf(budget.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (cuisine != null) {
                    put("cuisine", listOf(cuisine.toString()))
                }
                if (isOpen != null) {
                    put("is-open", listOf(isOpen.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-restaurants",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
