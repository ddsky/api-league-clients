/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.apileague

import java.io.IOException

import com.apileague.client.model.InlineResponse20010
import com.apileague.client.model.InlineResponse2009

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class KnowledgeApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apileague.com")
        }
    }

    /**
    * Random Quote
    * This API returns a random quote from a collection of quotes. The quotes are from famous people and are in English.
    * @param minLength The minimum length of the quote in letters. (optional)
    * @param maxLength The maximum length of the quote in letters. (optional)
    * @return InlineResponse20010
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomQuote(minLength: kotlin.Int?, maxLength: kotlin.Int?) : InlineResponse20010 {
        val localVarResponse = randomQuoteWithHttpInfo(minLength = minLength, maxLength = maxLength)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20010
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Random Quote
    * This API returns a random quote from a collection of quotes. The quotes are from famous people and are in English.
    * @param minLength The minimum length of the quote in letters. (optional)
    * @param maxLength The maximum length of the quote in letters. (optional)
    * @return ApiResponse<InlineResponse20010?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomQuoteWithHttpInfo(minLength: kotlin.Int?, maxLength: kotlin.Int?) : ApiResponse<InlineResponse20010?> {
        val localVariableConfig = randomQuoteRequestConfig(minLength = minLength, maxLength = maxLength)

        return request<Unit, InlineResponse20010>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation randomQuote
    *
    * @param minLength The minimum length of the quote in letters. (optional)
    * @param maxLength The maximum length of the quote in letters. (optional)
    * @return RequestConfig
    */
    fun randomQuoteRequestConfig(minLength: kotlin.Int?, maxLength: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (minLength != null) {
                    put("min-length", listOf(minLength.toString()))
                }
                if (maxLength != null) {
                    put("max-length", listOf(maxLength.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retrieve-random-quote",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Random Trivia
    * This endpoint returns a random piece of trivia.
    * @param maxLength The maximum length of the trivia in letters. (optional)
    * @return InlineResponse2009
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun randomTrivia(maxLength: kotlin.Int?) : InlineResponse2009 {
        val localVarResponse = randomTriviaWithHttpInfo(maxLength = maxLength)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2009
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Random Trivia
    * This endpoint returns a random piece of trivia.
    * @param maxLength The maximum length of the trivia in letters. (optional)
    * @return ApiResponse<InlineResponse2009?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun randomTriviaWithHttpInfo(maxLength: kotlin.Int?) : ApiResponse<InlineResponse2009?> {
        val localVariableConfig = randomTriviaRequestConfig(maxLength = maxLength)

        return request<Unit, InlineResponse2009>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation randomTrivia
    *
    * @param maxLength The maximum length of the trivia in letters. (optional)
    * @return RequestConfig
    */
    fun randomTriviaRequestConfig(maxLength: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (maxLength != null) {
                    put("max-length", listOf(maxLength.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/retrieve-random-trivia",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
