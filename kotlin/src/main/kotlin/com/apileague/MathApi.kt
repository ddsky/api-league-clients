/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.apileague

import java.io.IOException

import com.apileague.client.model.InlineResponse20030

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class MathApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apileague.com")
        }
    }

    /**
    * Convert Units
    * Convert units from one to another. The API returns the amount and the unit of the target unit.
    * @param sourceAmount The source amount. 
    * @param sourceUnit The source unit. 
    * @param targetUnit The unit to which should be converted. 
    * @param foodName An optional food name. For converting foods the food is relevant as they have different densities. (optional)
    * @return InlineResponse20030
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun convertUnits(sourceAmount: kotlin.Double, sourceUnit: kotlin.String, targetUnit: kotlin.String, foodName: kotlin.String?) : InlineResponse20030 {
        val localVarResponse = convertUnitsWithHttpInfo(sourceAmount = sourceAmount, sourceUnit = sourceUnit, targetUnit = targetUnit, foodName = foodName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse20030
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Convert Units
    * Convert units from one to another. The API returns the amount and the unit of the target unit.
    * @param sourceAmount The source amount. 
    * @param sourceUnit The source unit. 
    * @param targetUnit The unit to which should be converted. 
    * @param foodName An optional food name. For converting foods the food is relevant as they have different densities. (optional)
    * @return ApiResponse<InlineResponse20030?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun convertUnitsWithHttpInfo(sourceAmount: kotlin.Double, sourceUnit: kotlin.String, targetUnit: kotlin.String, foodName: kotlin.String?) : ApiResponse<InlineResponse20030?> {
        val localVariableConfig = convertUnitsRequestConfig(sourceAmount = sourceAmount, sourceUnit = sourceUnit, targetUnit = targetUnit, foodName = foodName)

        return request<Unit, InlineResponse20030>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation convertUnits
    *
    * @param sourceAmount The source amount. 
    * @param sourceUnit The source unit. 
    * @param targetUnit The unit to which should be converted. 
    * @param foodName An optional food name. For converting foods the food is relevant as they have different densities. (optional)
    * @return RequestConfig
    */
    fun convertUnitsRequestConfig(sourceAmount: kotlin.Double, sourceUnit: kotlin.String, targetUnit: kotlin.String, foodName: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("source-amount", listOf(sourceAmount.toString()))
                put("source-unit", listOf(sourceUnit.toString()))
                put("target-unit", listOf(targetUnit.toString()))
                if (foodName != null) {
                    put("food-name", listOf(foodName.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/convert-units",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
