/**
 * API League
 *
 * API League is a Hub for World Class APIs.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: mail@apileague.com
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.apileague

import java.io.IOException

import com.apileague.client.model.InlineResponse2002
import com.apileague.client.model.InlineResponse2003

import com.squareup.moshi.Json

import org.openapitools.client.infrastructure.ApiClient
import org.openapitools.client.infrastructure.ApiResponse
import org.openapitools.client.infrastructure.ClientException
import org.openapitools.client.infrastructure.ClientError
import org.openapitools.client.infrastructure.ServerException
import org.openapitools.client.infrastructure.ServerError
import org.openapitools.client.infrastructure.MultiValueMap
import org.openapitools.client.infrastructure.RequestConfig
import org.openapitools.client.infrastructure.RequestMethod
import org.openapitools.client.infrastructure.ResponseType
import org.openapitools.client.infrastructure.Success
import org.openapitools.client.infrastructure.toMultiValue

class NewsApi(basePath: kotlin.String = defaultBasePath) : ApiClient(basePath) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apileague.com")
        }
    }

    /**
    * Extract News
    * Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
    * @param url The url of the news. 
    * @param analyze Whether to analyze the news (extract entities etc.) 
    * @return InlineResponse2003
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun extractNews(url: kotlin.String, analyze: kotlin.Boolean) : InlineResponse2003 {
        val localVarResponse = extractNewsWithHttpInfo(url = url, analyze = analyze)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2003
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Extract News
    * Extract a news article from a website to a well structure JSON object. The API will return the title, text, URL, image, publish date, author, language, source country, and sentiment of the news article.
    * @param url The url of the news. 
    * @param analyze Whether to analyze the news (extract entities etc.) 
    * @return ApiResponse<InlineResponse2003?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun extractNewsWithHttpInfo(url: kotlin.String, analyze: kotlin.Boolean) : ApiResponse<InlineResponse2003?> {
        val localVariableConfig = extractNewsRequestConfig(url = url, analyze = analyze)

        return request<Unit, InlineResponse2003>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation extractNews
    *
    * @param url The url of the news. 
    * @param analyze Whether to analyze the news (extract entities etc.) 
    * @return RequestConfig
    */
    fun extractNewsRequestConfig(url: kotlin.String, analyze: kotlin.Boolean) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("url", listOf(url.toString()))
                put("analyze", listOf(analyze.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/extract-news",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
    * Search News
    * Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
    * @param text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
    * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
    * @param language The ISO 6391 language code of the news. (optional)
    * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
    * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
    * @param earliestPublishDate The news must have been published after this date. (optional)
    * @param latestPublishDate The news must have been published before this date. (optional)
    * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
    * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
    * @param entities Filter news by entities (see semantic types). (optional)
    * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
    * @param sort The sorting criteria (publish-time or sentiment). (optional)
    * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
    * @param offset The number of news to skip in range [0,10000] (optional)
    * @param number The number of news to return in range [1,100] (optional)
    * @return InlineResponse2002
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchNews(text: kotlin.String?, sourceCountries: kotlin.String?, language: kotlin.String?, minSentiment: kotlin.Double?, maxSentiment: kotlin.Double?, earliestPublishDate: kotlin.String?, latestPublishDate: kotlin.String?, newsSources: kotlin.String?, authors: kotlin.String?, entities: kotlin.String?, locationFilter: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?) : InlineResponse2002 {
        val localVarResponse = searchNewsWithHttpInfo(text = text, sourceCountries = sourceCountries, language = language, minSentiment = minSentiment, maxSentiment = maxSentiment, earliestPublishDate = earliestPublishDate, latestPublishDate = latestPublishDate, newsSources = newsSources, authors = authors, entities = entities, locationFilter = locationFilter, sort = sort, sortDirection = sortDirection, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as InlineResponse2002
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
    * Search News
    * Search and filter news by text, date, location, language, and more. The API returns a list of news articles matching the given criteria. You can set as many filtering parameters as you like, but you have to set at least one, e.g. text or language.
    * @param text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
    * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
    * @param language The ISO 6391 language code of the news. (optional)
    * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
    * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
    * @param earliestPublishDate The news must have been published after this date. (optional)
    * @param latestPublishDate The news must have been published before this date. (optional)
    * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
    * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
    * @param entities Filter news by entities (see semantic types). (optional)
    * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
    * @param sort The sorting criteria (publish-time or sentiment). (optional)
    * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
    * @param offset The number of news to skip in range [0,10000] (optional)
    * @param number The number of news to return in range [1,100] (optional)
    * @return ApiResponse<InlineResponse2002?>
    * @throws IllegalStateException If the request is not correctly configured
    * @throws IOException Rethrows the OkHttp execute method exception
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchNewsWithHttpInfo(text: kotlin.String?, sourceCountries: kotlin.String?, language: kotlin.String?, minSentiment: kotlin.Double?, maxSentiment: kotlin.Double?, earliestPublishDate: kotlin.String?, latestPublishDate: kotlin.String?, newsSources: kotlin.String?, authors: kotlin.String?, entities: kotlin.String?, locationFilter: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<InlineResponse2002?> {
        val localVariableConfig = searchNewsRequestConfig(text = text, sourceCountries = sourceCountries, language = language, minSentiment = minSentiment, maxSentiment = maxSentiment, earliestPublishDate = earliestPublishDate, latestPublishDate = latestPublishDate, newsSources = newsSources, authors = authors, entities = entities, locationFilter = locationFilter, sort = sort, sortDirection = sortDirection, offset = offset, number = number)

        return request<Unit, InlineResponse2002>(
            localVariableConfig
        )
    }

    /**
    * To obtain the request config of the operation searchNews
    *
    * @param text The text to match in the news content. By default all query terms are expected, you can use an uppercase OR to search for any terms, e.g. tesla OR ford (optional)
    * @param sourceCountries A comma-separated list of ISO 3166 country codes from which the news should originate. (optional)
    * @param language The ISO 6391 language code of the news. (optional)
    * @param minSentiment The minimal sentiment of the news in range [-1,1]. (optional)
    * @param maxSentiment The maximal sentiment of the news in range [-1,1]. (optional)
    * @param earliestPublishDate The news must have been published after this date. (optional)
    * @param latestPublishDate The news must have been published before this date. (optional)
    * @param newsSources A comma-separated list of news sources from which the news should originate. (optional)
    * @param authors A comma-separated list of author names. Only news from any of the given authors will be returned. (optional)
    * @param entities Filter news by entities (see semantic types). (optional)
    * @param locationFilter Filter news by radius around a certain location. Format is \&quot;latitude,longitude,radius in kilometers\&quot; (optional)
    * @param sort The sorting criteria (publish-time or sentiment). (optional)
    * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
    * @param offset The number of news to skip in range [0,10000] (optional)
    * @param number The number of news to return in range [1,100] (optional)
    * @return RequestConfig
    */
    fun searchNewsRequestConfig(text: kotlin.String?, sourceCountries: kotlin.String?, language: kotlin.String?, minSentiment: kotlin.Double?, maxSentiment: kotlin.Double?, earliestPublishDate: kotlin.String?, latestPublishDate: kotlin.String?, newsSources: kotlin.String?, authors: kotlin.String?, entities: kotlin.String?, locationFilter: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (text != null) {
                    put("text", listOf(text.toString()))
                }
                if (sourceCountries != null) {
                    put("source-countries", listOf(sourceCountries.toString()))
                }
                if (language != null) {
                    put("language", listOf(language.toString()))
                }
                if (minSentiment != null) {
                    put("min-sentiment", listOf(minSentiment.toString()))
                }
                if (maxSentiment != null) {
                    put("max-sentiment", listOf(maxSentiment.toString()))
                }
                if (earliestPublishDate != null) {
                    put("earliest-publish-date", listOf(earliestPublishDate.toString()))
                }
                if (latestPublishDate != null) {
                    put("latest-publish-date", listOf(latestPublishDate.toString()))
                }
                if (newsSources != null) {
                    put("news-sources", listOf(newsSources.toString()))
                }
                if (authors != null) {
                    put("authors", listOf(authors.toString()))
                }
                if (entities != null) {
                    put("entities", listOf(entities.toString()))
                }
                if (locationFilter != null) {
                    put("location-filter", listOf(locationFilter.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (sortDirection != null) {
                    put("sort-direction", listOf(sortDirection.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-news",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

}
