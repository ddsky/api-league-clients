/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.apileague

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.apileague.client.model.FindSimilarBooks200Response
import com.apileague.client.model.SearchBooks200Response

import com.squareup.moshi.Json

import apileague.infrastructure.ApiClient
import apileague.infrastructure.ApiResponse
import apileague.infrastructure.ClientException
import apileague.infrastructure.ClientError
import apileague.infrastructure.ServerException
import apileague.infrastructure.ServerError
import apileague.infrastructure.MultiValueMap
import apileague.infrastructure.PartConfig
import apileague.infrastructure.RequestConfig
import apileague.infrastructure.RequestMethod
import apileague.infrastructure.ResponseType
import apileague.infrastructure.Success
import apileague.infrastructure.toMultiValue

class BooksApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.apileague.com")
        }
    }

    /**
     * Find Similar Books
     * Find books that are similar to the given book. This is useful for recommending books to users based on their reading history or preferences. The response will contain a list of similar books with their title, id, and cover image.
     * @param id The id of the book to which similar books should be found.
     * @param number The number of similar books to return in range [1,100] (optional)
     * @return FindSimilarBooks200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findSimilarBooks(id: kotlin.Int, number: kotlin.Int? = null) : FindSimilarBooks200Response {
        val localVarResponse = findSimilarBooksWithHttpInfo(id = id, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as FindSimilarBooks200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Find Similar Books
     * Find books that are similar to the given book. This is useful for recommending books to users based on their reading history or preferences. The response will contain a list of similar books with their title, id, and cover image.
     * @param id The id of the book to which similar books should be found.
     * @param number The number of similar books to return in range [1,100] (optional)
     * @return ApiResponse<FindSimilarBooks200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun findSimilarBooksWithHttpInfo(id: kotlin.Int, number: kotlin.Int?) : ApiResponse<FindSimilarBooks200Response?> {
        val localVariableConfig = findSimilarBooksRequestConfig(id = id, number = number)

        return request<Unit, FindSimilarBooks200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation findSimilarBooks
     *
     * @param id The id of the book to which similar books should be found.
     * @param number The number of similar books to return in range [1,100] (optional)
     * @return RequestConfig
     */
    fun findSimilarBooksRequestConfig(id: kotlin.Int, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/list-similar-books".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Books
     * Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query.
     * @param query The search query. (optional)
     * @param earliestPublishYear The books must have been published after this year. (optional)
     * @param latestPublishYear The books must have been published before this year. (optional)
     * @param minRating The minimum rating the book must have gotten in the interval [0,1]. (optional)
     * @param maxRating The maximum rating the book must have gotten in the interval [0,1]. (optional)
     * @param genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
     * @param authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
     * @param isbn Only the book matching the ISBN-13 will be returned (optional)
     * @param oclc Only the book matching the OCLC will be returned (optional)
     * @param sort The sorting criteria (publish-date or rating). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param groupResults Whether to group similar editions of the same book. (optional)
     * @param offset The number of books to skip in range [0,1000] (optional)
     * @param number The number of books to return in range [1,100] (optional)
     * @return SearchBooks200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchBooks(query: kotlin.String? = null, earliestPublishYear: kotlin.Int? = null, latestPublishYear: kotlin.Int? = null, minRating: kotlin.Double? = null, maxRating: kotlin.Double? = null, genres: kotlin.String? = null, authors: kotlin.String? = null, isbn: kotlin.String? = null, oclc: kotlin.String? = null, sort: kotlin.String? = null, sortDirection: kotlin.String? = null, groupResults: kotlin.Boolean? = null, offset: kotlin.Int? = null, number: kotlin.Int? = null) : SearchBooks200Response {
        val localVarResponse = searchBooksWithHttpInfo(query = query, earliestPublishYear = earliestPublishYear, latestPublishYear = latestPublishYear, minRating = minRating, maxRating = maxRating, genres = genres, authors = authors, isbn = isbn, oclc = oclc, sort = sort, sortDirection = sortDirection, groupResults = groupResults, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchBooks200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Books
     * Search and filter books based on matching a query, the ISBN, rating, and more fields. The query is semantically parsed using our own large ontology. That means you can search for \&quot;books about dogs\&quot; and will automatically also find books about \&quot;border collies\&quot; and other types without specifying them in the query.
     * @param query The search query. (optional)
     * @param earliestPublishYear The books must have been published after this year. (optional)
     * @param latestPublishYear The books must have been published before this year. (optional)
     * @param minRating The minimum rating the book must have gotten in the interval [0,1]. (optional)
     * @param maxRating The maximum rating the book must have gotten in the interval [0,1]. (optional)
     * @param genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
     * @param authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
     * @param isbn Only the book matching the ISBN-13 will be returned (optional)
     * @param oclc Only the book matching the OCLC will be returned (optional)
     * @param sort The sorting criteria (publish-date or rating). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param groupResults Whether to group similar editions of the same book. (optional)
     * @param offset The number of books to skip in range [0,1000] (optional)
     * @param number The number of books to return in range [1,100] (optional)
     * @return ApiResponse<SearchBooks200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchBooksWithHttpInfo(query: kotlin.String?, earliestPublishYear: kotlin.Int?, latestPublishYear: kotlin.Int?, minRating: kotlin.Double?, maxRating: kotlin.Double?, genres: kotlin.String?, authors: kotlin.String?, isbn: kotlin.String?, oclc: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, groupResults: kotlin.Boolean?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<SearchBooks200Response?> {
        val localVariableConfig = searchBooksRequestConfig(query = query, earliestPublishYear = earliestPublishYear, latestPublishYear = latestPublishYear, minRating = minRating, maxRating = maxRating, genres = genres, authors = authors, isbn = isbn, oclc = oclc, sort = sort, sortDirection = sortDirection, groupResults = groupResults, offset = offset, number = number)

        return request<Unit, SearchBooks200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchBooks
     *
     * @param query The search query. (optional)
     * @param earliestPublishYear The books must have been published after this year. (optional)
     * @param latestPublishYear The books must have been published before this year. (optional)
     * @param minRating The minimum rating the book must have gotten in the interval [0,1]. (optional)
     * @param maxRating The maximum rating the book must have gotten in the interval [0,1]. (optional)
     * @param genres A comma-separated list of  genres. Only books from any of the given genres will be returned. (optional)
     * @param authors A comma-separated list of author ids or names. Only books from any of the given authors will be returned. You can retrieve author ids from the search authors endpoint. Pass author names is slower and if two authors have the same name you can&#39;t disambiguate. (optional)
     * @param isbn Only the book matching the ISBN-13 will be returned (optional)
     * @param oclc Only the book matching the OCLC will be returned (optional)
     * @param sort The sorting criteria (publish-date or rating). (optional)
     * @param sortDirection Whether to sort ascending or descending (ASC or DESC). (optional)
     * @param groupResults Whether to group similar editions of the same book. (optional)
     * @param offset The number of books to skip in range [0,1000] (optional)
     * @param number The number of books to return in range [1,100] (optional)
     * @return RequestConfig
     */
    fun searchBooksRequestConfig(query: kotlin.String?, earliestPublishYear: kotlin.Int?, latestPublishYear: kotlin.Int?, minRating: kotlin.Double?, maxRating: kotlin.Double?, genres: kotlin.String?, authors: kotlin.String?, isbn: kotlin.String?, oclc: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, groupResults: kotlin.Boolean?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (earliestPublishYear != null) {
                    put("earliest-publish-year", listOf(earliestPublishYear.toString()))
                }
                if (latestPublishYear != null) {
                    put("latest-publish-year", listOf(latestPublishYear.toString()))
                }
                if (minRating != null) {
                    put("min-rating", listOf(minRating.toString()))
                }
                if (maxRating != null) {
                    put("max-rating", listOf(maxRating.toString()))
                }
                if (genres != null) {
                    put("genres", listOf(genres.toString()))
                }
                if (authors != null) {
                    put("authors", listOf(authors.toString()))
                }
                if (isbn != null) {
                    put("isbn", listOf(isbn.toString()))
                }
                if (oclc != null) {
                    put("oclc", listOf(oclc.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (sortDirection != null) {
                    put("sort-direction", listOf(sortDirection.toString()))
                }
                if (groupResults != null) {
                    put("group-results", listOf(groupResults.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/search-books",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
